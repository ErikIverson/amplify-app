{"ast":null,"code":"import { C as CSS, p as plt, w as win, a as promiseResolve, d as doc, N as NAMESPACE } from './index-83f2275b.js';\nimport { browserOrNode } from '@aws-amplify/core';\n/*\n Stencil Client Patch v1.15.0 | MIT Licensed | https://stenciljs.com\n */\n\nconst getDynamicImportFunction = namespace => `__sc_import_${namespace.replace(/\\s|-/g, '_')}`;\n\nconst patchEsm = () => {\n  // NOTE!! This fn cannot use async/await!\n  // @ts-ignore\n  if (!(CSS && CSS.supports && CSS.supports('color', 'var(--c)'))) {\n    // @ts-ignore\n    return import(\n    /* webpackChunkName: \"polyfills-css-shim\" */\n    './css-shim-3b0ed064.js').then(() => {\n      if (plt.$cssShim$ = win.__cssshim) {\n        return plt.$cssShim$.i();\n      } else {\n        // for better minification\n        return 0;\n      }\n    });\n  }\n\n  return promiseResolve();\n};\n\nconst patchBrowser = () => {\n  {\n    // shim css vars\n    plt.$cssShim$ = win.__cssshim;\n  } // @ts-ignore\n\n  const scriptElm = Array.from(doc.querySelectorAll('script')).find(s => new RegExp(`\\/${NAMESPACE}(\\\\.esm)?\\\\.js($|\\\\?|#)`).test(s.src) || s.getAttribute('data-stencil-namespace') === NAMESPACE);\n  const opts = scriptElm['data-opts'] || {};\n\n  if ('onbeforeload' in scriptElm && !history.scrollRestoration\n  /* IS_ESM_BUILD */\n  ) {\n    // Safari < v11 support: This IF is true if it's Safari below v11.\n    // This fn cannot use async/await since Safari didn't support it until v11,\n    // however, Safari 10 did support modules. Safari 10 also didn't support \"nomodule\",\n    // so both the ESM file and nomodule file would get downloaded. Only Safari\n    // has 'onbeforeload' in the script, and \"history.scrollRestoration\" was added\n    // to Safari in v11. Return a noop then() so the async/await ESM code doesn't continue.\n    // IS_ESM_BUILD is replaced at build time so this check doesn't happen in systemjs builds.\n    return {\n      then() {\n        /* promise noop */\n      }\n\n    };\n  }\n\n  {\n    opts.resourcesUrl = new URL('.', new URL(scriptElm.getAttribute('data-resources-url') || scriptElm.src, win.location.href)).href;\n    {\n      patchDynamicImport(opts.resourcesUrl, scriptElm);\n    }\n\n    if (!win.customElements) {\n      // module support, but no custom elements support (Old Edge)\n      // @ts-ignore\n      return import(\n      /* webpackChunkName: \"polyfills-dom\" */\n      './dom-3fa9e65e.js').then(() => opts);\n    }\n  }\n  return promiseResolve(opts);\n};\n\nconst patchDynamicImport = (base, orgScriptElm) => {\n  const importFunctionName = getDynamicImportFunction(NAMESPACE);\n\n  try {\n    // test if this browser supports dynamic imports\n    // There is a caching issue in V8, that breaks using import() in Function\n    // By generating a random string, we can workaround it\n    // Check https://bugs.chromium.org/p/chromium/issues/detail?id=990810 for more info\n    win[importFunctionName] = new Function('w', `return import(w);//${Math.random()}`);\n  } catch (e) {\n    // this shim is specifically for browsers that do support \"esm\" imports\n    // however, they do NOT support \"dynamic\" imports\n    // basically this code is for old Edge, v18 and below\n    const moduleMap = new Map();\n\n    win[importFunctionName] = src => {\n      const url = new URL(src, base).href;\n      let mod = moduleMap.get(url);\n\n      if (!mod) {\n        const script = doc.createElement('script');\n        script.type = 'module';\n        script.crossOrigin = orgScriptElm.crossOrigin;\n        script.src = URL.createObjectURL(new Blob([`import * as m from '${url}'; window.${importFunctionName}.m = m;`], {\n          type: 'application/javascript'\n        }));\n        mod = new Promise(resolve => {\n          script.onload = () => {\n            resolve(win[importFunctionName].m);\n            script.remove();\n          };\n        });\n        moduleMap.set(url, mod);\n        doc.head.appendChild(script);\n      }\n\n      return mod;\n    };\n  }\n};\n/* eslint-disable */\n\n\nif (browserOrNode().isBrowser) {\n  let customStyles = document.createElement('style');\n  customStyles.appendChild(document.createTextNode(`\n    :root {\n      /* Typography */\n      --amplify-font-family: 'Amazon Ember', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;\n\n      --amplify-text-xxs: 0.75rem;\n      --amplify-text-xs: 0.81rem;\n      --amplify-text-sm: 0.875rem;\n      --amplify-text-md: 1rem;\n      --amplify-text-md-sub: 1.15rem;\n      --amplify-text-lg: 1.5rem;\n      --amplify-text-xl: 2rem;\n      --amplify-text-xxl: 2.5rem;\n\n      /* Colors */\n      --amplify-primary-color: #ff9900;\n      --amplify-primary-contrast: var(--amplify-white);\n      --amplify-primary-tint: #ffac31;\n      --amplify-primary-shade: #e88b01;\n\n      --amplify-secondary-color: #152939;\n      --amplify-secondary-contrast: var(--amplify-white);\n      --amplify-secondary-tint: #31465f;\n      --amplify-secondary-shade: #1F2A37;\n\n      --amplify-tertiary-color: #5d8aff;\n      --amplify-tertiary-contrast: var(--amplify-white);\n      --amplify-tertiary-tint: #7da1ff;\n      --amplify-tertiary-shade: #537BE5;\n\n      --amplify-background-color: var(--amplify-white);\n\n      /* Neutral */\n      --amplify-grey: #828282;\n      --amplify-light-grey: #c4c4c4;\n      --amplify-white: #ffffff;\n      --amplify-smoke-white: #f5f5f5;\n      --amplify-red: #dd3f5b;\n      --amplify-blue: #099ac8;\n    }\n  `));\n  let parentElement = document.getElementsByTagName('head')[0];\n  const firstChild = parentElement.firstChild;\n  parentElement.insertBefore(customStyles, firstChild);\n}\n\nexport { patchEsm as a, patchBrowser as p };","map":{"version":3,"sources":["C:/Users/eriki/Documents/GitHub/amplify-app/node_modules/@aws-amplify/ui-components/dist/esm/theme-19a9209a.js"],"names":["C","CSS","p","plt","w","win","a","promiseResolve","d","doc","N","NAMESPACE","browserOrNode","getDynamicImportFunction","namespace","replace","patchEsm","supports","then","$cssShim$","__cssshim","i","patchBrowser","scriptElm","Array","from","querySelectorAll","find","s","RegExp","test","src","getAttribute","opts","history","scrollRestoration","resourcesUrl","URL","location","href","patchDynamicImport","customElements","base","orgScriptElm","importFunctionName","Function","Math","random","e","moduleMap","Map","url","mod","get","script","createElement","type","crossOrigin","createObjectURL","Blob","Promise","resolve","onload","m","remove","set","head","appendChild","isBrowser","customStyles","document","createTextNode","parentElement","getElementsByTagName","firstChild","insertBefore"],"mappings":"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","sourcesContent":["import { C as CSS, p as plt, w as win, a as promiseResolve, d as doc, N as NAMESPACE } from './index-83f2275b.js';\nimport { browserOrNode } from '@aws-amplify/core';\n\n/*\n Stencil Client Patch v1.15.0 | MIT Licensed | https://stenciljs.com\n */\nconst getDynamicImportFunction = (namespace) => `__sc_import_${namespace.replace(/\\s|-/g, '_')}`;\nconst patchEsm = () => {\n    // NOTE!! This fn cannot use async/await!\n    // @ts-ignore\n    if ( !(CSS && CSS.supports && CSS.supports('color', 'var(--c)'))) {\n        // @ts-ignore\n        return import(/* webpackChunkName: \"polyfills-css-shim\" */ './css-shim-3b0ed064.js').then(() => {\n            if ((plt.$cssShim$ = win.__cssshim)) {\n                return plt.$cssShim$.i();\n            }\n            else {\n                // for better minification\n                return 0;\n            }\n        });\n    }\n    return promiseResolve();\n};\nconst patchBrowser = () => {\n    {\n        // shim css vars\n        plt.$cssShim$ = win.__cssshim;\n    }\n    // @ts-ignore\n    const scriptElm =  Array.from(doc.querySelectorAll('script')).find(s => new RegExp(`\\/${NAMESPACE}(\\\\.esm)?\\\\.js($|\\\\?|#)`).test(s.src) || s.getAttribute('data-stencil-namespace') === NAMESPACE)\n        ;\n    const opts =  scriptElm['data-opts'] || {} ;\n    if ( 'onbeforeload' in scriptElm && !history.scrollRestoration /* IS_ESM_BUILD */) {\n        // Safari < v11 support: This IF is true if it's Safari below v11.\n        // This fn cannot use async/await since Safari didn't support it until v11,\n        // however, Safari 10 did support modules. Safari 10 also didn't support \"nomodule\",\n        // so both the ESM file and nomodule file would get downloaded. Only Safari\n        // has 'onbeforeload' in the script, and \"history.scrollRestoration\" was added\n        // to Safari in v11. Return a noop then() so the async/await ESM code doesn't continue.\n        // IS_ESM_BUILD is replaced at build time so this check doesn't happen in systemjs builds.\n        return {\n            then() {\n                /* promise noop */\n            },\n        };\n    }\n    {\n        opts.resourcesUrl = new URL('.', new URL(scriptElm.getAttribute('data-resources-url') || scriptElm.src, win.location.href)).href;\n        {\n            patchDynamicImport(opts.resourcesUrl, scriptElm);\n        }\n        if ( !win.customElements) {\n            // module support, but no custom elements support (Old Edge)\n            // @ts-ignore\n            return import(/* webpackChunkName: \"polyfills-dom\" */ './dom-3fa9e65e.js').then(() => opts);\n        }\n    }\n    return promiseResolve(opts);\n};\nconst patchDynamicImport = (base, orgScriptElm) => {\n    const importFunctionName = getDynamicImportFunction(NAMESPACE);\n    try {\n        // test if this browser supports dynamic imports\n        // There is a caching issue in V8, that breaks using import() in Function\n        // By generating a random string, we can workaround it\n        // Check https://bugs.chromium.org/p/chromium/issues/detail?id=990810 for more info\n        win[importFunctionName] = new Function('w', `return import(w);//${Math.random()}`);\n    }\n    catch (e) {\n        // this shim is specifically for browsers that do support \"esm\" imports\n        // however, they do NOT support \"dynamic\" imports\n        // basically this code is for old Edge, v18 and below\n        const moduleMap = new Map();\n        win[importFunctionName] = (src) => {\n            const url = new URL(src, base).href;\n            let mod = moduleMap.get(url);\n            if (!mod) {\n                const script = doc.createElement('script');\n                script.type = 'module';\n                script.crossOrigin = orgScriptElm.crossOrigin;\n                script.src = URL.createObjectURL(new Blob([`import * as m from '${url}'; window.${importFunctionName}.m = m;`], { type: 'application/javascript' }));\n                mod = new Promise(resolve => {\n                    script.onload = () => {\n                        resolve(win[importFunctionName].m);\n                        script.remove();\n                    };\n                });\n                moduleMap.set(url, mod);\n                doc.head.appendChild(script);\n            }\n            return mod;\n        };\n    }\n};\n\n/* eslint-disable */\nif (browserOrNode().isBrowser) {\n    let customStyles = document.createElement('style');\n    customStyles.appendChild(document.createTextNode(`\n    :root {\n      /* Typography */\n      --amplify-font-family: 'Amazon Ember', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;\n\n      --amplify-text-xxs: 0.75rem;\n      --amplify-text-xs: 0.81rem;\n      --amplify-text-sm: 0.875rem;\n      --amplify-text-md: 1rem;\n      --amplify-text-md-sub: 1.15rem;\n      --amplify-text-lg: 1.5rem;\n      --amplify-text-xl: 2rem;\n      --amplify-text-xxl: 2.5rem;\n\n      /* Colors */\n      --amplify-primary-color: #ff9900;\n      --amplify-primary-contrast: var(--amplify-white);\n      --amplify-primary-tint: #ffac31;\n      --amplify-primary-shade: #e88b01;\n\n      --amplify-secondary-color: #152939;\n      --amplify-secondary-contrast: var(--amplify-white);\n      --amplify-secondary-tint: #31465f;\n      --amplify-secondary-shade: #1F2A37;\n\n      --amplify-tertiary-color: #5d8aff;\n      --amplify-tertiary-contrast: var(--amplify-white);\n      --amplify-tertiary-tint: #7da1ff;\n      --amplify-tertiary-shade: #537BE5;\n\n      --amplify-background-color: var(--amplify-white);\n\n      /* Neutral */\n      --amplify-grey: #828282;\n      --amplify-light-grey: #c4c4c4;\n      --amplify-white: #ffffff;\n      --amplify-smoke-white: #f5f5f5;\n      --amplify-red: #dd3f5b;\n      --amplify-blue: #099ac8;\n    }\n  `));\n    let parentElement = document.getElementsByTagName('head')[0];\n    const firstChild = parentElement.firstChild;\n    parentElement.insertBefore(customStyles, firstChild);\n}\n\nexport { patchEsm as a, patchBrowser as p };\n"]},"metadata":{},"sourceType":"module"}