{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/eriki/Documents/GitHub/amplify-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { r as registerInstance, h, H as Host, g as getElement } from './index-83f2275b.js';\nimport { Logger, Hub } from '@aws-amplify/core';\nimport { A as AuthState } from './auth-types-78df304e.js';\nimport { appendToCognitoUserAgent, Auth } from '@aws-amplify/auth';\nimport './Translations-c833f663.js';\nimport { T as TOAST_AUTH_ERROR_EVENT, U as UI_AUTH_CHANNEL, A as AUTH_CHANNEL, N as NO_AUTH_MODULE_FOUND } from './constants-c8ecaa24.js';\nimport { d as dispatchAuthStateChangeEvent, o as onAuthUIStateChange } from './helpers-9703fe65.js';\nimport { c as checkContact } from './auth-helpers-475f7fa4.js';\nconst authSlotNames = {\n  [AuthState.SignIn]: 'sign-in',\n  [AuthState.ConfirmSignIn]: 'confirm-sign-in',\n  [AuthState.SignUp]: 'sign-up',\n  [AuthState.ConfirmSignUp]: 'confirm-sign-up',\n  [AuthState.ForgotPassword]: 'forgot-password',\n  [AuthState.ResetPassword]: 'require-new-password',\n  [AuthState.VerifyContact]: 'verify-contact',\n  [AuthState.TOTPSetup]: 'totp-setup',\n  [AuthState.Loading]: 'loading'\n};\nconst amplifyAuthenticatorCss = \":host{--background-color:var(--amplify-background-color);--width:28.75rem;--min-width:20rem;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;--box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.15);--border-radius:6px;--padding:35px 40px;--margin-bottom:20px;--container-height:100vh;--container-display:flex;--container-justify:center;--container-align:center}.auth-container{display:var(--container-display);-ms-flex-pack:var(--container-justify);justify-content:var(--container-justify);-ms-flex-align:var(--container-align);align-items:var(--container-align);min-height:var(--container-height)}\";\nconst logger = new Logger('Authenticator');\nconst AmplifyAuthenticator = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /** Initial starting state of the Authenticator component. E.g. If `signup` is passed the default component is set to AmplifySignUp */\n\n    this.initialAuthState = AuthState.SignIn;\n    /** Callback for Authenticator state machine changes */\n\n    this.handleAuthStateChange = () => {};\n    /** Hide amplify-toast for auth errors */\n\n\n    this.hideToast = false;\n    this.authState = AuthState.Loading;\n    this.toastMessage = '';\n\n    this.handleExternalAuthEvent = ({\n      payload\n    }) => {\n      switch (payload.event) {\n        case 'cognitoHostedUI':\n        case 'signIn':\n          checkContact(payload.data, dispatchAuthStateChangeEvent);\n          break;\n\n        case 'cognitoHostedUI_failure':\n        case 'parsingUrl_failure':\n        case 'signOut':\n        case 'customGreetingSignOut':\n          return dispatchAuthStateChangeEvent(this.initialAuthState);\n      }\n    };\n\n    this.handleToastEvent = ({\n      payload\n    }) => {\n      switch (payload.event) {\n        case TOAST_AUTH_ERROR_EVENT:\n          if (payload.message) this.toastMessage = payload.message;\n          break;\n      }\n    };\n  }\n\n  componentWillLoad() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      onAuthUIStateChange((authState, authData) => {\n        _this.onAuthStateChange(authState, authData);\n\n        _this.toastMessage = '';\n      });\n      if (!_this.hideToast) Hub.listen(UI_AUTH_CHANNEL, _this.handleToastEvent);\n      Hub.listen(AUTH_CHANNEL, _this.handleExternalAuthEvent);\n      appendToCognitoUserAgent('amplify-authenticator');\n      yield _this.checkUser();\n    })();\n  }\n\n  checkUser() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!Auth || typeof Auth.currentAuthenticatedUser !== 'function') {\n        throw new Error(NO_AUTH_MODULE_FOUND);\n      }\n\n      return Auth.currentAuthenticatedUser().then(user => {\n        dispatchAuthStateChangeEvent(AuthState.SignedIn, user);\n      }).catch(() => {\n        dispatchAuthStateChangeEvent(_this2.initialAuthState);\n      });\n    })();\n  }\n\n  onAuthStateChange(nextAuthState, data) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (nextAuthState === undefined) return logger.error('nextAuthState cannot be undefined');\n      logger.info('Inside onAuthStateChange Method current authState:', _this3.authState);\n\n      if (nextAuthState === AuthState.SignedOut) {\n        _this3.authState = _this3.initialAuthState;\n      } else {\n        _this3.authState = nextAuthState;\n      }\n\n      _this3.authData = data;\n      if (_this3.authData) logger.log('Auth Data was set:', _this3.authData);\n\n      if (_this3.authState === nextAuthState) {\n        _this3.handleAuthStateChange(_this3.authState, _this3.authData);\n\n        logger.info(`authState has been updated to ${_this3.authState}`);\n      }\n    })();\n  } // Returns the auth component corresponding to the given authState.\n\n\n  getAuthComponent(authState) {\n    switch (authState) {\n      case AuthState.SignIn:\n        return h(\"amplify-sign-in\", {\n          federated: this.federated,\n          usernameAlias: this.usernameAlias\n        });\n\n      case AuthState.ConfirmSignIn:\n        return h(\"amplify-confirm-sign-in\", {\n          user: this.authData\n        });\n\n      case AuthState.SignUp:\n        return h(\"amplify-sign-up\", {\n          usernameAlias: this.usernameAlias\n        });\n\n      case AuthState.ConfirmSignUp:\n        return h(\"amplify-confirm-sign-up\", {\n          user: this.authData,\n          usernameAlias: this.usernameAlias\n        });\n\n      case AuthState.ForgotPassword:\n        return h(\"amplify-forgot-password\", {\n          usernameAlias: this.usernameAlias\n        });\n\n      case AuthState.ResetPassword:\n        return h(\"amplify-require-new-password\", {\n          user: this.authData\n        });\n\n      case AuthState.VerifyContact:\n        return h(\"amplify-verify-contact\", {\n          user: this.authData\n        });\n\n      case AuthState.TOTPSetup:\n        return h(\"amplify-totp-setup\", {\n          user: this.authData\n        });\n\n      case AuthState.Loading:\n        return h(\"div\", null, \"Loading...\");\n\n      default:\n        throw new Error(`Unhandled auth state: ${authState}`);\n    }\n  } // Returns a slot containing the Auth component corresponding to the given authState\n\n\n  getSlotWithAuthComponent(authState) {\n    const authComponent = this.getAuthComponent(authState);\n    const slotName = authSlotNames[authState];\n    const slotIsEmpty = this.el.querySelector(`[slot=\"${slotName}\"]`) === null; // true if no element has been inserted to the slot\n\n    /**\n     * Connect the inner auth component to DOM only if the slot hasn't been overwritten. This prevents\n     * the overwritten component from calling its lifecycle methods.\n     */\n\n    return h(\"slot\", {\n      name: slotName\n    }, slotIsEmpty && authComponent);\n  }\n\n  disconnectedCallback() {\n    Hub.remove(AUTH_CHANNEL, this.handleExternalAuthEvent);\n    if (!this.hideToast) Hub.remove(UI_AUTH_CHANNEL, this.handleToastEvent);\n    return onAuthUIStateChange;\n  }\n\n  render() {\n    return h(Host, null, !this.hideToast && this.toastMessage && h(\"amplify-toast\", {\n      message: this.toastMessage,\n      handleClose: () => {\n        this.toastMessage = '';\n      },\n      \"data-test\": \"authenticator-error\"\n    }), this.authState === AuthState.SignedIn ? [h(\"slot\", {\n      name: \"greetings\"\n    }), h(\"slot\", null)] : h(\"div\", {\n      class: \"auth-container\"\n    }, this.getSlotWithAuthComponent(this.authState)));\n  }\n\n  get el() {\n    return getElement(this);\n  }\n\n};\nAmplifyAuthenticator.style = amplifyAuthenticatorCss;\nexport { AmplifyAuthenticator as amplify_authenticator };","map":{"version":3,"sources":["C:/Users/eriki/Documents/GitHub/amplify-app/node_modules/@aws-amplify/ui-components/dist/esm/amplify-authenticator.entry.js"],"names":["r","registerInstance","h","H","Host","g","getElement","Logger","Hub","A","AuthState","appendToCognitoUserAgent","Auth","T","TOAST_AUTH_ERROR_EVENT","U","UI_AUTH_CHANNEL","AUTH_CHANNEL","N","NO_AUTH_MODULE_FOUND","d","dispatchAuthStateChangeEvent","o","onAuthUIStateChange","c","checkContact","authSlotNames","SignIn","ConfirmSignIn","SignUp","ConfirmSignUp","ForgotPassword","ResetPassword","VerifyContact","TOTPSetup","Loading","amplifyAuthenticatorCss","logger","AmplifyAuthenticator","constructor","hostRef","initialAuthState","handleAuthStateChange","hideToast","authState","toastMessage","handleExternalAuthEvent","payload","event","data","handleToastEvent","message","componentWillLoad","authData","onAuthStateChange","listen","checkUser","currentAuthenticatedUser","Error","then","user","SignedIn","catch","nextAuthState","undefined","error","info","SignedOut","log","getAuthComponent","federated","usernameAlias","getSlotWithAuthComponent","authComponent","slotName","slotIsEmpty","el","querySelector","name","disconnectedCallback","remove","render","handleClose","class","style","amplify_authenticator"],"mappings":"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","sourcesContent":["import { r as registerInstance, h, H as Host, g as getElement } from './index-83f2275b.js';\nimport { Logger, Hub } from '@aws-amplify/core';\nimport { A as AuthState } from './auth-types-78df304e.js';\nimport { appendToCognitoUserAgent, Auth } from '@aws-amplify/auth';\nimport './Translations-c833f663.js';\nimport { T as TOAST_AUTH_ERROR_EVENT, U as UI_AUTH_CHANNEL, A as AUTH_CHANNEL, N as NO_AUTH_MODULE_FOUND } from './constants-c8ecaa24.js';\nimport { d as dispatchAuthStateChangeEvent, o as onAuthUIStateChange } from './helpers-9703fe65.js';\nimport { c as checkContact } from './auth-helpers-475f7fa4.js';\n\nconst authSlotNames = {\n    [AuthState.SignIn]: 'sign-in',\n    [AuthState.ConfirmSignIn]: 'confirm-sign-in',\n    [AuthState.SignUp]: 'sign-up',\n    [AuthState.ConfirmSignUp]: 'confirm-sign-up',\n    [AuthState.ForgotPassword]: 'forgot-password',\n    [AuthState.ResetPassword]: 'require-new-password',\n    [AuthState.VerifyContact]: 'verify-contact',\n    [AuthState.TOTPSetup]: 'totp-setup',\n    [AuthState.Loading]: 'loading',\n};\n\nconst amplifyAuthenticatorCss = \":host{--background-color:var(--amplify-background-color);--width:28.75rem;--min-width:20rem;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;--box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.15);--border-radius:6px;--padding:35px 40px;--margin-bottom:20px;--container-height:100vh;--container-display:flex;--container-justify:center;--container-align:center}.auth-container{display:var(--container-display);-ms-flex-pack:var(--container-justify);justify-content:var(--container-justify);-ms-flex-align:var(--container-align);align-items:var(--container-align);min-height:var(--container-height)}\";\n\nconst logger = new Logger('Authenticator');\nconst AmplifyAuthenticator = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Initial starting state of the Authenticator component. E.g. If `signup` is passed the default component is set to AmplifySignUp */\n        this.initialAuthState = AuthState.SignIn;\n        /** Callback for Authenticator state machine changes */\n        this.handleAuthStateChange = () => { };\n        /** Hide amplify-toast for auth errors */\n        this.hideToast = false;\n        this.authState = AuthState.Loading;\n        this.toastMessage = '';\n        this.handleExternalAuthEvent = ({ payload }) => {\n            switch (payload.event) {\n                case 'cognitoHostedUI':\n                case 'signIn':\n                    checkContact(payload.data, dispatchAuthStateChangeEvent);\n                    break;\n                case 'cognitoHostedUI_failure':\n                case 'parsingUrl_failure':\n                case 'signOut':\n                case 'customGreetingSignOut':\n                    return dispatchAuthStateChangeEvent(this.initialAuthState);\n            }\n        };\n        this.handleToastEvent = ({ payload }) => {\n            switch (payload.event) {\n                case TOAST_AUTH_ERROR_EVENT:\n                    if (payload.message)\n                        this.toastMessage = payload.message;\n                    break;\n            }\n        };\n    }\n    async componentWillLoad() {\n        onAuthUIStateChange((authState, authData) => {\n            this.onAuthStateChange(authState, authData);\n            this.toastMessage = '';\n        });\n        if (!this.hideToast)\n            Hub.listen(UI_AUTH_CHANNEL, this.handleToastEvent);\n        Hub.listen(AUTH_CHANNEL, this.handleExternalAuthEvent);\n        appendToCognitoUserAgent('amplify-authenticator');\n        await this.checkUser();\n    }\n    async checkUser() {\n        if (!Auth || typeof Auth.currentAuthenticatedUser !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        return Auth.currentAuthenticatedUser()\n            .then(user => {\n            dispatchAuthStateChangeEvent(AuthState.SignedIn, user);\n        })\n            .catch(() => {\n            dispatchAuthStateChangeEvent(this.initialAuthState);\n        });\n    }\n    async onAuthStateChange(nextAuthState, data) {\n        if (nextAuthState === undefined)\n            return logger.error('nextAuthState cannot be undefined');\n        logger.info('Inside onAuthStateChange Method current authState:', this.authState);\n        if (nextAuthState === AuthState.SignedOut) {\n            this.authState = this.initialAuthState;\n        }\n        else {\n            this.authState = nextAuthState;\n        }\n        this.authData = data;\n        if (this.authData)\n            logger.log('Auth Data was set:', this.authData);\n        if (this.authState === nextAuthState) {\n            this.handleAuthStateChange(this.authState, this.authData);\n            logger.info(`authState has been updated to ${this.authState}`);\n        }\n    }\n    // Returns the auth component corresponding to the given authState.\n    getAuthComponent(authState) {\n        switch (authState) {\n            case AuthState.SignIn:\n                return (h(\"amplify-sign-in\", { federated: this.federated, usernameAlias: this.usernameAlias }));\n            case AuthState.ConfirmSignIn:\n                return h(\"amplify-confirm-sign-in\", { user: this.authData });\n            case AuthState.SignUp:\n                return h(\"amplify-sign-up\", { usernameAlias: this.usernameAlias });\n            case AuthState.ConfirmSignUp:\n                return (h(\"amplify-confirm-sign-up\", { user: this.authData, usernameAlias: this.usernameAlias }));\n            case AuthState.ForgotPassword:\n                return h(\"amplify-forgot-password\", { usernameAlias: this.usernameAlias });\n            case AuthState.ResetPassword:\n                return h(\"amplify-require-new-password\", { user: this.authData });\n            case AuthState.VerifyContact:\n                return h(\"amplify-verify-contact\", { user: this.authData });\n            case AuthState.TOTPSetup:\n                return h(\"amplify-totp-setup\", { user: this.authData });\n            case AuthState.Loading:\n                return h(\"div\", null, \"Loading...\");\n            default:\n                throw new Error(`Unhandled auth state: ${authState}`);\n        }\n    }\n    // Returns a slot containing the Auth component corresponding to the given authState\n    getSlotWithAuthComponent(authState) {\n        const authComponent = this.getAuthComponent(authState);\n        const slotName = authSlotNames[authState];\n        const slotIsEmpty = this.el.querySelector(`[slot=\"${slotName}\"]`) === null; // true if no element has been inserted to the slot\n        /**\n         * Connect the inner auth component to DOM only if the slot hasn't been overwritten. This prevents\n         * the overwritten component from calling its lifecycle methods.\n         */\n        return h(\"slot\", { name: slotName }, slotIsEmpty && authComponent);\n    }\n    disconnectedCallback() {\n        Hub.remove(AUTH_CHANNEL, this.handleExternalAuthEvent);\n        if (!this.hideToast)\n            Hub.remove(UI_AUTH_CHANNEL, this.handleToastEvent);\n        return onAuthUIStateChange;\n    }\n    render() {\n        return (h(Host, null, !this.hideToast && this.toastMessage && (h(\"amplify-toast\", { message: this.toastMessage, handleClose: () => {\n                this.toastMessage = '';\n            }, \"data-test\": \"authenticator-error\" })), this.authState === AuthState.SignedIn ? ([h(\"slot\", { name: \"greetings\" }), h(\"slot\", null)]) : (h(\"div\", { class: \"auth-container\" }, this.getSlotWithAuthComponent(this.authState)))));\n    }\n    get el() { return getElement(this); }\n};\nAmplifyAuthenticator.style = amplifyAuthenticatorCss;\n\nexport { AmplifyAuthenticator as amplify_authenticator };\n"]},"metadata":{},"sourceType":"module"}