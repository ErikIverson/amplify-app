{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/eriki/Documents/GitHub/amplify-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { r as registerInstance, h } from './index-83f2275b.js';\nimport { Logger, I18n } from '@aws-amplify/core';\nimport { M as MfaOption } from './auth-types-78df304e.js';\nimport { Auth } from '@aws-amplify/auth';\nimport { T as Translations } from './Translations-c833f663.js';\nimport { N as NO_AUTH_MODULE_FOUND, e as USER_NOT_SETUP_SOFTWARE_TOKEN_MFA, f as USER_NOT_VERIFIED_SOFTWARE_TOKEN_MFA } from './constants-c8ecaa24.js';\nconst logger = new Logger('SelectMFAType');\nconst AmplifySelectMFAType = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /** Fires when Verify is clicked */\n\n    this.handleSubmit = event => this.verify(event);\n\n    this.TOTPSetup = false;\n    this.selectMessage = null;\n    this.MFAMethod = null;\n    this.isTOTP = false;\n    this.isNoMFA = false;\n    this.isSMS = false;\n    this.loading = false;\n    this.isToastVisible = false;\n  }\n\n  handleRadioButtonChange(event) {\n    this.TOTPSetup = false;\n    this.selectMessage = null; // Reseting state values to default\n\n    this.isNoMFA = false;\n    this.isTOTP = false;\n    this.isSMS = false;\n    this.isToastVisible = false;\n    const {\n      value,\n      type,\n      checked\n    } = event.target;\n    const checkType = ['radio', 'checkbox'].includes(type);\n\n    if (value === MfaOption.SMS && checkType) {\n      this.isSMS = checked;\n    }\n\n    if (value === MfaOption.TOTP && checkType) {\n      this.isTOTP = checked;\n    }\n\n    if (value === MfaOption.NOMFA && checkType) {\n      this.isNoMFA = checked;\n    }\n  }\n\n  verify(event) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // avoid submitting the form\n      if (event) {\n        event.preventDefault();\n      }\n\n      logger.debug('MFA Type Values', {\n        TOTP: _this.isTOTP,\n        SMS: _this.isSMS,\n        'No MFA': _this.isNoMFA\n      });\n\n      if (_this.isTOTP) {\n        _this.MFAMethod = MfaOption.TOTP;\n      } else if (_this.isSMS) {\n        _this.MFAMethod = MfaOption.SMS;\n      } else if (_this.isNoMFA) {\n        _this.MFAMethod = MfaOption.NOMFA;\n      }\n\n      const user = _this.authData;\n\n      if (!Auth || typeof Auth.setPreferredMFA !== 'function') {\n        throw new Error(NO_AUTH_MODULE_FOUND);\n      }\n\n      _this.loading = true;\n\n      try {\n        const preferredMFAData = yield Auth.setPreferredMFA(user, _this.MFAMethod);\n        logger.debug('Set Preferred MFA Succeeded', preferredMFAData);\n        _this.selectMessage = `${I18n.get(Translations.SUCCESS_MFA_TYPE)} ${_this.MFAMethod}`;\n      } catch (error) {\n        const {\n          message\n        } = error;\n\n        if (message === USER_NOT_SETUP_SOFTWARE_TOKEN_MFA || message === USER_NOT_VERIFIED_SOFTWARE_TOKEN_MFA) {\n          _this.TOTPSetup = true;\n          _this.selectMessage = I18n.get(Translations.SETUP_TOTP_REQUIRED);\n        } else {\n          logger.debug('Set Preferred MFA failed', error);\n          _this.selectMessage = I18n.get(Translations.UNABLE_TO_SETUP_MFA_AT_THIS_TIME);\n        }\n      } finally {\n        _this.loading = false;\n        _this.isToastVisible = true;\n      }\n    })();\n  }\n\n  contentBuilder() {\n    if (!this.MFATypes || Object.keys(this.MFATypes).length < 2) {\n      logger.debug(I18n.get(Translations.LESS_THAN_TWO_MFA_VALUES_MESSAGE));\n      return h(\"div\", null, h(\"a\", null, I18n.get(Translations.LESS_THAN_TWO_MFA_VALUES_MESSAGE)));\n    }\n\n    const {\n      SMS,\n      TOTP,\n      Optional\n    } = this.MFATypes;\n    return h(\"amplify-form-section\", {\n      submitButtonText: I18n.get(Translations.SELECT_MFA_TYPE_SUBMIT_BUTTON_TEXT),\n      headerText: I18n.get(Translations.SELECT_MFA_TYPE_HEADER_TEXT),\n      handleSubmit: event => this.handleSubmit(event),\n      loading: this.loading\n    }, SMS ? h(\"amplify-radio-button\", {\n      key: \"sms\",\n      name: \"MFAType\",\n      value: \"SMS\",\n      label: \"SMS\",\n      handleInputChange: event => this.handleRadioButtonChange(event)\n    }) : null, TOTP ? h(\"amplify-radio-button\", {\n      key: \"totp\",\n      name: \"MFAType\",\n      value: \"TOTP\",\n      label: \"TOTP\",\n      handleInputChange: event => this.handleRadioButtonChange(event)\n    }) : null, Optional ? h(\"amplify-radio-button\", {\n      key: \"noMFA\",\n      name: \"MFAType\",\n      value: \"NOMFA\",\n      label: \"No MFA\",\n      handleInputChange: event => this.handleRadioButtonChange(event)\n    }) : null);\n  }\n\n  renderToast() {\n    if (this.isToastVisible && this.selectMessage) {\n      return h(\"amplify-toast\", {\n        message: this.selectMessage,\n        handleClose: () => {\n          this.selectMessage = null;\n          this.isToastVisible = false;\n        }\n      });\n    }\n\n    return null;\n  }\n\n  render() {\n    return h(\"div\", null, this.contentBuilder(), this.TOTPSetup ? h(\"amplify-totp-setup\", {\n      user: this.authData\n    }) : null, this.renderToast());\n  }\n\n};\nexport { AmplifySelectMFAType as amplify_select_mfa_type };","map":{"version":3,"sources":["C:/Users/eriki/Documents/GitHub/amplify-app/node_modules/@aws-amplify/ui-components/dist/esm/amplify-select-mfa-type.entry.js"],"names":["r","registerInstance","h","Logger","I18n","M","MfaOption","Auth","T","Translations","N","NO_AUTH_MODULE_FOUND","e","USER_NOT_SETUP_SOFTWARE_TOKEN_MFA","f","USER_NOT_VERIFIED_SOFTWARE_TOKEN_MFA","logger","AmplifySelectMFAType","constructor","hostRef","handleSubmit","event","verify","TOTPSetup","selectMessage","MFAMethod","isTOTP","isNoMFA","isSMS","loading","isToastVisible","handleRadioButtonChange","value","type","checked","target","checkType","includes","SMS","TOTP","NOMFA","preventDefault","debug","user","authData","setPreferredMFA","Error","preferredMFAData","get","SUCCESS_MFA_TYPE","error","message","SETUP_TOTP_REQUIRED","UNABLE_TO_SETUP_MFA_AT_THIS_TIME","contentBuilder","MFATypes","Object","keys","length","LESS_THAN_TWO_MFA_VALUES_MESSAGE","Optional","submitButtonText","SELECT_MFA_TYPE_SUBMIT_BUTTON_TEXT","headerText","SELECT_MFA_TYPE_HEADER_TEXT","key","name","label","handleInputChange","renderToast","handleClose","render","amplify_select_mfa_type"],"mappings":"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","sourcesContent":["import { r as registerInstance, h } from './index-83f2275b.js';\nimport { Logger, I18n } from '@aws-amplify/core';\nimport { M as MfaOption } from './auth-types-78df304e.js';\nimport { Auth } from '@aws-amplify/auth';\nimport { T as Translations } from './Translations-c833f663.js';\nimport { N as NO_AUTH_MODULE_FOUND, e as USER_NOT_SETUP_SOFTWARE_TOKEN_MFA, f as USER_NOT_VERIFIED_SOFTWARE_TOKEN_MFA } from './constants-c8ecaa24.js';\n\nconst logger = new Logger('SelectMFAType');\nconst AmplifySelectMFAType = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Fires when Verify is clicked */\n        this.handleSubmit = event => this.verify(event);\n        this.TOTPSetup = false;\n        this.selectMessage = null;\n        this.MFAMethod = null;\n        this.isTOTP = false;\n        this.isNoMFA = false;\n        this.isSMS = false;\n        this.loading = false;\n        this.isToastVisible = false;\n    }\n    handleRadioButtonChange(event) {\n        this.TOTPSetup = false;\n        this.selectMessage = null;\n        // Reseting state values to default\n        this.isNoMFA = false;\n        this.isTOTP = false;\n        this.isSMS = false;\n        this.isToastVisible = false;\n        const { value, type, checked } = event.target;\n        const checkType = ['radio', 'checkbox'].includes(type);\n        if (value === MfaOption.SMS && checkType) {\n            this.isSMS = checked;\n        }\n        if (value === MfaOption.TOTP && checkType) {\n            this.isTOTP = checked;\n        }\n        if (value === MfaOption.NOMFA && checkType) {\n            this.isNoMFA = checked;\n        }\n    }\n    async verify(event) {\n        // avoid submitting the form\n        if (event) {\n            event.preventDefault();\n        }\n        logger.debug('MFA Type Values', {\n            TOTP: this.isTOTP,\n            SMS: this.isSMS,\n            'No MFA': this.isNoMFA,\n        });\n        if (this.isTOTP) {\n            this.MFAMethod = MfaOption.TOTP;\n        }\n        else if (this.isSMS) {\n            this.MFAMethod = MfaOption.SMS;\n        }\n        else if (this.isNoMFA) {\n            this.MFAMethod = MfaOption.NOMFA;\n        }\n        const user = this.authData;\n        if (!Auth || typeof Auth.setPreferredMFA !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        try {\n            const preferredMFAData = await Auth.setPreferredMFA(user, this.MFAMethod);\n            logger.debug('Set Preferred MFA Succeeded', preferredMFAData);\n            this.selectMessage = `${I18n.get(Translations.SUCCESS_MFA_TYPE)} ${this.MFAMethod}`;\n        }\n        catch (error) {\n            const { message } = error;\n            if (message === USER_NOT_SETUP_SOFTWARE_TOKEN_MFA ||\n                message === USER_NOT_VERIFIED_SOFTWARE_TOKEN_MFA) {\n                this.TOTPSetup = true;\n                this.selectMessage = I18n.get(Translations.SETUP_TOTP_REQUIRED);\n            }\n            else {\n                logger.debug('Set Preferred MFA failed', error);\n                this.selectMessage = I18n.get(Translations.UNABLE_TO_SETUP_MFA_AT_THIS_TIME);\n            }\n        }\n        finally {\n            this.loading = false;\n            this.isToastVisible = true;\n        }\n    }\n    contentBuilder() {\n        if (!this.MFATypes || Object.keys(this.MFATypes).length < 2) {\n            logger.debug(I18n.get(Translations.LESS_THAN_TWO_MFA_VALUES_MESSAGE));\n            return (h(\"div\", null, h(\"a\", null, I18n.get(Translations.LESS_THAN_TWO_MFA_VALUES_MESSAGE))));\n        }\n        const { SMS, TOTP, Optional } = this.MFATypes;\n        return (h(\"amplify-form-section\", { submitButtonText: I18n.get(Translations.SELECT_MFA_TYPE_SUBMIT_BUTTON_TEXT), headerText: I18n.get(Translations.SELECT_MFA_TYPE_HEADER_TEXT), handleSubmit: event => this.handleSubmit(event), loading: this.loading }, SMS ? (h(\"amplify-radio-button\", { key: \"sms\", name: \"MFAType\", value: \"SMS\", label: \"SMS\", handleInputChange: event => this.handleRadioButtonChange(event) })) : null, TOTP ? (h(\"amplify-radio-button\", { key: \"totp\", name: \"MFAType\", value: \"TOTP\", label: \"TOTP\", handleInputChange: event => this.handleRadioButtonChange(event) })) : null, Optional ? (h(\"amplify-radio-button\", { key: \"noMFA\", name: \"MFAType\", value: \"NOMFA\", label: \"No MFA\", handleInputChange: event => this.handleRadioButtonChange(event) })) : null));\n    }\n    renderToast() {\n        if (this.isToastVisible && this.selectMessage) {\n            return (h(\"amplify-toast\", { message: this.selectMessage, handleClose: () => {\n                    this.selectMessage = null;\n                    this.isToastVisible = false;\n                } }));\n        }\n        return null;\n    }\n    render() {\n        return (h(\"div\", null, this.contentBuilder(), this.TOTPSetup ? h(\"amplify-totp-setup\", { user: this.authData }) : null, this.renderToast()));\n    }\n};\n\nexport { AmplifySelectMFAType as amplify_select_mfa_type };\n"]},"metadata":{},"sourceType":"module"}