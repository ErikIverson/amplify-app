{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/eriki/Documents/GitHub/amplify-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { r as registerInstance, h, H as Host } from './index-83f2275b.js';\nimport { I18n, Logger, ConsoleLogger, isEmpty } from '@aws-amplify/core';\nimport { M as MfaOption, C as ChallengeName, A as AuthState, a as AuthFormField, U as UsernameAlias } from './auth-types-78df304e.js';\nimport { Auth } from '@aws-amplify/auth';\nimport { T as Translations } from './Translations-c833f663.js';\nimport { N as NO_AUTH_MODULE_FOUND, g as COUNTRY_DIAL_CODE_DEFAULT, b as PHONE_SUFFIX } from './constants-c8ecaa24.js';\nimport { d as dispatchAuthStateChangeEvent, a as dispatchToastHubEvent, c as checkUsernameAlias, i as isHintValid, h as handlePhoneNumberChange, b as composePhoneNumberInput, g as getRequiredAttributesMap } from './helpers-9703fe65.js';\nimport { c as checkContact, h as handleSignIn } from './auth-helpers-475f7fa4.js';\nconst AmplifyConfirmSignIn = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /** Fires when confirm sign in form is submitted */\n\n    this.handleSubmit = event => this.confirm(event);\n    /** Used for header text in confirm sign in component */\n\n\n    this.headerText = Translations.CONFIRM_SMS_CODE;\n    /** Used for the submit button text in confirm sign in component */\n\n    this.submitButtonText = Translations.CONFIRM;\n    /** Auth state change handler for this component */\n\n    this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n    /** Default form field */\n\n    this.defaultFormFields = [{\n      type: 'code',\n      required: true,\n      handleInputChange: event => this.handleCodeChange(event)\n    }];\n    /**\n     * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.\n     * by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing\n     * text for a label or adjust a placeholder, you can follow the structure below in order to do just that.\n     * ```\n     * [\n     *  {\n     *    type: string,\n     *    label: string,\n     *    placeholder: string,\n     *    hint: string | Functional Component | null,\n     *    required: boolean\n     *  }\n     * ]\n     * ```\n     */\n\n    this.formFields = this.defaultFormFields;\n    /** The MFA option to confirm with */\n\n    this.mfaOption = MfaOption.SMS;\n    /* Whether or not the confirm-sign-in component is loading */\n\n    this.loading = false;\n  }\n\n  componentWillLoad() {\n    this.setup();\n  }\n\n  userHandler() {\n    this.setup();\n  }\n\n  setup() {\n    if (this.user && this.user['challengeName'] === ChallengeName.SoftwareTokenMFA) {\n      this.mfaOption = MfaOption.TOTP; // If header text is using default use TOTP string\n\n      if (this.headerText === Translations.CONFIRM_SMS_CODE) {\n        this.headerText = Translations.CONFIRM_TOTP_CODE;\n      }\n    }\n\n    this.constructedFormFieldOptions = this.constructFormFieldOptions(this.formFields);\n  }\n\n  handleCodeChange(event) {\n    this.code = event.target.value;\n  }\n\n  confirm(event) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (event) {\n        event.preventDefault();\n      }\n\n      const mfaType = _this.user['challengeName'] === ChallengeName.SoftwareTokenMFA ? ChallengeName.SoftwareTokenMFA : null;\n\n      if (!Auth || typeof Auth.confirmSignIn !== 'function') {\n        throw new Error(NO_AUTH_MODULE_FOUND);\n      }\n\n      _this.loading = true;\n\n      try {\n        yield Auth.confirmSignIn(_this.user, _this.code, mfaType);\n        yield checkContact(_this.user, _this.handleAuthStateChange);\n      } catch (error) {\n        dispatchToastHubEvent(error);\n      } finally {\n        _this.loading = false;\n      }\n    })();\n  }\n\n  constructFormFieldOptions(formFields) {\n    const content = [];\n    if (formFields === undefined) return undefined;\n    if (formFields.length <= 0) return this.defaultFormFields;\n    formFields.forEach(formField => {\n      if (typeof formField === 'string' || formField.type !== 'code') {\n        // This is either a `string`, and/or a custom field that isn't `code`. Pass this directly.\n        content.push(formField);\n      } else {\n        // This is a code input field. Attach input handler.\n        content.push(Object.assign({\n          handleInputChange: event => this.handleCodeChange(event)\n        }, formField));\n      }\n    });\n    return content;\n  }\n\n  render() {\n    return h(Host, null, h(\"amplify-form-section\", {\n      headerText: I18n.get(this.headerText),\n      handleSubmit: this.handleSubmit,\n      submitButtonText: I18n.get(this.submitButtonText),\n      loading: this.loading,\n      secondaryFooterContent: h(\"span\", null, h(\"amplify-button\", {\n        variant: \"anchor\",\n        onClick: () => this.handleAuthStateChange(AuthState.SignIn)\n      }, I18n.get(Translations.BACK_TO_SIGN_IN)))\n    }, h(\"amplify-auth-fields\", {\n      formFields: this.constructedFormFieldOptions\n    })));\n  }\n\n  static get watchers() {\n    return {\n      \"user\": [\"userHandler\"]\n    };\n  }\n\n};\nconst AmplifyConfirmSignUp = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /** Fires when sign up form is submitted */\n\n    this.handleSubmit = event => this.confirmSignUp(event);\n    /** Used for header text in confirm sign up component */\n\n\n    this.headerText = Translations.CONFIRM_SIGN_UP_HEADER_TEXT;\n    /** Used for the submit button text in confirm sign up component */\n\n    this.submitButtonText = Translations.CONFIRM_SIGN_UP_SUBMIT_BUTTON_TEXT;\n    /**\n     * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.\n     * by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing\n     * text for a label or adjust a placeholder, you can follow the structure below in order to do just that.\n     * ```\n     * [\n     *  {\n     *    type: string,\n     *    label: string,\n     *    placeholder: string,\n     *    hint: string | Functional Component | null,\n     *    required: boolean\n     *  }\n     * ]\n     * ```\n     */\n\n    this.formFields = [];\n    /** Auth state change handler for this components\n     * e.g. SignIn -> 'Create Account' link -> SignUp\n     */\n\n    this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n    /** Username Alias is used to setup authentication with `username`, `email` or `phone_number`  */\n\n    this.usernameAlias = 'username';\n    this.loading = false;\n    this.newFormFields = [];\n    this.phoneNumber = {\n      countryDialCodeValue: COUNTRY_DIAL_CODE_DEFAULT,\n      phoneNumberValue: null\n    };\n  }\n\n  componentWillLoad() {\n    this.setup();\n  }\n\n  formFieldsHandler() {\n    this.buildFormFields();\n  }\n\n  userHandler() {\n    this.setup();\n  }\n\n  setup() {\n    // TODO: Use optional chaining instead\n    this.userInput = this.user && this.user.username;\n    this._signUpAttrs = this.user && this.user.signUpAttrs;\n    checkUsernameAlias(this.usernameAlias);\n    this.buildFormFields();\n  }\n\n  buildDefaultFormFields() {\n    this.newFormFields = [{\n      type: `${this.usernameAlias}`,\n      required: true,\n      handleInputChange: this.handleFormFieldInputChange(`${this.usernameAlias}`),\n      value: this.userInput,\n      disabled: this.userInput ? true : false,\n      inputProps: {\n        autocomplete: 'username'\n      }\n    }, {\n      type: 'code',\n      label: I18n.get(Translations.CONFIRM_SIGN_UP_CODE_LABEL),\n      placeholder: I18n.get(Translations.CONFIRM_SIGN_UP_CODE_PLACEHOLDER),\n      required: true,\n      hint: h(\"div\", null, I18n.get(Translations.CONFIRM_SIGN_UP_LOST_CODE), ' ', h(\"amplify-button\", {\n        variant: \"anchor\",\n        onClick: () => this.resendConfirmCode()\n      }, I18n.get(Translations.CONFIRM_SIGN_UP_RESEND_CODE))),\n      handleInputChange: this.handleFormFieldInputChange('code')\n    }];\n  }\n\n  buildFormFields() {\n    if (this.formFields.length === 0) {\n      this.buildDefaultFormFields();\n    } else {\n      const newFields = [];\n      this.formFields.forEach(field => {\n        const newField = Object.assign({}, field);\n\n        if (newField.type === 'code') {\n          newField['hint'] = isHintValid(newField) ? h(\"div\", null, I18n.get(Translations.CONFIRM_SIGN_UP_LOST_CODE), ' ', h(\"amplify-button\", {\n            variant: \"anchor\",\n            onClick: () => this.resendConfirmCode()\n          }, I18n.get(Translations.CONFIRM_SIGN_UP_RESEND_CODE))) : newField['hint'];\n        }\n\n        newField['handleInputChange'] = event => this.handleFormFieldInputWithCallback(event, field);\n\n        newFields.push(newField);\n      });\n      this.newFormFields = newFields;\n    }\n  }\n\n  handleFormFieldInputChange(fieldType) {\n    switch (fieldType) {\n      case 'username':\n      case 'email':\n        return event => this.userInput = event.target.value;\n\n      case 'phone_number':\n        return event => handlePhoneNumberChange(event, this.phoneNumber);\n\n      case 'code':\n        return event => this.code = event.target.value;\n\n      default:\n        return;\n    }\n  }\n\n  setFieldValue(field) {\n    switch (field.type) {\n      case 'username':\n      case 'email':\n        if (field.value === undefined) {\n          this.userInput = '';\n        } else {\n          this.userInput = field.value;\n        }\n\n        break;\n\n      case 'phone_number':\n        if (field.dialCode) {\n          this.phoneNumber.countryDialCodeValue = field.dialCode;\n        }\n\n        this.phoneNumber.phoneNumberValue = field.value;\n        break;\n    }\n  }\n\n  handleFormFieldInputWithCallback(event, field) {\n    const fnToCall = field['handleInputChange'] ? field['handleInputChange'] : (event, cb) => {\n      cb(event);\n    };\n    const callback = this.handleFormFieldInputChange(field.type);\n    fnToCall(event, callback.bind(this));\n  }\n  /**\n   * Returns the username of the user to confirm. If a valid `user.username` has been passed as a prop, we return that.\n   * Otherwise, we return the `userInput` on the form.\n   */\n\n\n  getUsername() {\n    if (this.user && this.user.username) return this.user.username;\n\n    switch (this.usernameAlias) {\n      case 'username':\n      case 'email':\n        return this.userInput;\n\n      case 'phone_number':\n        return composePhoneNumberInput(this.phoneNumber);\n    }\n  }\n\n  resendConfirmCode() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (event) {\n        event.preventDefault();\n      }\n\n      if (!Auth || typeof Auth.resendSignUp !== 'function') {\n        throw new Error(NO_AUTH_MODULE_FOUND);\n      }\n\n      try {\n        const username = _this2.getUsername();\n\n        if (!username) throw new Error(Translations.EMPTY_USERNAME);\n        yield Auth.resendSignUp(username.trim());\n      } catch (error) {\n        dispatchToastHubEvent(error);\n      }\n    })();\n  } // TODO: Add validation\n  // TODO: Prefix\n\n\n  confirmSignUp(event) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (event) {\n        event.preventDefault();\n      }\n\n      if (!Auth || typeof Auth.confirmSignUp !== 'function') {\n        throw new Error(NO_AUTH_MODULE_FOUND);\n      }\n\n      _this3.loading = true;\n\n      try {\n        let username = _this3.getUsername();\n\n        if (!username) throw new Error(Translations.EMPTY_USERNAME);\n        username = username.trim();\n        const confirmSignUpResult = yield Auth.confirmSignUp(username, _this3.code);\n\n        if (!confirmSignUpResult) {\n          throw new Error(I18n.get(Translations.CONFIRM_SIGN_UP_FAILED));\n        }\n\n        if (_this3._signUpAttrs && _this3._signUpAttrs.password && _this3._signUpAttrs.password !== '') {\n          // Auto sign in user if password is available from previous workflow\n          yield handleSignIn(username, _this3._signUpAttrs.password, _this3.handleAuthStateChange);\n        } else {\n          _this3.handleAuthStateChange(AuthState.SignIn);\n        }\n      } catch (error) {\n        dispatchToastHubEvent(error);\n      } finally {\n        _this3.loading = false;\n      }\n    })();\n  }\n\n  render() {\n    return h(Host, null, h(\"amplify-form-section\", {\n      headerText: I18n.get(this.headerText),\n      submitButtonText: I18n.get(this.submitButtonText),\n      handleSubmit: this.handleSubmit,\n      loading: this.loading,\n      secondaryFooterContent: h(\"div\", null, h(\"span\", null, h(\"amplify-button\", {\n        variant: \"anchor\",\n        onClick: () => this.handleAuthStateChange(AuthState.SignIn)\n      }, I18n.get(Translations.BACK_TO_SIGN_IN))))\n    }, h(\"amplify-auth-fields\", {\n      formFields: this.newFormFields\n    })));\n  }\n\n  static get watchers() {\n    return {\n      \"formFields\": [\"formFieldsHandler\"],\n      \"user\": [\"userHandler\"]\n    };\n  }\n\n};\nconst logger = new Logger('ForgotPassword');\nconst AmplifyForgotPassword = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /** The header text of the forgot password section */\n\n    this.headerText = Translations.RESET_YOUR_PASSWORD;\n    /** The text displayed inside of the send code button for the form */\n\n    this.sendButtonText = Translations.SEND_CODE;\n    /** The text displayed inside of the submit button for the form */\n\n    this.submitButtonText = Translations.SUBMIT;\n    /** The form fields displayed inside of the forgot password form */\n\n    this.formFields = [];\n    /** The function called when making a request to reset password */\n\n    this.handleSend = event => this.send(event);\n    /** The function called when submitting a new password */\n\n\n    this.handleSubmit = event => this.submit(event);\n    /** Auth state change handler for this component */\n\n\n    this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n    /** Username Alias is used to setup authentication with `username`, `email` or `phone_number`  */\n\n    this.usernameAlias = 'username';\n    this.delivery = null;\n    this.loading = false;\n    this.phoneNumber = {\n      countryDialCodeValue: COUNTRY_DIAL_CODE_DEFAULT,\n      phoneNumberValue: null\n    };\n    this.newFormFields = [];\n    this.forgotPasswordAttrs = {\n      userInput: '',\n      password: '',\n      code: ''\n    };\n  }\n\n  componentWillLoad() {\n    checkUsernameAlias(this.usernameAlias);\n    this.buildFormFields();\n  }\n\n  formFieldsHandler() {\n    this.buildFormFields();\n  }\n\n  buildFormFields() {\n    if (this.formFields.length === 0) {\n      this.buildDefaultFormFields();\n    } else {\n      const newFields = [];\n      this.formFields.forEach(field => {\n        const newField = Object.assign({}, field);\n\n        newField['handleInputChange'] = event => this.handleFormFieldInputWithCallback(event, field);\n\n        newFields.push(newField);\n      });\n      this.newFormFields = newFields;\n    }\n  }\n\n  buildDefaultFormFields() {\n    switch (this.usernameAlias) {\n      case 'email':\n        this.newFormFields = [{\n          type: 'email',\n          required: true,\n          handleInputChange: this.handleFormFieldInputChange('email'),\n          inputProps: {\n            'data-test': 'forgot-password-email-input'\n          }\n        }];\n        break;\n\n      case 'phone_number':\n        this.newFormFields = [{\n          type: 'phone_number',\n          required: true,\n          handleInputChange: this.handleFormFieldInputChange('phone_number'),\n          inputProps: {\n            'data-test': 'forgot-password-phone-number-input'\n          }\n        }];\n        break;\n\n      case 'username':\n      default:\n        this.newFormFields = [{\n          type: 'username',\n          required: true,\n          handleInputChange: this.handleFormFieldInputChange('username'),\n          inputProps: {\n            'data-test': 'forgot-password-username-input'\n          }\n        }];\n        break;\n    }\n  }\n\n  handleFormFieldInputChange(fieldType) {\n    switch (fieldType) {\n      case 'username':\n      case 'email':\n        return event => this.forgotPasswordAttrs.userInput = event.target.value;\n\n      case 'phone_number':\n        return event => handlePhoneNumberChange(event, this.phoneNumber);\n\n      case 'password':\n      case 'code':\n        return event => this.forgotPasswordAttrs[fieldType] = event.target.value;\n\n      default:\n        return;\n    }\n  }\n\n  setFieldValue(field, formAttributes) {\n    switch (field.type) {\n      case 'username':\n      case 'email':\n        if (field.value === undefined) {\n          formAttributes.userInput = '';\n        } else {\n          formAttributes.userInput = field.value;\n        }\n\n        break;\n\n      case 'phone_number':\n        if (field.dialCode) {\n          this.phoneNumber.countryDialCodeValue = field.dialCode;\n        }\n\n        this.phoneNumber.phoneNumberValue = field.value;\n        break;\n\n      case 'password':\n      case 'code':\n        if (field.value === undefined) {\n          formAttributes[field.type] = '';\n        } else {\n          formAttributes[field.type] = field.value;\n        }\n\n        break;\n    }\n  }\n\n  handleFormFieldInputWithCallback(event, field) {\n    const fnToCall = field['handleInputChange'] ? field['handleInputChange'] : (event, cb) => {\n      cb(event);\n    };\n    const callback = this.handleFormFieldInputChange(field.type);\n    fnToCall(event, callback.bind(this));\n  }\n\n  send(event) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (event) {\n        event.preventDefault();\n      }\n\n      if (!Auth || typeof Auth.forgotPassword !== 'function') {\n        throw new Error(NO_AUTH_MODULE_FOUND);\n      }\n\n      _this4.loading = true;\n\n      switch (_this4.usernameAlias) {\n        case 'phone_number':\n          try {\n            _this4.forgotPasswordAttrs.userInput = composePhoneNumberInput(_this4.phoneNumber);\n          } catch (error) {\n            dispatchToastHubEvent(error);\n          }\n\n          break;\n      }\n\n      try {\n        const data = yield Auth.forgotPassword(_this4.forgotPasswordAttrs.userInput.trim());\n        logger.debug(data);\n        _this4.newFormFields = [{\n          type: 'code',\n          required: true,\n          handleInputChange: _this4.handleFormFieldInputChange('code'),\n          inputProps: {\n            'data-test': 'forgot-password-code-input'\n          }\n        }, {\n          type: 'password',\n          required: true,\n          handleInputChange: _this4.handleFormFieldInputChange('password'),\n          label: I18n.get(Translations.NEW_PASSWORD_LABEL),\n          placeholder: I18n.get(Translations.NEW_PASSWORD_PLACEHOLDER)\n        }];\n        _this4.delivery = data.CodeDeliveryDetails;\n      } catch (error) {\n        dispatchToastHubEvent(error);\n      } finally {\n        _this4.loading = false;\n      }\n    })();\n  }\n\n  submit(event) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      if (event) {\n        event.preventDefault();\n      }\n\n      if (!Auth || typeof Auth.forgotPasswordSubmit !== 'function') {\n        throw new Error(NO_AUTH_MODULE_FOUND);\n      }\n\n      _this5.loading = true;\n\n      try {\n        const {\n          userInput,\n          code,\n          password\n        } = _this5.forgotPasswordAttrs;\n        const data = yield Auth.forgotPasswordSubmit(userInput.trim(), code, password);\n        logger.debug(data);\n\n        _this5.handleAuthStateChange(AuthState.SignIn);\n\n        _this5.delivery = null;\n      } catch (error) {\n        dispatchToastHubEvent(error);\n      } finally {\n        _this5.loading = false;\n      }\n    })();\n  }\n\n  render() {\n    const submitFn = this.delivery ? event => this.handleSubmit(event) : event => this.handleSend(event);\n    const submitButtonText = this.delivery ? this.submitButtonText : this.sendButtonText;\n    return h(Host, null, h(\"amplify-form-section\", {\n      headerText: I18n.get(this.headerText),\n      handleSubmit: submitFn,\n      loading: this.loading,\n      secondaryFooterContent: h(\"amplify-button\", {\n        variant: \"anchor\",\n        onClick: () => this.handleAuthStateChange(AuthState.SignIn),\n        \"data-test\": \"forgot-password-back-to-sign-in-link\"\n      }, I18n.get(Translations.BACK_TO_SIGN_IN)),\n      testDataPrefix: 'forgot-password',\n      submitButtonText: I18n.get(submitButtonText)\n    }, h(\"amplify-auth-fields\", {\n      formFields: this.newFormFields\n    })));\n  }\n\n  static get watchers() {\n    return {\n      \"formFields\": [\"formFieldsHandler\"]\n    };\n  }\n\n};\nconst logger$1 = new ConsoleLogger('amplify-require-new-password');\nconst AmplifyRequireNewPassword = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /** The header text of the forgot password section */\n\n    this.headerText = Translations.CHANGE_PASSWORD;\n    /** The text displayed inside of the submit button for the form */\n\n    this.submitButtonText = Translations.CHANGE_PASSWORD_ACTION;\n    /** The function called when submitting a new password */\n\n    this.handleSubmit = event => this.completeNewPassword(event);\n    /** Auth state change handler for this component */\n\n\n    this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n    /** The form fields displayed inside of the forgot password form */\n\n    this.formFields = [{\n      type: AuthFormField.Password,\n      required: true,\n      handleInputChange: event => this.handlePasswordChange(event),\n      label: I18n.get(Translations.NEW_PASSWORD_LABEL),\n      placeholder: I18n.get(Translations.NEW_PASSWORD_PLACEHOLDER),\n      inputProps: {\n        'data-test': 'require-new-password-password-input'\n      }\n    }];\n    this.loading = false;\n    this.requiredAttributes = {};\n    this.newFormFields = this.formFields;\n    this.phoneNumber = {\n      countryDialCodeValue: COUNTRY_DIAL_CODE_DEFAULT,\n      phoneNumberValue: ' '\n    };\n  }\n\n  userHandler() {\n    this.setCurrentUser();\n  }\n\n  handleRequiredAttributeInputChange(attribute, event) {\n    if (attribute === 'phone_number') {\n      this.formatPhoneNumber(event);\n    } else {\n      this.requiredAttributes[attribute] = event.target.value;\n    }\n  }\n\n  setCurrentUser() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this6.user) {\n        // Check for authenticated user\n        try {\n          const user = yield Auth.currentAuthenticatedUser();\n          if (user) _this6.currentUser = user;\n        } catch (error) {\n          dispatchToastHubEvent(error);\n        }\n      } else {\n        _this6.currentUser = _this6.user;\n      }\n\n      if (_this6.currentUser && _this6.currentUser.challengeParam && _this6.currentUser.challengeParam.requiredAttributes) {\n        const userRequiredAttributes = _this6.currentUser.challengeParam.requiredAttributes;\n        const requiredAttributesMap = getRequiredAttributesMap();\n        userRequiredAttributes.forEach(attribute => {\n          const formField = {\n            type: attribute,\n            required: true,\n            label: requiredAttributesMap[attribute].label,\n            placeholder: requiredAttributesMap[attribute].placeholder,\n            handleInputChange: event => _this6.handleRequiredAttributeInputChange(attribute, event),\n            inputProps: {\n              'data-test': `require-new-password-${attribute}-input`\n            }\n          };\n          _this6.newFormFields = [..._this6.newFormFields, formField];\n        });\n      }\n    })();\n  }\n\n  componentWillLoad() {\n    return this.setCurrentUser();\n  }\n\n  handlePasswordChange(event) {\n    this.password = event.target.value;\n  }\n\n  formatPhoneNumber(event) {\n    handlePhoneNumberChange(event, this.phoneNumber);\n    /**\n     * composePhoneNumberInput will throw an error if the phoneNumberValue it receives\n     * is empty. Adding a check here to try and make sure that doesn't happen...but will\n     * wrap it in a try/catch block just in case as well\n     */\n\n    try {\n      if (event.target.name === PHONE_SUFFIX && this.phoneNumber.phoneNumberValue) {\n        const composedInput = composePhoneNumberInput(this.phoneNumber);\n        this.requiredAttributes['phone_number'] = composedInput;\n      }\n    } catch (err) {\n      logger$1.error(`error in phone number field - ${err}`);\n    }\n  }\n\n  completeNewPassword(event) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      if (event) {\n        event.preventDefault();\n      }\n\n      if (!Auth || typeof Auth.completeNewPassword !== 'function') {\n        throw new Error(NO_AUTH_MODULE_FOUND);\n      }\n\n      _this7.loading = true;\n\n      try {\n        const user = yield Auth.completeNewPassword(_this7.currentUser, _this7.password, _this7.requiredAttributes);\n        logger$1.debug('complete new password', user);\n\n        switch (user.challengeName) {\n          case ChallengeName.SMSMFA:\n            _this7.handleAuthStateChange(AuthState.ConfirmSignIn, user);\n\n            break;\n\n          case ChallengeName.MFASetup:\n            logger$1.debug('TOTP setup', user.challengeParam);\n\n            _this7.handleAuthStateChange(AuthState.TOTPSetup, user);\n\n            break;\n\n          default:\n            yield checkContact(user, _this7.handleAuthStateChange);\n        }\n      } catch (error) {\n        dispatchToastHubEvent(error);\n      } finally {\n        _this7.loading = false;\n      }\n    })();\n  }\n\n  render() {\n    return h(Host, null, h(\"amplify-form-section\", {\n      headerText: I18n.get(this.headerText),\n      handleSubmit: this.handleSubmit,\n      loading: this.loading,\n      secondaryFooterContent: h(\"amplify-button\", {\n        variant: \"anchor\",\n        onClick: () => this.handleAuthStateChange(AuthState.SignIn)\n      }, I18n.get(Translations.BACK_TO_SIGN_IN)),\n      submitButtonText: I18n.get(this.submitButtonText)\n    }, h(\"amplify-auth-fields\", {\n      formFields: this.newFormFields\n    })));\n  }\n\n  static get watchers() {\n    return {\n      \"user\": [\"userHandler\"]\n    };\n  }\n\n};\nconst amplifySignInCss = \":host{--footer-size:var(--amplify-text-sm);--footer-color:var(--amplify-grey);--footer-font-family:var(--amplify-font-family);--font-weight:var(--amplify-font-weight)}.sign-in-form-footer{font-family:var(--footer-font-family);font-size:var(--footer-size);color:var(--footer-color);font-weight:--font-weight;display:-ms-flexbox;display:flex;-ms-flex-direction:column-reverse;flex-direction:column-reverse;-ms-flex-align:center;align-items:center;-ms-flex-pack:distribute;justify-content:space-around}.sign-in-form-footer amplify-button{margin-bottom:0.625rem}@media (min-width: 672px){.sign-in-form-footer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:baseline;align-items:baseline}.sign-in-form-footer amplify-button{margin-bottom:0}}.sign-in-form-footer *+*{margin-bottom:15px}.full-width-footer-content{width:100%}\";\nconst AmplifySignIn = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /** Fires when sign in form is submitted */\n\n    this.handleSubmit = event => this.signIn(event);\n    /** Used for header text in sign in component */\n\n\n    this.headerText = Translations.SIGN_IN_HEADER_TEXT;\n    /** Used for the submit button text in sign in component */\n\n    this.submitButtonText = Translations.SIGN_IN_ACTION;\n    /** Auth state change handler for this component */\n    // prettier-ignore\n\n    this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n    /** Username Alias is used to setup authentication with `username`, `email` or `phone_number`  */\n\n    this.usernameAlias = 'username';\n    /**\n     * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.\n     * by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing\n     * text for a label or adjust a placeholder, you can follow the structure below in order to do just that.\n     * ```\n     * [\n     *  {\n     *    type: string,\n     *    label: string,\n     *    placeholder: string,\n     *    hint: string | Functional Component | null,\n     *    required: boolean\n     *  }\n     * ]\n     * ```\n     */\n\n    this.formFields = [];\n    /** Hides the sign up link */\n\n    this.hideSignUp = false;\n    this.newFormFields = [];\n    /* Whether or not the sign-in component is loading */\n\n    this.loading = false;\n    this.phoneNumber = {\n      countryDialCodeValue: COUNTRY_DIAL_CODE_DEFAULT,\n      phoneNumberValue: null\n    };\n    this.signInAttributes = {\n      userInput: '',\n      password: ''\n    };\n  }\n\n  componentWillLoad() {\n    checkUsernameAlias(this.usernameAlias);\n    this.buildFormFields();\n  }\n\n  formFieldsHandler() {\n    this.buildFormFields();\n  }\n\n  handleFormFieldInputChange(fieldType) {\n    switch (fieldType) {\n      case 'username':\n      case 'email':\n        return event => this.signInAttributes.userInput = event.target.value;\n\n      case 'phone_number':\n        return event => handlePhoneNumberChange(event, this.phoneNumber);\n\n      case 'password':\n        return event => this.signInAttributes.password = event.target.value;\n\n      default:\n        return () => {};\n    }\n  }\n\n  handleFormFieldInputWithCallback(event, field) {\n    const fnToCall = field['handleInputChange'] ? field['handleInputChange'] : (event, cb) => {\n      cb(event);\n    };\n    const callback = this.handleFormFieldInputChange(field.type);\n    fnToCall(event, callback.bind(this));\n  }\n\n  signIn(event) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      // avoid submitting the form\n      if (event) {\n        event.preventDefault();\n      }\n\n      _this8.loading = true;\n\n      switch (_this8.usernameAlias) {\n        case 'phone_number':\n          try {\n            _this8.signInAttributes.userInput = composePhoneNumberInput(_this8.phoneNumber);\n          } catch (error) {\n            dispatchToastHubEvent(error);\n          }\n\n      }\n\n      const username = _this8.signInAttributes.userInput.trim();\n\n      yield handleSignIn(username, _this8.signInAttributes.password, _this8.handleAuthStateChange, _this8.usernameAlias);\n      _this8.loading = false;\n    })();\n  }\n\n  buildDefaultFormFields() {\n    const formFieldInputs = [];\n\n    switch (this.usernameAlias) {\n      case 'email':\n        formFieldInputs.push({\n          type: 'email',\n          required: true,\n          handleInputChange: this.handleFormFieldInputChange('email'),\n          inputProps: {\n            'data-test': 'sign-in-email-input',\n            autocomplete: 'username'\n          }\n        });\n        break;\n\n      case 'phone_number':\n        formFieldInputs.push({\n          type: 'phone_number',\n          required: true,\n          handleInputChange: this.handleFormFieldInputChange('phone_number'),\n          inputProps: {\n            'data-test': 'sign-in-phone-number-input',\n            autocomplete: 'username'\n          }\n        });\n        break;\n\n      case 'username':\n      default:\n        formFieldInputs.push({\n          type: 'username',\n          required: true,\n          handleInputChange: this.handleFormFieldInputChange('username'),\n          inputProps: {\n            'data-test': 'sign-in-username-input',\n            autocomplete: 'username'\n          }\n        });\n        break;\n    }\n\n    formFieldInputs.push({\n      type: 'password',\n      hint: h(\"div\", null, I18n.get(Translations.FORGOT_PASSWORD_TEXT), ' ', h(\"amplify-button\", {\n        variant: \"anchor\",\n        onClick: () => this.handleAuthStateChange(AuthState.ForgotPassword),\n        \"data-test\": \"sign-in-forgot-password-link\"\n      }, I18n.get(Translations.RESET_PASSWORD_TEXT))),\n      required: true,\n      handleInputChange: this.handleFormFieldInputChange('password'),\n      inputProps: {\n        'data-test': 'sign-in-password-input'\n      }\n    });\n    this.newFormFields = [...formFieldInputs];\n  }\n\n  buildFormFields() {\n    if (this.formFields.length === 0) {\n      this.buildDefaultFormFields();\n    } else {\n      const newFields = [];\n      this.formFields.forEach(field => {\n        const newField = Object.assign({}, field); // TODO: handle hint better\n\n        if (newField.type === 'password') {\n          newField['hint'] = isHintValid(newField) ? h(\"div\", null, I18n.get(Translations.FORGOT_PASSWORD_TEXT), ' ', h(\"amplify-button\", {\n            variant: \"anchor\",\n            onClick: () => this.handleAuthStateChange(AuthState.ForgotPassword),\n            \"data-test\": \"sign-in-forgot-password-link\"\n          }, I18n.get(Translations.RESET_PASSWORD_TEXT))) : newField['hint'];\n        }\n\n        newField['handleInputChange'] = event => this.handleFormFieldInputWithCallback(event, field);\n\n        this.setFieldValue(newField, this.signInAttributes);\n        newFields.push(newField);\n      });\n      this.newFormFields = newFields;\n    }\n  }\n\n  setFieldValue(field, formAttributes) {\n    switch (field.type) {\n      case 'username':\n      case 'email':\n        if (field.value === undefined) {\n          formAttributes.userInput = '';\n        } else {\n          formAttributes.userInput = field.value;\n        }\n\n        break;\n\n      case 'phone_number':\n        if (field.dialCode) {\n          this.phoneNumber.countryDialCodeValue = field.dialCode;\n        }\n\n        this.phoneNumber.phoneNumberValue = field.value;\n        break;\n\n      case 'password':\n        if (field.value === undefined) {\n          formAttributes.password = '';\n        } else {\n          formAttributes.password = field.value;\n        }\n\n        break;\n    }\n  }\n\n  render() {\n    return h(Host, null, h(\"amplify-form-section\", {\n      headerText: I18n.get(this.headerText),\n      handleSubmit: this.handleSubmit,\n      testDataPrefix: 'sign-in'\n    }, h(\"div\", {\n      slot: \"subtitle\"\n    }, h(\"slot\", {\n      name: \"header-subtitle\"\n    })), h(\"slot\", {\n      name: \"federated-buttons\"\n    }, h(\"amplify-federated-buttons\", {\n      handleAuthStateChange: this.handleAuthStateChange,\n      federated: this.federated\n    })), !isEmpty(this.federated) && h(\"amplify-strike\", null, \"or\"), h(\"amplify-auth-fields\", {\n      formFields: this.newFormFields\n    }), h(\"div\", {\n      slot: \"amplify-form-section-footer\",\n      class: \"sign-in-form-footer\"\n    }, h(\"slot\", {\n      name: \"footer\"\n    }, !this.hideSignUp && h(\"slot\", {\n      name: \"secondary-footer-content\"\n    }, h(\"span\", null, I18n.get(Translations.NO_ACCOUNT_TEXT), ' ', h(\"amplify-button\", {\n      variant: \"anchor\",\n      onClick: () => this.handleAuthStateChange(AuthState.SignUp),\n      \"data-test\": \"sign-in-create-account-link\"\n    }, I18n.get(Translations.CREATE_ACCOUNT_TEXT)))), h(\"div\", {\n      class: this.hideSignUp ? 'full-width-footer-content' : ''\n    }, h(\"slot\", {\n      name: \"primary-footer-content\"\n    }, h(\"amplify-button\", {\n      type: \"submit\",\n      disabled: this.loading,\n      \"data-test\": \"sign-in-sign-in-button\"\n    }, this.loading ? h(\"amplify-loading-spinner\", null) : h(\"span\", null, I18n.get(this.submitButtonText)))))))));\n  }\n\n  static get watchers() {\n    return {\n      \"formFields\": [\"formFieldsHandler\"]\n    };\n  }\n\n};\nAmplifySignIn.style = amplifySignInCss;\nconst amplifySignUpCss = \"amplify-sign-up{--footer-font-family:var(--amplify-font-family);--footer-font-size:var(--amplify-text-sm);--footer-color:var(--amplify-grey);--font-weight:var(--amplify-font-weight)}.sign-up-form-footer{font-family:var(--footer-font-family);font-size:var(--footer-font-size);color:var(--footer-color);font-weight:--font-weight;display:-ms-flexbox;display:flex;-ms-flex-direction:column-reverse;flex-direction:column-reverse;-ms-flex-align:center;align-items:center;-ms-flex-pack:distribute;justify-content:space-around}.sign-up-form-footer amplify-button{margin-bottom:0.625rem}@media (min-width: 672px){.sign-up-form-footer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:baseline;align-items:baseline}.sign-up-form-footer amplify-button{margin-bottom:0}}.sign-up-form-footer *+*{margin-bottom:15px}\";\nconst AmplifySignUp = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /** Fires when sign up form is submitted */\n\n    this.handleSubmit = event => this.signUp(event);\n    /** Override for handling the Auth.SignUp API call */\n\n\n    this.handleSignUp = params => this.authSignUp(params);\n    /** Used for header text in sign up component */\n\n\n    this.headerText = Translations.SIGN_UP_HEADER_TEXT;\n    /** Used for the submit button text in sign up component */\n\n    this.submitButtonText = Translations.SIGN_UP_SUBMIT_BUTTON_TEXT;\n    /** Used for the submit button text in sign up component */\n\n    this.haveAccountText = Translations.SIGN_UP_HAVE_ACCOUNT_TEXT;\n    /** Text used for the sign in hyperlink */\n\n    this.signInText = Translations.SIGN_IN_TEXT;\n    /**\n     * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.\n     * by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing\n     * text for a label or adjust a placeholder, you can follow the structure below in order to do just that.\n     * ```\n     * [\n     *  {\n     *    type: string,\n     *    label: string,\n     *    placeholder: string,\n     *    hint: string | Functional Component | null,\n     *    required: boolean\n     *  }\n     * ]\n     * ```\n     */\n\n    this.formFields = [];\n    /** Auth state change handler for this component\n     * e.g. SignIn -> 'Create Account' link -> SignUp\n     */\n    // prettier-ignore\n\n    this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n    /** Username Alias is used to setup authentication with `username`, `email` or `phone_number`  */\n\n    this.usernameAlias = 'username'; // private userInput: string | PhoneNumberInterface;\n\n    this.newFormFields = [];\n    this.phoneNumber = {\n      countryDialCodeValue: COUNTRY_DIAL_CODE_DEFAULT,\n      phoneNumberValue: null\n    };\n    this.loading = false;\n    this.signUpAttributes = {\n      username: '',\n      password: '',\n      attributes: {}\n    };\n  }\n\n  handleFormFieldInputChange(fieldType) {\n    switch (fieldType) {\n      case 'username':\n        return event => this.signUpAttributes.username = event.target.value;\n\n      case 'password':\n        return event => this.signUpAttributes.password = event.target.value;\n\n      case 'email':\n        return event => this.signUpAttributes.attributes.email = event.target.value;\n\n      case 'phone_number':\n        return event => handlePhoneNumberChange(event, this.phoneNumber);\n\n      default:\n        return event => this.signUpAttributes.attributes[fieldType] = event.target.value;\n    }\n  }\n\n  handleFormFieldInputWithCallback(event, field) {\n    const fnToCall = field['handleInputChange'] ? field['handleInputChange'] : (event, cb) => {\n      cb(event);\n    };\n    const callback = this.handleFormFieldInputChange(field.type);\n    fnToCall(event, callback.bind(this));\n  }\n\n  authSignUp(params) {\n    return _asyncToGenerator(function* () {\n      const data = yield Auth.signUp(params);\n\n      if (!data) {\n        throw new Error(Translations.SIGN_UP_FAILED);\n      }\n\n      return data;\n    })();\n  }\n\n  assignPhoneNumberToSignUpAttributes() {\n    if (this.phoneNumber.phoneNumberValue) {\n      try {\n        this.signUpAttributes.attributes.phone_number = composePhoneNumberInput(this.phoneNumber);\n      } catch (error) {\n        dispatchToastHubEvent(error);\n      }\n    }\n  }\n\n  assignUserNameAliasToSignUpAttributes() {\n    switch (this.usernameAlias) {\n      case 'email':\n      case 'phone_number':\n        this.signUpAttributes.username = this.signUpAttributes.attributes[this.usernameAlias];\n        break;\n    }\n  }\n\n  assignFormInputToSignUpAttributes() {\n    this.assignPhoneNumberToSignUpAttributes();\n    this.assignUserNameAliasToSignUpAttributes();\n  }\n\n  validateSignUpAttributes() {\n    if (!this.signUpAttributes.username) {\n      if (this.usernameAlias === UsernameAlias.email) {\n        throw new Error(Translations.EMPTY_EMAIL);\n      } else if (this.usernameAlias === UsernameAlias.phone_number) {\n        throw new Error(Translations.EMPTY_PHONE);\n      } else {\n        throw new Error(Translations.EMPTY_USERNAME);\n      }\n    }\n\n    if (this.signUpAttributes.username.indexOf(' ') >= 0) {\n      throw new Error(Translations.USERNAME_REMOVE_WHITESPACE);\n    }\n\n    if (this.signUpAttributes.password !== this.signUpAttributes.password.trim()) {\n      throw new Error(Translations.PASSWORD_REMOVE_WHITESPACE);\n    }\n  } // TODO: Add validation\n  // TODO: Prefix\n\n\n  signUp(event) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      if (event) {\n        event.preventDefault();\n      }\n\n      if (!Auth || typeof Auth.signUp !== 'function') {\n        throw new Error(NO_AUTH_MODULE_FOUND);\n      }\n\n      _this9.loading = true;\n\n      _this9.assignFormInputToSignUpAttributes();\n\n      try {\n        _this9.validateSignUpAttributes();\n\n        const data = yield _this9.handleSignUp(_this9.signUpAttributes);\n\n        if (data.userConfirmed) {\n          yield handleSignIn(_this9.signUpAttributes.username, _this9.signUpAttributes.password, _this9.handleAuthStateChange);\n        } else {\n          const signUpAttrs = Object.assign({}, _this9.signUpAttributes);\n\n          _this9.handleAuthStateChange(AuthState.ConfirmSignUp, Object.assign(Object.assign({}, data.user), {\n            signUpAttrs\n          }));\n        }\n      } catch (error) {\n        dispatchToastHubEvent(error);\n      } finally {\n        _this9.loading = false;\n      }\n    })();\n  }\n\n  buildDefaultFormFields() {\n    switch (this.usernameAlias) {\n      case 'email':\n        this.newFormFields = [{\n          type: 'email',\n          placeholder: I18n.get(Translations.SIGN_UP_EMAIL_PLACEHOLDER),\n          required: true,\n          handleInputChange: this.handleFormFieldInputChange('email'),\n          inputProps: {\n            'data-test': 'sign-up-email-input',\n            autocomplete: 'username'\n          }\n        }, {\n          type: 'password',\n          placeholder: I18n.get(Translations.SIGN_UP_PASSWORD_PLACEHOLDER),\n          required: true,\n          handleInputChange: this.handleFormFieldInputChange('password'),\n          inputProps: {\n            'data-test': 'sign-up-password-input',\n            autocomplete: 'new-password'\n          }\n        }, {\n          type: 'phone_number',\n          required: true,\n          handleInputChange: this.handleFormFieldInputChange('phone_number'),\n          inputProps: {\n            'data-test': 'sign-up-phone-number-input',\n            autocomplete: 'tel-national'\n          }\n        }];\n        break;\n\n      case 'phone_number':\n        this.newFormFields = [{\n          type: 'phone_number',\n          required: true,\n          handleInputChange: this.handleFormFieldInputChange('phone_number'),\n          inputProps: {\n            'data-test': 'sign-up-phone-number-input',\n            autocomplete: 'username'\n          }\n        }, {\n          type: 'password',\n          placeholder: I18n.get(Translations.SIGN_UP_PASSWORD_PLACEHOLDER),\n          required: true,\n          handleInputChange: this.handleFormFieldInputChange('password'),\n          inputProps: {\n            'data-test': 'sign-up-password-input',\n            autocomplete: 'new-password'\n          }\n        }, {\n          type: 'email',\n          placeholder: I18n.get(Translations.SIGN_UP_EMAIL_PLACEHOLDER),\n          required: true,\n          handleInputChange: this.handleFormFieldInputChange('email'),\n          inputProps: {\n            'data-test': 'sign-up-email-input',\n            autocomplete: 'email'\n          }\n        }];\n        break;\n\n      case 'username':\n      default:\n        this.newFormFields = [{\n          type: 'username',\n          placeholder: I18n.get(Translations.SIGN_UP_USERNAME_PLACEHOLDER),\n          required: true,\n          handleInputChange: this.handleFormFieldInputChange('username'),\n          inputProps: {\n            'data-test': 'sign-up-username-input',\n            autocomplete: 'username'\n          }\n        }, {\n          type: 'password',\n          placeholder: I18n.get(Translations.SIGN_UP_PASSWORD_PLACEHOLDER),\n          required: true,\n          handleInputChange: this.handleFormFieldInputChange('password'),\n          inputProps: {\n            'data-test': 'sign-up-password-input',\n            autocomplete: 'new-password'\n          }\n        }, {\n          type: 'email',\n          placeholder: I18n.get(Translations.SIGN_UP_EMAIL_PLACEHOLDER),\n          required: true,\n          handleInputChange: this.handleFormFieldInputChange('email'),\n          inputProps: {\n            'data-test': 'sign-up-email-input'\n          }\n        }, {\n          type: 'phone_number',\n          required: true,\n          handleInputChange: this.handleFormFieldInputChange('phone_number'),\n          inputProps: {\n            'data-test': 'sign-up-phone-number-input'\n          }\n        }];\n        break;\n    }\n  }\n\n  buildFormFields() {\n    if (this.formFields.length === 0) {\n      this.buildDefaultFormFields();\n    } else {\n      const newFields = [];\n      this.formFields.forEach(field => {\n        const newField = Object.assign({}, field);\n\n        newField['handleInputChange'] = event => this.handleFormFieldInputWithCallback(event, field);\n\n        this.setFieldValue(field, this.signUpAttributes);\n        newFields.push(newField);\n      });\n      this.newFormFields = newFields;\n    }\n  }\n\n  setFieldValue(field, formAttributes) {\n    switch (field.type) {\n      case 'username':\n        if (field.value === undefined) {\n          formAttributes.username = '';\n        } else {\n          formAttributes.username = field.value;\n        }\n\n        break;\n\n      case 'password':\n        if (field.value === undefined) {\n          formAttributes.password = '';\n        } else {\n          formAttributes.password = field.value;\n        }\n\n        break;\n\n      case 'email':\n        formAttributes.attributes.email = field.value;\n        break;\n\n      case 'phone_number':\n        if (field.dialCode) {\n          this.phoneNumber.countryDialCodeValue = field.dialCode;\n        }\n\n        this.phoneNumber.phoneNumberValue = field.value;\n        break;\n\n      default:\n        formAttributes.attributes[field.type] = field.value;\n        break;\n    }\n  }\n\n  componentWillLoad() {\n    checkUsernameAlias(this.usernameAlias);\n    this.buildFormFields();\n  }\n\n  formFieldsHandler() {\n    this.buildFormFields();\n  }\n\n  render() {\n    return h(Host, null, h(\"amplify-form-section\", {\n      headerText: I18n.get(this.headerText),\n      handleSubmit: this.handleSubmit,\n      testDataPrefix: 'sign-up'\n    }, h(\"div\", {\n      slot: \"subtitle\"\n    }, h(\"slot\", {\n      name: \"header-subtitle\"\n    })), h(\"amplify-auth-fields\", {\n      formFields: this.newFormFields\n    }), h(\"div\", {\n      class: \"sign-up-form-footer\",\n      slot: \"amplify-form-section-footer\"\n    }, h(\"slot\", {\n      name: \"footer\"\n    }, h(\"slot\", {\n      name: \"secondary-footer-content\"\n    }, h(\"span\", null, I18n.get(this.haveAccountText), ' ', h(\"amplify-button\", {\n      variant: \"anchor\",\n      onClick: () => this.handleAuthStateChange(AuthState.SignIn),\n      \"data-test\": \"sign-up-sign-in-link\"\n    }, I18n.get(this.signInText)))), h(\"slot\", {\n      name: \"primary-footer-content\"\n    }, h(\"amplify-button\", {\n      type: \"submit\",\n      \"data-test\": \"sign-up-create-account-button\",\n      disabled: this.loading\n    }, this.loading ? h(\"amplify-loading-spinner\", null) : h(\"span\", null, I18n.get(this.submitButtonText))))))));\n  }\n\n  static get watchers() {\n    return {\n      \"formFields\": [\"formFieldsHandler\"]\n    };\n  }\n\n};\nAmplifySignUp.style = amplifySignUpCss;\nconst logger$2 = new Logger('AmplifyVerifyContact');\nconst AmplifyVerifyContact = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /** Authentication state handler */\n\n    this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n    this.loading = false;\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.verifyAttr ? this.submit(this.code) : this.verify(this.contact);\n  }\n\n  submit(code) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      const attr = _this10.verifyAttr;\n\n      if (!Auth || typeof Auth.verifyCurrentUserAttributeSubmit !== 'function') {\n        throw new Error(NO_AUTH_MODULE_FOUND);\n      }\n\n      _this10.loading = true;\n\n      try {\n        const data = yield Auth.verifyCurrentUserAttributeSubmit(attr, code);\n        logger$2.debug(data);\n\n        _this10.handleAuthStateChange(AuthState.SignedIn, _this10.user);\n\n        _this10.verifyAttr = null;\n      } catch (error) {\n        dispatchToastHubEvent(error);\n        logger$2.error(error);\n      } finally {\n        _this10.loading = false;\n      }\n    })();\n  }\n\n  verify(contact) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!contact) {\n        logger$2.error('Neither Email nor Phone Number selected');\n        return;\n      }\n\n      if (!Auth || typeof Auth.verifyCurrentUserAttribute !== 'function') {\n        throw new Error(NO_AUTH_MODULE_FOUND);\n      }\n\n      _this11.loading = true;\n\n      try {\n        const data = yield Auth.verifyCurrentUserAttribute(contact);\n        logger$2.debug(data);\n        _this11.verifyAttr = contact;\n      } catch (error) {\n        dispatchToastHubEvent(error);\n        logger$2.error(error);\n      } finally {\n        _this11.loading = false;\n      }\n    })();\n  }\n\n  handleInputChange(event) {\n    const inputName = event.target.name;\n\n    if (inputName === 'code') {\n      this.code = event.target.value;\n    } else if (inputName === 'contact') {\n      this.contact = event.target.value;\n    }\n  }\n\n  renderSubmit() {\n    return h(\"div\", null, h(\"amplify-input\", {\n      inputProps: {\n        autocomplete: 'off',\n        'data-test': 'verify-contact-code-input'\n      },\n      name: \"code\",\n      placeholder: I18n.get(Translations.CODE_PLACEHOLDER),\n      handleInputChange: event => this.handleInputChange(event)\n    }));\n  }\n\n  renderVerify() {\n    const user = this.user;\n\n    if (!user) {\n      logger$2.debug('No user to verify');\n      return null;\n    }\n\n    const {\n      unverified\n    } = user;\n\n    if (!unverified) {\n      logger$2.debug('Unverified variable does not exist on user');\n      return null;\n    }\n\n    const {\n      email,\n      phone_number\n    } = unverified;\n    return h(\"div\", null, email && h(\"amplify-radio-button\", {\n      label: I18n.get(Translations.VERIFY_CONTACT_EMAIL_LABEL),\n      key: \"email\",\n      name: \"contact\",\n      value: \"email\",\n      handleInputChange: event => this.handleInputChange(event),\n      inputProps: {\n        'data-test': 'verify-contact-email-radio'\n      }\n    }), phone_number && h(\"amplify-radio-button\", {\n      label: I18n.get(Translations.VERIFY_CONTACT_PHONE_LABEL),\n      key: \"phone_number\",\n      name: \"contact\",\n      value: \"phone_number\",\n      handleInputChange: event => this.handleInputChange(event),\n      inputProps: {\n        'data-test': 'verify-contact-phone-number-radio'\n      }\n    }));\n  }\n\n  render() {\n    return h(Host, null, h(\"amplify-form-section\", {\n      handleSubmit: event => this.handleSubmit(event),\n      headerText: I18n.get(Translations.VERIFY_CONTACT_HEADER_TEXT),\n      loading: this.loading,\n      secondaryFooterContent: h(\"span\", null, h(\"amplify-button\", {\n        variant: \"anchor\",\n        onClick: () => this.handleAuthStateChange(AuthState.SignedIn, this.user),\n        \"data-test\": \"verify-contact-skip-link\"\n      }, \"Skip\")),\n      submitButtonText: this.verifyAttr ? I18n.get(Translations.VERIFY_CONTACT_SUBMIT_LABEL) : I18n.get(Translations.VERIFY_CONTACT_VERIFY_LABEL)\n    }, this.verifyAttr ? this.renderSubmit() : this.renderVerify()));\n  }\n\n};\nexport { AmplifyConfirmSignIn as amplify_confirm_sign_in, AmplifyConfirmSignUp as amplify_confirm_sign_up, AmplifyForgotPassword as amplify_forgot_password, AmplifyRequireNewPassword as amplify_require_new_password, AmplifySignIn as amplify_sign_in, AmplifySignUp as amplify_sign_up, AmplifyVerifyContact as amplify_verify_contact };","map":{"version":3,"sources":["C:/Users/eriki/Documents/GitHub/amplify-app/node_modules/@aws-amplify/ui-components/dist/esm/amplify-confirm-sign-in_7.entry.js"],"names":["r","registerInstance","h","H","Host","I18n","Logger","ConsoleLogger","isEmpty","M","MfaOption","C","ChallengeName","A","AuthState","a","AuthFormField","U","UsernameAlias","Auth","T","Translations","N","NO_AUTH_MODULE_FOUND","g","COUNTRY_DIAL_CODE_DEFAULT","b","PHONE_SUFFIX","d","dispatchAuthStateChangeEvent","dispatchToastHubEvent","c","checkUsernameAlias","i","isHintValid","handlePhoneNumberChange","composePhoneNumberInput","getRequiredAttributesMap","checkContact","handleSignIn","AmplifyConfirmSignIn","constructor","hostRef","handleSubmit","event","confirm","headerText","CONFIRM_SMS_CODE","submitButtonText","CONFIRM","handleAuthStateChange","defaultFormFields","type","required","handleInputChange","handleCodeChange","formFields","mfaOption","SMS","loading","componentWillLoad","setup","userHandler","user","SoftwareTokenMFA","TOTP","CONFIRM_TOTP_CODE","constructedFormFieldOptions","constructFormFieldOptions","code","target","value","preventDefault","mfaType","confirmSignIn","Error","error","content","undefined","length","forEach","formField","push","Object","assign","render","get","secondaryFooterContent","variant","onClick","SignIn","BACK_TO_SIGN_IN","watchers","AmplifyConfirmSignUp","confirmSignUp","CONFIRM_SIGN_UP_HEADER_TEXT","CONFIRM_SIGN_UP_SUBMIT_BUTTON_TEXT","usernameAlias","newFormFields","phoneNumber","countryDialCodeValue","phoneNumberValue","formFieldsHandler","buildFormFields","userInput","username","_signUpAttrs","signUpAttrs","buildDefaultFormFields","handleFormFieldInputChange","disabled","inputProps","autocomplete","label","CONFIRM_SIGN_UP_CODE_LABEL","placeholder","CONFIRM_SIGN_UP_CODE_PLACEHOLDER","hint","CONFIRM_SIGN_UP_LOST_CODE","resendConfirmCode","CONFIRM_SIGN_UP_RESEND_CODE","newFields","field","newField","handleFormFieldInputWithCallback","fieldType","setFieldValue","dialCode","fnToCall","cb","callback","bind","getUsername","resendSignUp","EMPTY_USERNAME","trim","confirmSignUpResult","CONFIRM_SIGN_UP_FAILED","password","logger","AmplifyForgotPassword","RESET_YOUR_PASSWORD","sendButtonText","SEND_CODE","SUBMIT","handleSend","send","submit","delivery","forgotPasswordAttrs","formAttributes","forgotPassword","data","debug","NEW_PASSWORD_LABEL","NEW_PASSWORD_PLACEHOLDER","CodeDeliveryDetails","forgotPasswordSubmit","submitFn","testDataPrefix","logger$1","AmplifyRequireNewPassword","CHANGE_PASSWORD","CHANGE_PASSWORD_ACTION","completeNewPassword","Password","handlePasswordChange","requiredAttributes","setCurrentUser","handleRequiredAttributeInputChange","attribute","formatPhoneNumber","currentAuthenticatedUser","currentUser","challengeParam","userRequiredAttributes","requiredAttributesMap","name","composedInput","err","challengeName","SMSMFA","ConfirmSignIn","MFASetup","TOTPSetup","amplifySignInCss","AmplifySignIn","signIn","SIGN_IN_HEADER_TEXT","SIGN_IN_ACTION","hideSignUp","signInAttributes","formFieldInputs","FORGOT_PASSWORD_TEXT","ForgotPassword","RESET_PASSWORD_TEXT","slot","federated","class","NO_ACCOUNT_TEXT","SignUp","CREATE_ACCOUNT_TEXT","style","amplifySignUpCss","AmplifySignUp","signUp","handleSignUp","params","authSignUp","SIGN_UP_HEADER_TEXT","SIGN_UP_SUBMIT_BUTTON_TEXT","haveAccountText","SIGN_UP_HAVE_ACCOUNT_TEXT","signInText","SIGN_IN_TEXT","signUpAttributes","attributes","email","SIGN_UP_FAILED","assignPhoneNumberToSignUpAttributes","phone_number","assignUserNameAliasToSignUpAttributes","assignFormInputToSignUpAttributes","validateSignUpAttributes","EMPTY_EMAIL","EMPTY_PHONE","indexOf","USERNAME_REMOVE_WHITESPACE","PASSWORD_REMOVE_WHITESPACE","userConfirmed","ConfirmSignUp","SIGN_UP_EMAIL_PLACEHOLDER","SIGN_UP_PASSWORD_PLACEHOLDER","SIGN_UP_USERNAME_PLACEHOLDER","logger$2","AmplifyVerifyContact","verifyAttr","verify","contact","attr","verifyCurrentUserAttributeSubmit","SignedIn","verifyCurrentUserAttribute","inputName","renderSubmit","CODE_PLACEHOLDER","renderVerify","unverified","VERIFY_CONTACT_EMAIL_LABEL","key","VERIFY_CONTACT_PHONE_LABEL","VERIFY_CONTACT_HEADER_TEXT","VERIFY_CONTACT_SUBMIT_LABEL","VERIFY_CONTACT_VERIFY_LABEL","amplify_confirm_sign_in","amplify_confirm_sign_up","amplify_forgot_password","amplify_require_new_password","amplify_sign_in","amplify_sign_up","amplify_verify_contact"],"mappings":";AAAA,SAASA,CAAC,IAAIC,gBAAd,EAAgCC,CAAhC,EAAmCC,CAAC,IAAIC,IAAxC,QAAoD,qBAApD;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,aAAvB,EAAsCC,OAAtC,QAAqD,mBAArD;AACA,SAASC,CAAC,IAAIC,SAAd,EAAyBC,CAAC,IAAIC,aAA9B,EAA6CC,CAAC,IAAIC,SAAlD,EAA6DC,CAAC,IAAIC,aAAlE,EAAiFC,CAAC,IAAIC,aAAtF,QAA2G,0BAA3G;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,CAAC,IAAIC,YAAd,QAAkC,4BAAlC;AACA,SAASC,CAAC,IAAIC,oBAAd,EAAoCC,CAAC,IAAIC,yBAAzC,EAAoEC,CAAC,IAAIC,YAAzE,QAA6F,yBAA7F;AACA,SAASC,CAAC,IAAIC,4BAAd,EAA4Cd,CAAC,IAAIe,qBAAjD,EAAwEC,CAAC,IAAIC,kBAA7E,EAAiGC,CAAC,IAAIC,WAAtG,EAAmHhC,CAAC,IAAIiC,uBAAxH,EAAiJT,CAAC,IAAIU,uBAAtJ,EAA+KZ,CAAC,IAAIa,wBAApL,QAAoN,uBAApN;AACA,SAASN,CAAC,IAAIO,YAAd,EAA4BpC,CAAC,IAAIqC,YAAjC,QAAqD,4BAArD;AAEA,MAAMC,oBAAoB,GAAG,MAAM;AAC/BC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBzC,IAAAA,gBAAgB,CAAC,IAAD,EAAOyC,OAAP,CAAhB;AACA;;AACA,SAAKC,YAAL,GAAoBC,KAAK,IAAI,KAAKC,OAAL,CAAaD,KAAb,CAA7B;AACA;;;AACA,SAAKE,UAAL,GAAkBzB,YAAY,CAAC0B,gBAA/B;AACA;;AACA,SAAKC,gBAAL,GAAwB3B,YAAY,CAAC4B,OAArC;AACA;;AACA,SAAKC,qBAAL,GAA6BrB,4BAA7B;AACA;;AACA,SAAKsB,iBAAL,GAAyB,CACrB;AACIC,MAAAA,IAAI,EAAE,MADV;AAEIC,MAAAA,QAAQ,EAAE,IAFd;AAGIC,MAAAA,iBAAiB,EAAEV,KAAK,IAAI,KAAKW,gBAAL,CAAsBX,KAAtB;AAHhC,KADqB,CAAzB;AAOA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKY,UAAL,GAAkB,KAAKL,iBAAvB;AACA;;AACA,SAAKM,SAAL,GAAiB/C,SAAS,CAACgD,GAA3B;AACA;;AACA,SAAKC,OAAL,GAAe,KAAf;AACH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,KAAL;AACH;;AACDC,EAAAA,WAAW,GAAG;AACV,SAAKD,KAAL;AACH;;AACDA,EAAAA,KAAK,GAAG;AACJ,QAAI,KAAKE,IAAL,IACA,KAAKA,IAAL,CAAU,eAAV,MAA+BnD,aAAa,CAACoD,gBADjD,EACmE;AAC/D,WAAKP,SAAL,GAAiB/C,SAAS,CAACuD,IAA3B,CAD+D,CAE/D;;AACA,UAAI,KAAKnB,UAAL,KAAoBzB,YAAY,CAAC0B,gBAArC,EAAuD;AACnD,aAAKD,UAAL,GAAkBzB,YAAY,CAAC6C,iBAA/B;AACH;AACJ;;AACD,SAAKC,2BAAL,GAAmC,KAAKC,yBAAL,CAA+B,KAAKZ,UAApC,CAAnC;AACH;;AACDD,EAAAA,gBAAgB,CAACX,KAAD,EAAQ;AACpB,SAAKyB,IAAL,GAAYzB,KAAK,CAAC0B,MAAN,CAAaC,KAAzB;AACH;;AACK1B,EAAAA,OAAO,CAACD,KAAD,EAAQ;AAAA;;AAAA;AACjB,UAAIA,KAAJ,EAAW;AACPA,QAAAA,KAAK,CAAC4B,cAAN;AACH;;AACD,YAAMC,OAAO,GAAG,KAAI,CAACV,IAAL,CAAU,eAAV,MAA+BnD,aAAa,CAACoD,gBAA7C,GACVpD,aAAa,CAACoD,gBADJ,GAEV,IAFN;;AAGA,UAAI,CAAC7C,IAAD,IAAS,OAAOA,IAAI,CAACuD,aAAZ,KAA8B,UAA3C,EAAuD;AACnD,cAAM,IAAIC,KAAJ,CAAUpD,oBAAV,CAAN;AACH;;AACD,MAAA,KAAI,CAACoC,OAAL,GAAe,IAAf;;AACA,UAAI;AACA,cAAMxC,IAAI,CAACuD,aAAL,CAAmB,KAAI,CAACX,IAAxB,EAA8B,KAAI,CAACM,IAAnC,EAAyCI,OAAzC,CAAN;AACA,cAAMnC,YAAY,CAAC,KAAI,CAACyB,IAAN,EAAY,KAAI,CAACb,qBAAjB,CAAlB;AACH,OAHD,CAIA,OAAO0B,KAAP,EAAc;AACV9C,QAAAA,qBAAqB,CAAC8C,KAAD,CAArB;AACH,OAND,SAOQ;AACJ,QAAA,KAAI,CAACjB,OAAL,GAAe,KAAf;AACH;AApBgB;AAqBpB;;AACDS,EAAAA,yBAAyB,CAACZ,UAAD,EAAa;AAClC,UAAMqB,OAAO,GAAG,EAAhB;AACA,QAAIrB,UAAU,KAAKsB,SAAnB,EACI,OAAOA,SAAP;AACJ,QAAItB,UAAU,CAACuB,MAAX,IAAqB,CAAzB,EACI,OAAO,KAAK5B,iBAAZ;AACJK,IAAAA,UAAU,CAACwB,OAAX,CAAoBC,SAAD,IAAe;AAC9B,UAAI,OAAOA,SAAP,KAAqB,QAArB,IAAiCA,SAAS,CAAC7B,IAAV,KAAmB,MAAxD,EAAgE;AAC5D;AACAyB,QAAAA,OAAO,CAACK,IAAR,CAAaD,SAAb;AACH,OAHD,MAIK;AACD;AACAJ,QAAAA,OAAO,CAACK,IAAR,CAAaC,MAAM,CAACC,MAAP,CAAc;AAAE9B,UAAAA,iBAAiB,EAAEV,KAAK,IAAI,KAAKW,gBAAL,CAAsBX,KAAtB;AAA9B,SAAd,EAA4EqC,SAA5E,CAAb;AACH;AACJ,KATD;AAUA,WAAOJ,OAAP;AACH;;AACDQ,EAAAA,MAAM,GAAG;AACL,WAAQnF,CAAC,CAACE,IAAD,EAAO,IAAP,EAAaF,CAAC,CAAC,sBAAD,EAAyB;AAAE4C,MAAAA,UAAU,EAAEzC,IAAI,CAACiF,GAAL,CAAS,KAAKxC,UAAd,CAAd;AAAyCH,MAAAA,YAAY,EAAE,KAAKA,YAA5D;AAA0EK,MAAAA,gBAAgB,EAAE3C,IAAI,CAACiF,GAAL,CAAS,KAAKtC,gBAAd,CAA5F;AAA6HW,MAAAA,OAAO,EAAE,KAAKA,OAA3I;AAAoJ4B,MAAAA,sBAAsB,EAAErF,CAAC,CAAC,MAAD,EAAS,IAAT,EAAeA,CAAC,CAAC,gBAAD,EAAmB;AAAEsF,QAAAA,OAAO,EAAE,QAAX;AAAqBC,QAAAA,OAAO,EAAE,MAAM,KAAKvC,qBAAL,CAA2BpC,SAAS,CAAC4E,MAArC;AAApC,OAAnB,EAAuGrF,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACsE,eAAtB,CAAvG,CAAhB;AAA7K,KAAzB,EAAyWzF,CAAC,CAAC,qBAAD,EAAwB;AAAEsD,MAAAA,UAAU,EAAE,KAAKW;AAAnB,KAAxB,CAA1W,CAAd,CAAT;AACH;;AACkB,aAARyB,QAAQ,GAAG;AAAE,WAAO;AAC3B,cAAQ,CAAC,aAAD;AADmB,KAAP;AAEpB;;AA1G2B,CAAnC;AA6GA,MAAMC,oBAAoB,GAAG,MAAM;AAC/BpD,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBzC,IAAAA,gBAAgB,CAAC,IAAD,EAAOyC,OAAP,CAAhB;AACA;;AACA,SAAKC,YAAL,GAAoBC,KAAK,IAAI,KAAKkD,aAAL,CAAmBlD,KAAnB,CAA7B;AACA;;;AACA,SAAKE,UAAL,GAAkBzB,YAAY,CAAC0E,2BAA/B;AACA;;AACA,SAAK/C,gBAAL,GAAwB3B,YAAY,CAAC2E,kCAArC;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKxC,UAAL,GAAkB,EAAlB;AACA;AACR;AACA;;AACQ,SAAKN,qBAAL,GAA6BrB,4BAA7B;AACA;;AACA,SAAKoE,aAAL,GAAqB,UAArB;AACA,SAAKtC,OAAL,GAAe,KAAf;AACA,SAAKuC,aAAL,GAAqB,EAArB;AACA,SAAKC,WAAL,GAAmB;AACfC,MAAAA,oBAAoB,EAAE3E,yBADP;AAEf4E,MAAAA,gBAAgB,EAAE;AAFH,KAAnB;AAIH;;AACDzC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,KAAL;AACH;;AACDyC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,eAAL;AACH;;AACDzC,EAAAA,WAAW,GAAG;AACV,SAAKD,KAAL;AACH;;AACDA,EAAAA,KAAK,GAAG;AACJ;AACA,SAAK2C,SAAL,GAAiB,KAAKzC,IAAL,IAAa,KAAKA,IAAL,CAAU0C,QAAxC;AACA,SAAKC,YAAL,GAAoB,KAAK3C,IAAL,IAAa,KAAKA,IAAL,CAAU4C,WAA3C;AACA3E,IAAAA,kBAAkB,CAAC,KAAKiE,aAAN,CAAlB;AACA,SAAKM,eAAL;AACH;;AACDK,EAAAA,sBAAsB,GAAG;AACrB,SAAKV,aAAL,GAAqB,CACjB;AACI9C,MAAAA,IAAI,EAAG,GAAE,KAAK6C,aAAc,EADhC;AAEI5C,MAAAA,QAAQ,EAAE,IAFd;AAGIC,MAAAA,iBAAiB,EAAE,KAAKuD,0BAAL,CAAiC,GAAE,KAAKZ,aAAc,EAAtD,CAHvB;AAII1B,MAAAA,KAAK,EAAE,KAAKiC,SAJhB;AAKIM,MAAAA,QAAQ,EAAE,KAAKN,SAAL,GAAiB,IAAjB,GAAwB,KALtC;AAMIO,MAAAA,UAAU,EAAE;AAAEC,QAAAA,YAAY,EAAE;AAAhB;AANhB,KADiB,EASjB;AACI5D,MAAAA,IAAI,EAAE,MADV;AAEI6D,MAAAA,KAAK,EAAE5G,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAAC6F,0BAAtB,CAFX;AAGIC,MAAAA,WAAW,EAAE9G,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAAC+F,gCAAtB,CAHjB;AAII/D,MAAAA,QAAQ,EAAE,IAJd;AAKIgE,MAAAA,IAAI,EAAGnH,CAAC,CAAC,KAAD,EAAQ,IAAR,EAAcG,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACiG,yBAAtB,CAAd,EAAgE,GAAhE,EAAqEpH,CAAC,CAAC,gBAAD,EAAmB;AAAEsF,QAAAA,OAAO,EAAE,QAAX;AAAqBC,QAAAA,OAAO,EAAE,MAAM,KAAK8B,iBAAL;AAApC,OAAnB,EAAmFlH,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACmG,2BAAtB,CAAnF,CAAtE,CALZ;AAMIlE,MAAAA,iBAAiB,EAAE,KAAKuD,0BAAL,CAAgC,MAAhC;AANvB,KATiB,CAArB;AAkBH;;AACDN,EAAAA,eAAe,GAAG;AACd,QAAI,KAAK/C,UAAL,CAAgBuB,MAAhB,KAA2B,CAA/B,EAAkC;AAC9B,WAAK6B,sBAAL;AACH,KAFD,MAGK;AACD,YAAMa,SAAS,GAAG,EAAlB;AACA,WAAKjE,UAAL,CAAgBwB,OAAhB,CAAwB0C,KAAK,IAAI;AAC7B,cAAMC,QAAQ,GAAGxC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBsC,KAAlB,CAAjB;;AACA,YAAIC,QAAQ,CAACvE,IAAT,KAAkB,MAAtB,EAA8B;AAC1BuE,UAAAA,QAAQ,CAAC,MAAD,CAAR,GAAmBzF,WAAW,CAACyF,QAAD,CAAX,GAAyBzH,CAAC,CAAC,KAAD,EAAQ,IAAR,EAAcG,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACiG,yBAAtB,CAAd,EAAgE,GAAhE,EAAqEpH,CAAC,CAAC,gBAAD,EAAmB;AAAEsF,YAAAA,OAAO,EAAE,QAAX;AAAqBC,YAAAA,OAAO,EAAE,MAAM,KAAK8B,iBAAL;AAApC,WAAnB,EAAmFlH,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACmG,2BAAtB,CAAnF,CAAtE,CAA1B,GAA4OG,QAAQ,CAAC,MAAD,CAAvQ;AACH;;AACDA,QAAAA,QAAQ,CAAC,mBAAD,CAAR,GAAgC/E,KAAK,IAAI,KAAKgF,gCAAL,CAAsChF,KAAtC,EAA6C8E,KAA7C,CAAzC;;AACAD,QAAAA,SAAS,CAACvC,IAAV,CAAeyC,QAAf;AACH,OAPD;AAQA,WAAKzB,aAAL,GAAqBuB,SAArB;AACH;AACJ;;AACDZ,EAAAA,0BAA0B,CAACgB,SAAD,EAAY;AAClC,YAAQA,SAAR;AACI,WAAK,UAAL;AACA,WAAK,OAAL;AACI,eAAOjF,KAAK,IAAK,KAAK4D,SAAL,GAAiB5D,KAAK,CAAC0B,MAAN,CAAaC,KAA/C;;AACJ,WAAK,cAAL;AACI,eAAO3B,KAAK,IAAIT,uBAAuB,CAACS,KAAD,EAAQ,KAAKuD,WAAb,CAAvC;;AACJ,WAAK,MAAL;AACI,eAAOvD,KAAK,IAAK,KAAKyB,IAAL,GAAYzB,KAAK,CAAC0B,MAAN,CAAaC,KAA1C;;AACJ;AACI;AATR;AAWH;;AACDuD,EAAAA,aAAa,CAACJ,KAAD,EAAQ;AACjB,YAAQA,KAAK,CAACtE,IAAd;AACI,WAAK,UAAL;AACA,WAAK,OAAL;AACI,YAAIsE,KAAK,CAACnD,KAAN,KAAgBO,SAApB,EAA+B;AAC3B,eAAK0B,SAAL,GAAiB,EAAjB;AACH,SAFD,MAGK;AACD,eAAKA,SAAL,GAAiBkB,KAAK,CAACnD,KAAvB;AACH;;AACD;;AACJ,WAAK,cAAL;AACI,YAAImD,KAAK,CAACK,QAAV,EAAoB;AAChB,eAAK5B,WAAL,CAAiBC,oBAAjB,GAAwCsB,KAAK,CAACK,QAA9C;AACH;;AACD,aAAK5B,WAAL,CAAiBE,gBAAjB,GAAoCqB,KAAK,CAACnD,KAA1C;AACA;AAfR;AAiBH;;AACDqD,EAAAA,gCAAgC,CAAChF,KAAD,EAAQ8E,KAAR,EAAe;AAC3C,UAAMM,QAAQ,GAAGN,KAAK,CAAC,mBAAD,CAAL,GACXA,KAAK,CAAC,mBAAD,CADM,GAEX,CAAC9E,KAAD,EAAQqF,EAAR,KAAe;AACbA,MAAAA,EAAE,CAACrF,KAAD,CAAF;AACH,KAJL;AAKA,UAAMsF,QAAQ,GAAG,KAAKrB,0BAAL,CAAgCa,KAAK,CAACtE,IAAtC,CAAjB;AACA4E,IAAAA,QAAQ,CAACpF,KAAD,EAAQsF,QAAQ,CAACC,IAAT,CAAc,IAAd,CAAR,CAAR;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,WAAW,GAAG;AACV,QAAI,KAAKrE,IAAL,IAAa,KAAKA,IAAL,CAAU0C,QAA3B,EACI,OAAO,KAAK1C,IAAL,CAAU0C,QAAjB;;AACJ,YAAQ,KAAKR,aAAb;AACI,WAAK,UAAL;AACA,WAAK,OAAL;AACI,eAAO,KAAKO,SAAZ;;AACJ,WAAK,cAAL;AACI,eAAOpE,uBAAuB,CAAC,KAAK+D,WAAN,CAA9B;AALR;AAOH;;AACKoB,EAAAA,iBAAiB,GAAG;AAAA;;AAAA;AACtB,UAAI3E,KAAJ,EAAW;AACPA,QAAAA,KAAK,CAAC4B,cAAN;AACH;;AACD,UAAI,CAACrD,IAAD,IAAS,OAAOA,IAAI,CAACkH,YAAZ,KAA6B,UAA1C,EAAsD;AAClD,cAAM,IAAI1D,KAAJ,CAAUpD,oBAAV,CAAN;AACH;;AACD,UAAI;AACA,cAAMkF,QAAQ,GAAG,MAAI,CAAC2B,WAAL,EAAjB;;AACA,YAAI,CAAC3B,QAAL,EACI,MAAM,IAAI9B,KAAJ,CAAUtD,YAAY,CAACiH,cAAvB,CAAN;AACJ,cAAMnH,IAAI,CAACkH,YAAL,CAAkB5B,QAAQ,CAAC8B,IAAT,EAAlB,CAAN;AACH,OALD,CAMA,OAAO3D,KAAP,EAAc;AACV9C,QAAAA,qBAAqB,CAAC8C,KAAD,CAArB;AACH;AAfqB;AAgBzB,GApK8B,CAqK/B;AACA;;;AACMkB,EAAAA,aAAa,CAAClD,KAAD,EAAQ;AAAA;;AAAA;AACvB,UAAIA,KAAJ,EAAW;AACPA,QAAAA,KAAK,CAAC4B,cAAN;AACH;;AACD,UAAI,CAACrD,IAAD,IAAS,OAAOA,IAAI,CAAC2E,aAAZ,KAA8B,UAA3C,EAAuD;AACnD,cAAM,IAAInB,KAAJ,CAAUpD,oBAAV,CAAN;AACH;;AACD,MAAA,MAAI,CAACoC,OAAL,GAAe,IAAf;;AACA,UAAI;AACA,YAAI8C,QAAQ,GAAG,MAAI,CAAC2B,WAAL,EAAf;;AACA,YAAI,CAAC3B,QAAL,EACI,MAAM,IAAI9B,KAAJ,CAAUtD,YAAY,CAACiH,cAAvB,CAAN;AACJ7B,QAAAA,QAAQ,GAAGA,QAAQ,CAAC8B,IAAT,EAAX;AACA,cAAMC,mBAAmB,SAASrH,IAAI,CAAC2E,aAAL,CAAmBW,QAAnB,EAA6B,MAAI,CAACpC,IAAlC,CAAlC;;AACA,YAAI,CAACmE,mBAAL,EAA0B;AACtB,gBAAM,IAAI7D,KAAJ,CAAUtE,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACoH,sBAAtB,CAAV,CAAN;AACH;;AACD,YAAI,MAAI,CAAC/B,YAAL,IACA,MAAI,CAACA,YAAL,CAAkBgC,QADlB,IAEA,MAAI,CAAChC,YAAL,CAAkBgC,QAAlB,KAA+B,EAFnC,EAEuC;AACnC;AACA,gBAAMnG,YAAY,CAACkE,QAAD,EAAW,MAAI,CAACC,YAAL,CAAkBgC,QAA7B,EAAuC,MAAI,CAACxF,qBAA5C,CAAlB;AACH,SALD,MAMK;AACD,UAAA,MAAI,CAACA,qBAAL,CAA2BpC,SAAS,CAAC4E,MAArC;AACH;AACJ,OAlBD,CAmBA,OAAOd,KAAP,EAAc;AACV9C,QAAAA,qBAAqB,CAAC8C,KAAD,CAArB;AACH,OArBD,SAsBQ;AACJ,QAAA,MAAI,CAACjB,OAAL,GAAe,KAAf;AACH;AAhCsB;AAiC1B;;AACD0B,EAAAA,MAAM,GAAG;AACL,WAAQnF,CAAC,CAACE,IAAD,EAAO,IAAP,EAAaF,CAAC,CAAC,sBAAD,EAAyB;AAAE4C,MAAAA,UAAU,EAAEzC,IAAI,CAACiF,GAAL,CAAS,KAAKxC,UAAd,CAAd;AAAyCE,MAAAA,gBAAgB,EAAE3C,IAAI,CAACiF,GAAL,CAAS,KAAKtC,gBAAd,CAA3D;AAA4FL,MAAAA,YAAY,EAAE,KAAKA,YAA/G;AAA6HgB,MAAAA,OAAO,EAAE,KAAKA,OAA3I;AAAoJ4B,MAAAA,sBAAsB,EAAErF,CAAC,CAAC,KAAD,EAAQ,IAAR,EAAcA,CAAC,CAAC,MAAD,EAAS,IAAT,EAAeA,CAAC,CAAC,gBAAD,EAAmB;AAAEsF,QAAAA,OAAO,EAAE,QAAX;AAAqBC,QAAAA,OAAO,EAAE,MAAM,KAAKvC,qBAAL,CAA2BpC,SAAS,CAAC4E,MAArC;AAApC,OAAnB,EAAuGrF,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACsE,eAAtB,CAAvG,CAAhB,CAAf;AAA7K,KAAzB,EAAyXzF,CAAC,CAAC,qBAAD,EAAwB;AAAEsD,MAAAA,UAAU,EAAE,KAAK0C;AAAnB,KAAxB,CAA1X,CAAd,CAAT;AACH;;AACkB,aAARN,QAAQ,GAAG;AAAE,WAAO;AAC3B,oBAAc,CAAC,mBAAD,CADa;AAE3B,cAAQ,CAAC,aAAD;AAFmB,KAAP;AAGpB;;AA/M2B,CAAnC;AAkNA,MAAM+C,MAAM,GAAG,IAAIrI,MAAJ,CAAW,gBAAX,CAAf;AACA,MAAMsI,qBAAqB,GAAG,MAAM;AAChCnG,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBzC,IAAAA,gBAAgB,CAAC,IAAD,EAAOyC,OAAP,CAAhB;AACA;;AACA,SAAKI,UAAL,GAAkBzB,YAAY,CAACwH,mBAA/B;AACA;;AACA,SAAKC,cAAL,GAAsBzH,YAAY,CAAC0H,SAAnC;AACA;;AACA,SAAK/F,gBAAL,GAAwB3B,YAAY,CAAC2H,MAArC;AACA;;AACA,SAAKxF,UAAL,GAAkB,EAAlB;AACA;;AACA,SAAKyF,UAAL,GAAkBrG,KAAK,IAAI,KAAKsG,IAAL,CAAUtG,KAAV,CAA3B;AACA;;;AACA,SAAKD,YAAL,GAAoBC,KAAK,IAAI,KAAKuG,MAAL,CAAYvG,KAAZ,CAA7B;AACA;;;AACA,SAAKM,qBAAL,GAA6BrB,4BAA7B;AACA;;AACA,SAAKoE,aAAL,GAAqB,UAArB;AACA,SAAKmD,QAAL,GAAgB,IAAhB;AACA,SAAKzF,OAAL,GAAe,KAAf;AACA,SAAKwC,WAAL,GAAmB;AACfC,MAAAA,oBAAoB,EAAE3E,yBADP;AAEf4E,MAAAA,gBAAgB,EAAE;AAFH,KAAnB;AAIA,SAAKH,aAAL,GAAqB,EAArB;AACA,SAAKmD,mBAAL,GAA2B;AACvB7C,MAAAA,SAAS,EAAE,EADY;AAEvBkC,MAAAA,QAAQ,EAAE,EAFa;AAGvBrE,MAAAA,IAAI,EAAE;AAHiB,KAA3B;AAKH;;AACDT,EAAAA,iBAAiB,GAAG;AAChB5B,IAAAA,kBAAkB,CAAC,KAAKiE,aAAN,CAAlB;AACA,SAAKM,eAAL;AACH;;AACDD,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,eAAL;AACH;;AACDA,EAAAA,eAAe,GAAG;AACd,QAAI,KAAK/C,UAAL,CAAgBuB,MAAhB,KAA2B,CAA/B,EAAkC;AAC9B,WAAK6B,sBAAL;AACH,KAFD,MAGK;AACD,YAAMa,SAAS,GAAG,EAAlB;AACA,WAAKjE,UAAL,CAAgBwB,OAAhB,CAAwB0C,KAAK,IAAI;AAC7B,cAAMC,QAAQ,GAAGxC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBsC,KAAlB,CAAjB;;AACAC,QAAAA,QAAQ,CAAC,mBAAD,CAAR,GAAgC/E,KAAK,IAAI,KAAKgF,gCAAL,CAAsChF,KAAtC,EAA6C8E,KAA7C,CAAzC;;AACAD,QAAAA,SAAS,CAACvC,IAAV,CAAeyC,QAAf;AACH,OAJD;AAKA,WAAKzB,aAAL,GAAqBuB,SAArB;AACH;AACJ;;AACDb,EAAAA,sBAAsB,GAAG;AACrB,YAAQ,KAAKX,aAAb;AACI,WAAK,OAAL;AACI,aAAKC,aAAL,GAAqB,CACjB;AACI9C,UAAAA,IAAI,EAAE,OADV;AAEIC,UAAAA,QAAQ,EAAE,IAFd;AAGIC,UAAAA,iBAAiB,EAAE,KAAKuD,0BAAL,CAAgC,OAAhC,CAHvB;AAIIE,UAAAA,UAAU,EAAE;AACR,yBAAa;AADL;AAJhB,SADiB,CAArB;AAUA;;AACJ,WAAK,cAAL;AACI,aAAKb,aAAL,GAAqB,CACjB;AACI9C,UAAAA,IAAI,EAAE,cADV;AAEIC,UAAAA,QAAQ,EAAE,IAFd;AAGIC,UAAAA,iBAAiB,EAAE,KAAKuD,0BAAL,CAAgC,cAAhC,CAHvB;AAIIE,UAAAA,UAAU,EAAE;AACR,yBAAa;AADL;AAJhB,SADiB,CAArB;AAUA;;AACJ,WAAK,UAAL;AACA;AACI,aAAKb,aAAL,GAAqB,CACjB;AACI9C,UAAAA,IAAI,EAAE,UADV;AAEIC,UAAAA,QAAQ,EAAE,IAFd;AAGIC,UAAAA,iBAAiB,EAAE,KAAKuD,0BAAL,CAAgC,UAAhC,CAHvB;AAIIE,UAAAA,UAAU,EAAE;AACR,yBAAa;AADL;AAJhB,SADiB,CAArB;AAUA;AArCR;AAuCH;;AACDF,EAAAA,0BAA0B,CAACgB,SAAD,EAAY;AAClC,YAAQA,SAAR;AACI,WAAK,UAAL;AACA,WAAK,OAAL;AACI,eAAOjF,KAAK,IAAK,KAAKyG,mBAAL,CAAyB7C,SAAzB,GAAqC5D,KAAK,CAAC0B,MAAN,CAAaC,KAAnE;;AACJ,WAAK,cAAL;AACI,eAAO3B,KAAK,IAAIT,uBAAuB,CAACS,KAAD,EAAQ,KAAKuD,WAAb,CAAvC;;AACJ,WAAK,UAAL;AACA,WAAK,MAAL;AACI,eAAOvD,KAAK,IAAK,KAAKyG,mBAAL,CAAyBxB,SAAzB,IAAsCjF,KAAK,CAAC0B,MAAN,CAAaC,KAApE;;AACJ;AACI;AAVR;AAYH;;AACDuD,EAAAA,aAAa,CAACJ,KAAD,EAAQ4B,cAAR,EAAwB;AACjC,YAAQ5B,KAAK,CAACtE,IAAd;AACI,WAAK,UAAL;AACA,WAAK,OAAL;AACI,YAAIsE,KAAK,CAACnD,KAAN,KAAgBO,SAApB,EAA+B;AAC3BwE,UAAAA,cAAc,CAAC9C,SAAf,GAA2B,EAA3B;AACH,SAFD,MAGK;AACD8C,UAAAA,cAAc,CAAC9C,SAAf,GAA2BkB,KAAK,CAACnD,KAAjC;AACH;;AACD;;AACJ,WAAK,cAAL;AACI,YAAImD,KAAK,CAACK,QAAV,EAAoB;AAChB,eAAK5B,WAAL,CAAiBC,oBAAjB,GAAwCsB,KAAK,CAACK,QAA9C;AACH;;AACD,aAAK5B,WAAL,CAAiBE,gBAAjB,GAAoCqB,KAAK,CAACnD,KAA1C;AACA;;AACJ,WAAK,UAAL;AACA,WAAK,MAAL;AACI,YAAImD,KAAK,CAACnD,KAAN,KAAgBO,SAApB,EAA+B;AAC3BwE,UAAAA,cAAc,CAAC5B,KAAK,CAACtE,IAAP,CAAd,GAA6B,EAA7B;AACH,SAFD,MAGK;AACDkG,UAAAA,cAAc,CAAC5B,KAAK,CAACtE,IAAP,CAAd,GAA6BsE,KAAK,CAACnD,KAAnC;AACH;;AACD;AAxBR;AA0BH;;AACDqD,EAAAA,gCAAgC,CAAChF,KAAD,EAAQ8E,KAAR,EAAe;AAC3C,UAAMM,QAAQ,GAAGN,KAAK,CAAC,mBAAD,CAAL,GACXA,KAAK,CAAC,mBAAD,CADM,GAEX,CAAC9E,KAAD,EAAQqF,EAAR,KAAe;AACbA,MAAAA,EAAE,CAACrF,KAAD,CAAF;AACH,KAJL;AAKA,UAAMsF,QAAQ,GAAG,KAAKrB,0BAAL,CAAgCa,KAAK,CAACtE,IAAtC,CAAjB;AACA4E,IAAAA,QAAQ,CAACpF,KAAD,EAAQsF,QAAQ,CAACC,IAAT,CAAc,IAAd,CAAR,CAAR;AACH;;AACKe,EAAAA,IAAI,CAACtG,KAAD,EAAQ;AAAA;;AAAA;AACd,UAAIA,KAAJ,EAAW;AACPA,QAAAA,KAAK,CAAC4B,cAAN;AACH;;AACD,UAAI,CAACrD,IAAD,IAAS,OAAOA,IAAI,CAACoI,cAAZ,KAA+B,UAA5C,EAAwD;AACpD,cAAM,IAAI5E,KAAJ,CAAUpD,oBAAV,CAAN;AACH;;AACD,MAAA,MAAI,CAACoC,OAAL,GAAe,IAAf;;AACA,cAAQ,MAAI,CAACsC,aAAb;AACI,aAAK,cAAL;AACI,cAAI;AACA,YAAA,MAAI,CAACoD,mBAAL,CAAyB7C,SAAzB,GAAqCpE,uBAAuB,CAAC,MAAI,CAAC+D,WAAN,CAA5D;AACH,WAFD,CAGA,OAAOvB,KAAP,EAAc;AACV9C,YAAAA,qBAAqB,CAAC8C,KAAD,CAArB;AACH;;AACD;AARR;;AAUA,UAAI;AACA,cAAM4E,IAAI,SAASrI,IAAI,CAACoI,cAAL,CAAoB,MAAI,CAACF,mBAAL,CAAyB7C,SAAzB,CAAmC+B,IAAnC,EAApB,CAAnB;AACAI,QAAAA,MAAM,CAACc,KAAP,CAAaD,IAAb;AACA,QAAA,MAAI,CAACtD,aAAL,GAAqB,CACjB;AACI9C,UAAAA,IAAI,EAAE,MADV;AAEIC,UAAAA,QAAQ,EAAE,IAFd;AAGIC,UAAAA,iBAAiB,EAAE,MAAI,CAACuD,0BAAL,CAAgC,MAAhC,CAHvB;AAIIE,UAAAA,UAAU,EAAE;AACR,yBAAa;AADL;AAJhB,SADiB,EASjB;AACI3D,UAAAA,IAAI,EAAE,UADV;AAEIC,UAAAA,QAAQ,EAAE,IAFd;AAGIC,UAAAA,iBAAiB,EAAE,MAAI,CAACuD,0BAAL,CAAgC,UAAhC,CAHvB;AAIII,UAAAA,KAAK,EAAE5G,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACqI,kBAAtB,CAJX;AAKIvC,UAAAA,WAAW,EAAE9G,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACsI,wBAAtB;AALjB,SATiB,CAArB;AAiBA,QAAA,MAAI,CAACP,QAAL,GAAgBI,IAAI,CAACI,mBAArB;AACH,OArBD,CAsBA,OAAOhF,KAAP,EAAc;AACV9C,QAAAA,qBAAqB,CAAC8C,KAAD,CAArB;AACH,OAxBD,SAyBQ;AACJ,QAAA,MAAI,CAACjB,OAAL,GAAe,KAAf;AACH;AA7Ca;AA8CjB;;AACKwF,EAAAA,MAAM,CAACvG,KAAD,EAAQ;AAAA;;AAAA;AAChB,UAAIA,KAAJ,EAAW;AACPA,QAAAA,KAAK,CAAC4B,cAAN;AACH;;AACD,UAAI,CAACrD,IAAD,IAAS,OAAOA,IAAI,CAAC0I,oBAAZ,KAAqC,UAAlD,EAA8D;AAC1D,cAAM,IAAIlF,KAAJ,CAAUpD,oBAAV,CAAN;AACH;;AACD,MAAA,MAAI,CAACoC,OAAL,GAAe,IAAf;;AACA,UAAI;AACA,cAAM;AAAE6C,UAAAA,SAAF;AAAanC,UAAAA,IAAb;AAAmBqE,UAAAA;AAAnB,YAAgC,MAAI,CAACW,mBAA3C;AACA,cAAMG,IAAI,SAASrI,IAAI,CAAC0I,oBAAL,CAA0BrD,SAAS,CAAC+B,IAAV,EAA1B,EAA4ClE,IAA5C,EAAkDqE,QAAlD,CAAnB;AACAC,QAAAA,MAAM,CAACc,KAAP,CAAaD,IAAb;;AACA,QAAA,MAAI,CAACtG,qBAAL,CAA2BpC,SAAS,CAAC4E,MAArC;;AACA,QAAA,MAAI,CAAC0D,QAAL,GAAgB,IAAhB;AACH,OAND,CAOA,OAAOxE,KAAP,EAAc;AACV9C,QAAAA,qBAAqB,CAAC8C,KAAD,CAArB;AACH,OATD,SAUQ;AACJ,QAAA,MAAI,CAACjB,OAAL,GAAe,KAAf;AACH;AApBe;AAqBnB;;AACD0B,EAAAA,MAAM,GAAG;AACL,UAAMyE,QAAQ,GAAG,KAAKV,QAAL,GACXxG,KAAK,IAAI,KAAKD,YAAL,CAAkBC,KAAlB,CADE,GAEXA,KAAK,IAAI,KAAKqG,UAAL,CAAgBrG,KAAhB,CAFf;AAGA,UAAMI,gBAAgB,GAAG,KAAKoG,QAAL,GACnB,KAAKpG,gBADc,GAEnB,KAAK8F,cAFX;AAGA,WAAQ5I,CAAC,CAACE,IAAD,EAAO,IAAP,EAAaF,CAAC,CAAC,sBAAD,EAAyB;AAAE4C,MAAAA,UAAU,EAAEzC,IAAI,CAACiF,GAAL,CAAS,KAAKxC,UAAd,CAAd;AAAyCH,MAAAA,YAAY,EAAEmH,QAAvD;AAAiEnG,MAAAA,OAAO,EAAE,KAAKA,OAA/E;AAAwF4B,MAAAA,sBAAsB,EAAErF,CAAC,CAAC,gBAAD,EAAmB;AAAEsF,QAAAA,OAAO,EAAE,QAAX;AAAqBC,QAAAA,OAAO,EAAE,MAAM,KAAKvC,qBAAL,CAA2BpC,SAAS,CAAC4E,MAArC,CAApC;AAAkF,qBAAa;AAA/F,OAAnB,EAA4JrF,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACsE,eAAtB,CAA5J,CAAjH;AAAsToE,MAAAA,cAAc,EAAE,iBAAtU;AAAyV/G,MAAAA,gBAAgB,EAAE3C,IAAI,CAACiF,GAAL,CAAStC,gBAAT;AAA3W,KAAzB,EAAka9C,CAAC,CAAC,qBAAD,EAAwB;AAAEsD,MAAAA,UAAU,EAAE,KAAK0C;AAAnB,KAAxB,CAAna,CAAd,CAAT;AACH;;AACkB,aAARN,QAAQ,GAAG;AAAE,WAAO;AAC3B,oBAAc,CAAC,mBAAD;AADa,KAAP;AAEpB;;AAjO4B,CAApC;AAoOA,MAAMoE,QAAQ,GAAG,IAAIzJ,aAAJ,CAAkB,8BAAlB,CAAjB;AACA,MAAM0J,yBAAyB,GAAG,MAAM;AACpCxH,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBzC,IAAAA,gBAAgB,CAAC,IAAD,EAAOyC,OAAP,CAAhB;AACA;;AACA,SAAKI,UAAL,GAAkBzB,YAAY,CAAC6I,eAA/B;AACA;;AACA,SAAKlH,gBAAL,GAAwB3B,YAAY,CAAC8I,sBAArC;AACA;;AACA,SAAKxH,YAAL,GAAoBC,KAAK,IAAI,KAAKwH,mBAAL,CAAyBxH,KAAzB,CAA7B;AACA;;;AACA,SAAKM,qBAAL,GAA6BrB,4BAA7B;AACA;;AACA,SAAK2B,UAAL,GAAkB,CACd;AACIJ,MAAAA,IAAI,EAAEpC,aAAa,CAACqJ,QADxB;AAEIhH,MAAAA,QAAQ,EAAE,IAFd;AAGIC,MAAAA,iBAAiB,EAAEV,KAAK,IAAI,KAAK0H,oBAAL,CAA0B1H,KAA1B,CAHhC;AAIIqE,MAAAA,KAAK,EAAE5G,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACqI,kBAAtB,CAJX;AAKIvC,MAAAA,WAAW,EAAE9G,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACsI,wBAAtB,CALjB;AAMI5C,MAAAA,UAAU,EAAE;AACR,qBAAa;AADL;AANhB,KADc,CAAlB;AAYA,SAAKpD,OAAL,GAAe,KAAf;AACA,SAAK4G,kBAAL,GAA0B,EAA1B;AACA,SAAKrE,aAAL,GAAqB,KAAK1C,UAA1B;AACA,SAAK2C,WAAL,GAAmB;AACfC,MAAAA,oBAAoB,EAAE3E,yBADP;AAEf4E,MAAAA,gBAAgB,EAAE;AAFH,KAAnB;AAIH;;AACDvC,EAAAA,WAAW,GAAG;AACV,SAAK0G,cAAL;AACH;;AACDC,EAAAA,kCAAkC,CAACC,SAAD,EAAY9H,KAAZ,EAAmB;AACjD,QAAI8H,SAAS,KAAK,cAAlB,EAAkC;AAC9B,WAAKC,iBAAL,CAAuB/H,KAAvB;AACH,KAFD,MAGK;AACD,WAAK2H,kBAAL,CAAwBG,SAAxB,IAAqC9H,KAAK,CAAC0B,MAAN,CAAaC,KAAlD;AACH;AACJ;;AACKiG,EAAAA,cAAc,GAAG;AAAA;;AAAA;AACnB,UAAI,CAAC,MAAI,CAACzG,IAAV,EAAgB;AACZ;AACA,YAAI;AACA,gBAAMA,IAAI,SAAS5C,IAAI,CAACyJ,wBAAL,EAAnB;AACA,cAAI7G,IAAJ,EACI,MAAI,CAAC8G,WAAL,GAAmB9G,IAAnB;AACP,SAJD,CAKA,OAAOa,KAAP,EAAc;AACV9C,UAAAA,qBAAqB,CAAC8C,KAAD,CAArB;AACH;AACJ,OAVD,MAWK;AACD,QAAA,MAAI,CAACiG,WAAL,GAAmB,MAAI,CAAC9G,IAAxB;AACH;;AACD,UAAI,MAAI,CAAC8G,WAAL,IACA,MAAI,CAACA,WAAL,CAAiBC,cADjB,IAEA,MAAI,CAACD,WAAL,CAAiBC,cAAjB,CAAgCP,kBAFpC,EAEwD;AACpD,cAAMQ,sBAAsB,GAAG,MAAI,CAACF,WAAL,CAAiBC,cAAjB,CAC1BP,kBADL;AAEA,cAAMS,qBAAqB,GAAG3I,wBAAwB,EAAtD;AACA0I,QAAAA,sBAAsB,CAAC/F,OAAvB,CAAgC0F,SAAD,IAAe;AAC1C,gBAAMzF,SAAS,GAAG;AACd7B,YAAAA,IAAI,EAAEsH,SADQ;AAEdrH,YAAAA,QAAQ,EAAE,IAFI;AAGd4D,YAAAA,KAAK,EAAE+D,qBAAqB,CAACN,SAAD,CAArB,CAAiCzD,KAH1B;AAIdE,YAAAA,WAAW,EAAE6D,qBAAqB,CAACN,SAAD,CAArB,CAAiCvD,WAJhC;AAKd7D,YAAAA,iBAAiB,EAAEV,KAAK,IAAI,MAAI,CAAC6H,kCAAL,CAAwCC,SAAxC,EAAmD9H,KAAnD,CALd;AAMdmE,YAAAA,UAAU,EAAE;AACR,2BAAc,wBAAuB2D,SAAU;AADvC;AANE,WAAlB;AAUA,UAAA,MAAI,CAACxE,aAAL,GAAqB,CAAC,GAAG,MAAI,CAACA,aAAT,EAAwBjB,SAAxB,CAArB;AACH,SAZD;AAaH;AAlCkB;AAmCtB;;AACDrB,EAAAA,iBAAiB,GAAG;AAChB,WAAO,KAAK4G,cAAL,EAAP;AACH;;AACDF,EAAAA,oBAAoB,CAAC1H,KAAD,EAAQ;AACxB,SAAK8F,QAAL,GAAgB9F,KAAK,CAAC0B,MAAN,CAAaC,KAA7B;AACH;;AACDoG,EAAAA,iBAAiB,CAAC/H,KAAD,EAAQ;AACrBT,IAAAA,uBAAuB,CAACS,KAAD,EAAQ,KAAKuD,WAAb,CAAvB;AACA;AACR;AACA;AACA;AACA;;AACQ,QAAI;AACA,UAAIvD,KAAK,CAAC0B,MAAN,CAAa2G,IAAb,KAAsBtJ,YAAtB,IACA,KAAKwE,WAAL,CAAiBE,gBADrB,EACuC;AACnC,cAAM6E,aAAa,GAAG9I,uBAAuB,CAAC,KAAK+D,WAAN,CAA7C;AACA,aAAKoE,kBAAL,CAAwB,cAAxB,IAA0CW,aAA1C;AACH;AACJ,KAND,CAOA,OAAOC,GAAP,EAAY;AACRnB,MAAAA,QAAQ,CAACpF,KAAT,CAAgB,iCAAgCuG,GAAI,EAApD;AACH;AACJ;;AACKf,EAAAA,mBAAmB,CAACxH,KAAD,EAAQ;AAAA;;AAAA;AAC7B,UAAIA,KAAJ,EAAW;AACPA,QAAAA,KAAK,CAAC4B,cAAN;AACH;;AACD,UAAI,CAACrD,IAAD,IAAS,OAAOA,IAAI,CAACiJ,mBAAZ,KAAoC,UAAjD,EAA6D;AACzD,cAAM,IAAIzF,KAAJ,CAAUpD,oBAAV,CAAN;AACH;;AACD,MAAA,MAAI,CAACoC,OAAL,GAAe,IAAf;;AACA,UAAI;AACA,cAAMI,IAAI,SAAS5C,IAAI,CAACiJ,mBAAL,CAAyB,MAAI,CAACS,WAA9B,EAA2C,MAAI,CAACnC,QAAhD,EAA0D,MAAI,CAAC6B,kBAA/D,CAAnB;AACAP,QAAAA,QAAQ,CAACP,KAAT,CAAe,uBAAf,EAAwC1F,IAAxC;;AACA,gBAAQA,IAAI,CAACqH,aAAb;AACI,eAAKxK,aAAa,CAACyK,MAAnB;AACI,YAAA,MAAI,CAACnI,qBAAL,CAA2BpC,SAAS,CAACwK,aAArC,EAAoDvH,IAApD;;AACA;;AACJ,eAAKnD,aAAa,CAAC2K,QAAnB;AACIvB,YAAAA,QAAQ,CAACP,KAAT,CAAe,YAAf,EAA6B1F,IAAI,CAAC+G,cAAlC;;AACA,YAAA,MAAI,CAAC5H,qBAAL,CAA2BpC,SAAS,CAAC0K,SAArC,EAAgDzH,IAAhD;;AACA;;AACJ;AACI,kBAAMzB,YAAY,CAACyB,IAAD,EAAO,MAAI,CAACb,qBAAZ,CAAlB;AATR;AAWH,OAdD,CAeA,OAAO0B,KAAP,EAAc;AACV9C,QAAAA,qBAAqB,CAAC8C,KAAD,CAArB;AACH,OAjBD,SAkBQ;AACJ,QAAA,MAAI,CAACjB,OAAL,GAAe,KAAf;AACH;AA5B4B;AA6BhC;;AACD0B,EAAAA,MAAM,GAAG;AACL,WAAQnF,CAAC,CAACE,IAAD,EAAO,IAAP,EAAaF,CAAC,CAAC,sBAAD,EAAyB;AAAE4C,MAAAA,UAAU,EAAEzC,IAAI,CAACiF,GAAL,CAAS,KAAKxC,UAAd,CAAd;AAAyCH,MAAAA,YAAY,EAAE,KAAKA,YAA5D;AAA0EgB,MAAAA,OAAO,EAAE,KAAKA,OAAxF;AAAiG4B,MAAAA,sBAAsB,EAAErF,CAAC,CAAC,gBAAD,EAAmB;AAAEsF,QAAAA,OAAO,EAAE,QAAX;AAAqBC,QAAAA,OAAO,EAAE,MAAM,KAAKvC,qBAAL,CAA2BpC,SAAS,CAAC4E,MAArC;AAApC,OAAnB,EAAuGrF,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACsE,eAAtB,CAAvG,CAA1H;AAA0Q3C,MAAAA,gBAAgB,EAAE3C,IAAI,CAACiF,GAAL,CAAS,KAAKtC,gBAAd;AAA5R,KAAzB,EAAwV9C,CAAC,CAAC,qBAAD,EAAwB;AAAEsD,MAAAA,UAAU,EAAE,KAAK0C;AAAnB,KAAxB,CAAzV,CAAd,CAAT;AACH;;AACkB,aAARN,QAAQ,GAAG;AAAE,WAAO;AAC3B,cAAQ,CAAC,aAAD;AADmB,KAAP;AAEpB;;AA1IgC,CAAxC;AA6IA,MAAM6F,gBAAgB,GAAG,k5BAAzB;AAEA,MAAMC,aAAa,GAAG,MAAM;AACxBjJ,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBzC,IAAAA,gBAAgB,CAAC,IAAD,EAAOyC,OAAP,CAAhB;AACA;;AACA,SAAKC,YAAL,GAAoBC,KAAK,IAAI,KAAK+I,MAAL,CAAY/I,KAAZ,CAA7B;AACA;;;AACA,SAAKE,UAAL,GAAkBzB,YAAY,CAACuK,mBAA/B;AACA;;AACA,SAAK5I,gBAAL,GAAwB3B,YAAY,CAACwK,cAArC;AACA;AACA;;AACA,SAAK3I,qBAAL,GAA6BrB,4BAA7B;AACA;;AACA,SAAKoE,aAAL,GAAqB,UAArB;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKzC,UAAL,GAAkB,EAAlB;AACA;;AACA,SAAKsI,UAAL,GAAkB,KAAlB;AACA,SAAK5F,aAAL,GAAqB,EAArB;AACA;;AACA,SAAKvC,OAAL,GAAe,KAAf;AACA,SAAKwC,WAAL,GAAmB;AACfC,MAAAA,oBAAoB,EAAE3E,yBADP;AAEf4E,MAAAA,gBAAgB,EAAE;AAFH,KAAnB;AAIA,SAAK0F,gBAAL,GAAwB;AACpBvF,MAAAA,SAAS,EAAE,EADS;AAEpBkC,MAAAA,QAAQ,EAAE;AAFU,KAAxB;AAIH;;AACD9E,EAAAA,iBAAiB,GAAG;AAChB5B,IAAAA,kBAAkB,CAAC,KAAKiE,aAAN,CAAlB;AACA,SAAKM,eAAL;AACH;;AACDD,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,eAAL;AACH;;AACDM,EAAAA,0BAA0B,CAACgB,SAAD,EAAY;AAClC,YAAQA,SAAR;AACI,WAAK,UAAL;AACA,WAAK,OAAL;AACI,eAAOjF,KAAK,IAAK,KAAKmJ,gBAAL,CAAsBvF,SAAtB,GAAkC5D,KAAK,CAAC0B,MAAN,CAAaC,KAAhE;;AACJ,WAAK,cAAL;AACI,eAAO3B,KAAK,IAAIT,uBAAuB,CAACS,KAAD,EAAQ,KAAKuD,WAAb,CAAvC;;AACJ,WAAK,UAAL;AACI,eAAOvD,KAAK,IAAK,KAAKmJ,gBAAL,CAAsBrD,QAAtB,GAAiC9F,KAAK,CAAC0B,MAAN,CAAaC,KAA/D;;AACJ;AACI,eAAO,MAAM,CAAG,CAAhB;AATR;AAWH;;AACDqD,EAAAA,gCAAgC,CAAChF,KAAD,EAAQ8E,KAAR,EAAe;AAC3C,UAAMM,QAAQ,GAAGN,KAAK,CAAC,mBAAD,CAAL,GACXA,KAAK,CAAC,mBAAD,CADM,GAEX,CAAC9E,KAAD,EAAQqF,EAAR,KAAe;AACbA,MAAAA,EAAE,CAACrF,KAAD,CAAF;AACH,KAJL;AAKA,UAAMsF,QAAQ,GAAG,KAAKrB,0BAAL,CAAgCa,KAAK,CAACtE,IAAtC,CAAjB;AACA4E,IAAAA,QAAQ,CAACpF,KAAD,EAAQsF,QAAQ,CAACC,IAAT,CAAc,IAAd,CAAR,CAAR;AACH;;AACKwD,EAAAA,MAAM,CAAC/I,KAAD,EAAQ;AAAA;;AAAA;AAChB;AACA,UAAIA,KAAJ,EAAW;AACPA,QAAAA,KAAK,CAAC4B,cAAN;AACH;;AACD,MAAA,MAAI,CAACb,OAAL,GAAe,IAAf;;AACA,cAAQ,MAAI,CAACsC,aAAb;AACI,aAAK,cAAL;AACI,cAAI;AACA,YAAA,MAAI,CAAC8F,gBAAL,CAAsBvF,SAAtB,GAAkCpE,uBAAuB,CAAC,MAAI,CAAC+D,WAAN,CAAzD;AACH,WAFD,CAGA,OAAOvB,KAAP,EAAc;AACV9C,YAAAA,qBAAqB,CAAC8C,KAAD,CAArB;AACH;;AAPT;;AASA,YAAM6B,QAAQ,GAAG,MAAI,CAACsF,gBAAL,CAAsBvF,SAAtB,CAAgC+B,IAAhC,EAAjB;;AACA,YAAMhG,YAAY,CAACkE,QAAD,EAAW,MAAI,CAACsF,gBAAL,CAAsBrD,QAAjC,EAA2C,MAAI,CAACxF,qBAAhD,EAAuE,MAAI,CAAC+C,aAA5E,CAAlB;AACA,MAAA,MAAI,CAACtC,OAAL,GAAe,KAAf;AAjBgB;AAkBnB;;AACDiD,EAAAA,sBAAsB,GAAG;AACrB,UAAMoF,eAAe,GAAG,EAAxB;;AACA,YAAQ,KAAK/F,aAAb;AACI,WAAK,OAAL;AACI+F,QAAAA,eAAe,CAAC9G,IAAhB,CAAqB;AACjB9B,UAAAA,IAAI,EAAE,OADW;AAEjBC,UAAAA,QAAQ,EAAE,IAFO;AAGjBC,UAAAA,iBAAiB,EAAE,KAAKuD,0BAAL,CAAgC,OAAhC,CAHF;AAIjBE,UAAAA,UAAU,EAAE;AACR,yBAAa,qBADL;AAERC,YAAAA,YAAY,EAAE;AAFN;AAJK,SAArB;AASA;;AACJ,WAAK,cAAL;AACIgF,QAAAA,eAAe,CAAC9G,IAAhB,CAAqB;AACjB9B,UAAAA,IAAI,EAAE,cADW;AAEjBC,UAAAA,QAAQ,EAAE,IAFO;AAGjBC,UAAAA,iBAAiB,EAAE,KAAKuD,0BAAL,CAAgC,cAAhC,CAHF;AAIjBE,UAAAA,UAAU,EAAE;AACR,yBAAa,4BADL;AAERC,YAAAA,YAAY,EAAE;AAFN;AAJK,SAArB;AASA;;AACJ,WAAK,UAAL;AACA;AACIgF,QAAAA,eAAe,CAAC9G,IAAhB,CAAqB;AACjB9B,UAAAA,IAAI,EAAE,UADW;AAEjBC,UAAAA,QAAQ,EAAE,IAFO;AAGjBC,UAAAA,iBAAiB,EAAE,KAAKuD,0BAAL,CAAgC,UAAhC,CAHF;AAIjBE,UAAAA,UAAU,EAAE;AACR,yBAAa,wBADL;AAERC,YAAAA,YAAY,EAAE;AAFN;AAJK,SAArB;AASA;AAlCR;;AAoCAgF,IAAAA,eAAe,CAAC9G,IAAhB,CAAqB;AACjB9B,MAAAA,IAAI,EAAE,UADW;AAEjBiE,MAAAA,IAAI,EAAGnH,CAAC,CAAC,KAAD,EAAQ,IAAR,EAAcG,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAAC4K,oBAAtB,CAAd,EAA2D,GAA3D,EAAgE/L,CAAC,CAAC,gBAAD,EAAmB;AAAEsF,QAAAA,OAAO,EAAE,QAAX;AAAqBC,QAAAA,OAAO,EAAE,MAAM,KAAKvC,qBAAL,CAA2BpC,SAAS,CAACoL,cAArC,CAApC;AAA0F,qBAAa;AAAvG,OAAnB,EAA4J7L,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAAC8K,mBAAtB,CAA5J,CAAjE,CAFS;AAGjB9I,MAAAA,QAAQ,EAAE,IAHO;AAIjBC,MAAAA,iBAAiB,EAAE,KAAKuD,0BAAL,CAAgC,UAAhC,CAJF;AAKjBE,MAAAA,UAAU,EAAE;AACR,qBAAa;AADL;AALK,KAArB;AASA,SAAKb,aAAL,GAAqB,CAAC,GAAG8F,eAAJ,CAArB;AACH;;AACDzF,EAAAA,eAAe,GAAG;AACd,QAAI,KAAK/C,UAAL,CAAgBuB,MAAhB,KAA2B,CAA/B,EAAkC;AAC9B,WAAK6B,sBAAL;AACH,KAFD,MAGK;AACD,YAAMa,SAAS,GAAG,EAAlB;AACA,WAAKjE,UAAL,CAAgBwB,OAAhB,CAAwB0C,KAAK,IAAI;AAC7B,cAAMC,QAAQ,GAAGxC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBsC,KAAlB,CAAjB,CAD6B,CAE7B;;AACA,YAAIC,QAAQ,CAACvE,IAAT,KAAkB,UAAtB,EAAkC;AAC9BuE,UAAAA,QAAQ,CAAC,MAAD,CAAR,GAAmBzF,WAAW,CAACyF,QAAD,CAAX,GAAyBzH,CAAC,CAAC,KAAD,EAAQ,IAAR,EAAcG,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAAC4K,oBAAtB,CAAd,EAA2D,GAA3D,EAAgE/L,CAAC,CAAC,gBAAD,EAAmB;AAAEsF,YAAAA,OAAO,EAAE,QAAX;AAAqBC,YAAAA,OAAO,EAAE,MAAM,KAAKvC,qBAAL,CAA2BpC,SAAS,CAACoL,cAArC,CAApC;AAA0F,yBAAa;AAAvG,WAAnB,EAA4J7L,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAAC8K,mBAAtB,CAA5J,CAAjE,CAA1B,GAAwSxE,QAAQ,CAAC,MAAD,CAAnU;AACH;;AACDA,QAAAA,QAAQ,CAAC,mBAAD,CAAR,GAAgC/E,KAAK,IAAI,KAAKgF,gCAAL,CAAsChF,KAAtC,EAA6C8E,KAA7C,CAAzC;;AACA,aAAKI,aAAL,CAAmBH,QAAnB,EAA6B,KAAKoE,gBAAlC;AACAtE,QAAAA,SAAS,CAACvC,IAAV,CAAeyC,QAAf;AACH,OATD;AAUA,WAAKzB,aAAL,GAAqBuB,SAArB;AACH;AACJ;;AACDK,EAAAA,aAAa,CAACJ,KAAD,EAAQ4B,cAAR,EAAwB;AACjC,YAAQ5B,KAAK,CAACtE,IAAd;AACI,WAAK,UAAL;AACA,WAAK,OAAL;AACI,YAAIsE,KAAK,CAACnD,KAAN,KAAgBO,SAApB,EAA+B;AAC3BwE,UAAAA,cAAc,CAAC9C,SAAf,GAA2B,EAA3B;AACH,SAFD,MAGK;AACD8C,UAAAA,cAAc,CAAC9C,SAAf,GAA2BkB,KAAK,CAACnD,KAAjC;AACH;;AACD;;AACJ,WAAK,cAAL;AACI,YAAImD,KAAK,CAACK,QAAV,EAAoB;AAChB,eAAK5B,WAAL,CAAiBC,oBAAjB,GAAwCsB,KAAK,CAACK,QAA9C;AACH;;AACD,aAAK5B,WAAL,CAAiBE,gBAAjB,GAAoCqB,KAAK,CAACnD,KAA1C;AACA;;AACJ,WAAK,UAAL;AACI,YAAImD,KAAK,CAACnD,KAAN,KAAgBO,SAApB,EAA+B;AAC3BwE,UAAAA,cAAc,CAACZ,QAAf,GAA0B,EAA1B;AACH,SAFD,MAGK;AACDY,UAAAA,cAAc,CAACZ,QAAf,GAA0BhB,KAAK,CAACnD,KAAhC;AACH;;AACD;AAvBR;AAyBH;;AACDc,EAAAA,MAAM,GAAG;AACL,WAAQnF,CAAC,CAACE,IAAD,EAAO,IAAP,EAAaF,CAAC,CAAC,sBAAD,EAAyB;AAAE4C,MAAAA,UAAU,EAAEzC,IAAI,CAACiF,GAAL,CAAS,KAAKxC,UAAd,CAAd;AAAyCH,MAAAA,YAAY,EAAE,KAAKA,YAA5D;AAA0EoH,MAAAA,cAAc,EAAE;AAA1F,KAAzB,EAAgI7J,CAAC,CAAC,KAAD,EAAQ;AAAEkM,MAAAA,IAAI,EAAE;AAAR,KAAR,EAA8BlM,CAAC,CAAC,MAAD,EAAS;AAAE+K,MAAAA,IAAI,EAAE;AAAR,KAAT,CAA/B,CAAjI,EAAwM/K,CAAC,CAAC,MAAD,EAAS;AAAE+K,MAAAA,IAAI,EAAE;AAAR,KAAT,EAAwC/K,CAAC,CAAC,2BAAD,EAA8B;AAAEgD,MAAAA,qBAAqB,EAAE,KAAKA,qBAA9B;AAAqDmJ,MAAAA,SAAS,EAAE,KAAKA;AAArE,KAA9B,CAAzC,CAAzM,EAAoW,CAAC7L,OAAO,CAAC,KAAK6L,SAAN,CAAR,IAA4BnM,CAAC,CAAC,gBAAD,EAAmB,IAAnB,EAAyB,IAAzB,CAAjY,EAAiaA,CAAC,CAAC,qBAAD,EAAwB;AAAEsD,MAAAA,UAAU,EAAE,KAAK0C;AAAnB,KAAxB,CAAla,EAA+dhG,CAAC,CAAC,KAAD,EAAQ;AAAEkM,MAAAA,IAAI,EAAE,6BAAR;AAAuCE,MAAAA,KAAK,EAAE;AAA9C,KAAR,EAA+EpM,CAAC,CAAC,MAAD,EAAS;AAAE+K,MAAAA,IAAI,EAAE;AAAR,KAAT,EAA6B,CAAC,KAAKa,UAAN,IAAqB5L,CAAC,CAAC,MAAD,EAAS;AAAE+K,MAAAA,IAAI,EAAE;AAAR,KAAT,EAA+C/K,CAAC,CAAC,MAAD,EAAS,IAAT,EAAeG,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACkL,eAAtB,CAAf,EAAuD,GAAvD,EAA4DrM,CAAC,CAAC,gBAAD,EAAmB;AAAEsF,MAAAA,OAAO,EAAE,QAAX;AAAqBC,MAAAA,OAAO,EAAE,MAAM,KAAKvC,qBAAL,CAA2BpC,SAAS,CAAC0L,MAArC,CAApC;AAAkF,mBAAa;AAA/F,KAAnB,EAAmJnM,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACoL,mBAAtB,CAAnJ,CAA7D,CAAhD,CAAnD,EAAmWvM,CAAC,CAAC,KAAD,EAAQ;AAAEoM,MAAAA,KAAK,EAAE,KAAKR,UAAL,GAAkB,2BAAlB,GAAgD;AAAzD,KAAR,EAAuE5L,CAAC,CAAC,MAAD,EAAS;AAAE+K,MAAAA,IAAI,EAAE;AAAR,KAAT,EAA6C/K,CAAC,CAAC,gBAAD,EAAmB;AAAEkD,MAAAA,IAAI,EAAE,QAAR;AAAkB0D,MAAAA,QAAQ,EAAE,KAAKnD,OAAjC;AAA0C,mBAAa;AAAvD,KAAnB,EAAsG,KAAKA,OAAL,GAAgBzD,CAAC,CAAC,yBAAD,EAA4B,IAA5B,CAAjB,GAAuDA,CAAC,CAAC,MAAD,EAAS,IAAT,EAAeG,IAAI,CAACiF,GAAL,CAAS,KAAKtC,gBAAd,CAAf,CAA9J,CAA9C,CAAxE,CAApW,CAAhF,CAAhe,CAAd,CAAT;AACH;;AACkB,aAAR4C,QAAQ,GAAG;AAAE,WAAO;AAC3B,oBAAc,CAAC,mBAAD;AADa,KAAP;AAEpB;;AAjMoB,CAA5B;AAmMA8F,aAAa,CAACgB,KAAd,GAAsBjB,gBAAtB;AAEA,MAAMkB,gBAAgB,GAAG,g4BAAzB;AAEA,MAAMC,aAAa,GAAG,MAAM;AACxBnK,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBzC,IAAAA,gBAAgB,CAAC,IAAD,EAAOyC,OAAP,CAAhB;AACA;;AACA,SAAKC,YAAL,GAAoBC,KAAK,IAAI,KAAKiK,MAAL,CAAYjK,KAAZ,CAA7B;AACA;;;AACA,SAAKkK,YAAL,GAAoBC,MAAM,IAAI,KAAKC,UAAL,CAAgBD,MAAhB,CAA9B;AACA;;;AACA,SAAKjK,UAAL,GAAkBzB,YAAY,CAAC4L,mBAA/B;AACA;;AACA,SAAKjK,gBAAL,GAAwB3B,YAAY,CAAC6L,0BAArC;AACA;;AACA,SAAKC,eAAL,GAAuB9L,YAAY,CAAC+L,yBAApC;AACA;;AACA,SAAKC,UAAL,GAAkBhM,YAAY,CAACiM,YAA/B;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAK9J,UAAL,GAAkB,EAAlB;AACA;AACR;AACA;AACQ;;AACA,SAAKN,qBAAL,GAA6BrB,4BAA7B;AACA;;AACA,SAAKoE,aAAL,GAAqB,UAArB,CArCiB,CAsCjB;;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,WAAL,GAAmB;AACfC,MAAAA,oBAAoB,EAAE3E,yBADP;AAEf4E,MAAAA,gBAAgB,EAAE;AAFH,KAAnB;AAIA,SAAK1C,OAAL,GAAe,KAAf;AACA,SAAK4J,gBAAL,GAAwB;AACpB9G,MAAAA,QAAQ,EAAE,EADU;AAEpBiC,MAAAA,QAAQ,EAAE,EAFU;AAGpB8E,MAAAA,UAAU,EAAE;AAHQ,KAAxB;AAKH;;AACD3G,EAAAA,0BAA0B,CAACgB,SAAD,EAAY;AAClC,YAAQA,SAAR;AACI,WAAK,UAAL;AACI,eAAOjF,KAAK,IAAK,KAAK2K,gBAAL,CAAsB9G,QAAtB,GAAiC7D,KAAK,CAAC0B,MAAN,CAAaC,KAA/D;;AACJ,WAAK,UAAL;AACI,eAAO3B,KAAK,IAAK,KAAK2K,gBAAL,CAAsB7E,QAAtB,GAAiC9F,KAAK,CAAC0B,MAAN,CAAaC,KAA/D;;AACJ,WAAK,OAAL;AACI,eAAO3B,KAAK,IAAK,KAAK2K,gBAAL,CAAsBC,UAAtB,CAAiCC,KAAjC,GAAyC7K,KAAK,CAAC0B,MAAN,CAAaC,KAAvE;;AACJ,WAAK,cAAL;AACI,eAAO3B,KAAK,IAAIT,uBAAuB,CAACS,KAAD,EAAQ,KAAKuD,WAAb,CAAvC;;AACJ;AACI,eAAOvD,KAAK,IAAK,KAAK2K,gBAAL,CAAsBC,UAAtB,CAAiC3F,SAAjC,IAA8CjF,KAAK,CAAC0B,MAAN,CAAaC,KAA5E;AAVR;AAYH;;AACDqD,EAAAA,gCAAgC,CAAChF,KAAD,EAAQ8E,KAAR,EAAe;AAC3C,UAAMM,QAAQ,GAAGN,KAAK,CAAC,mBAAD,CAAL,GACXA,KAAK,CAAC,mBAAD,CADM,GAEX,CAAC9E,KAAD,EAAQqF,EAAR,KAAe;AACbA,MAAAA,EAAE,CAACrF,KAAD,CAAF;AACH,KAJL;AAKA,UAAMsF,QAAQ,GAAG,KAAKrB,0BAAL,CAAgCa,KAAK,CAACtE,IAAtC,CAAjB;AACA4E,IAAAA,QAAQ,CAACpF,KAAD,EAAQsF,QAAQ,CAACC,IAAT,CAAc,IAAd,CAAR,CAAR;AACH;;AACK6E,EAAAA,UAAU,CAACD,MAAD,EAAS;AAAA;AACrB,YAAMvD,IAAI,SAASrI,IAAI,CAAC0L,MAAL,CAAYE,MAAZ,CAAnB;;AACA,UAAI,CAACvD,IAAL,EAAW;AACP,cAAM,IAAI7E,KAAJ,CAAUtD,YAAY,CAACqM,cAAvB,CAAN;AACH;;AACD,aAAOlE,IAAP;AALqB;AAMxB;;AACDmE,EAAAA,mCAAmC,GAAG;AAClC,QAAI,KAAKxH,WAAL,CAAiBE,gBAArB,EAAuC;AACnC,UAAI;AACA,aAAKkH,gBAAL,CAAsBC,UAAtB,CAAiCI,YAAjC,GAAgDxL,uBAAuB,CAAC,KAAK+D,WAAN,CAAvE;AACH,OAFD,CAGA,OAAOvB,KAAP,EAAc;AACV9C,QAAAA,qBAAqB,CAAC8C,KAAD,CAArB;AACH;AACJ;AACJ;;AACDiJ,EAAAA,qCAAqC,GAAG;AACpC,YAAQ,KAAK5H,aAAb;AACI,WAAK,OAAL;AACA,WAAK,cAAL;AACI,aAAKsH,gBAAL,CAAsB9G,QAAtB,GAAiC,KAAK8G,gBAAL,CAAsBC,UAAtB,CAAiC,KAAKvH,aAAtC,CAAjC;AACA;AAJR;AAMH;;AACD6H,EAAAA,iCAAiC,GAAG;AAChC,SAAKH,mCAAL;AACA,SAAKE,qCAAL;AACH;;AACDE,EAAAA,wBAAwB,GAAG;AACvB,QAAI,CAAC,KAAKR,gBAAL,CAAsB9G,QAA3B,EAAqC;AACjC,UAAI,KAAKR,aAAL,KAAuB/E,aAAa,CAACuM,KAAzC,EAAgD;AAC5C,cAAM,IAAI9I,KAAJ,CAAUtD,YAAY,CAAC2M,WAAvB,CAAN;AACH,OAFD,MAGK,IAAI,KAAK/H,aAAL,KAAuB/E,aAAa,CAAC0M,YAAzC,EAAuD;AACxD,cAAM,IAAIjJ,KAAJ,CAAUtD,YAAY,CAAC4M,WAAvB,CAAN;AACH,OAFI,MAGA;AACD,cAAM,IAAItJ,KAAJ,CAAUtD,YAAY,CAACiH,cAAvB,CAAN;AACH;AACJ;;AACD,QAAI,KAAKiF,gBAAL,CAAsB9G,QAAtB,CAA+ByH,OAA/B,CAAuC,GAAvC,KAA+C,CAAnD,EAAsD;AAClD,YAAM,IAAIvJ,KAAJ,CAAUtD,YAAY,CAAC8M,0BAAvB,CAAN;AACH;;AACD,QAAI,KAAKZ,gBAAL,CAAsB7E,QAAtB,KAAmC,KAAK6E,gBAAL,CAAsB7E,QAAtB,CAA+BH,IAA/B,EAAvC,EAA8E;AAC1E,YAAM,IAAI5D,KAAJ,CAAUtD,YAAY,CAAC+M,0BAAvB,CAAN;AACH;AACJ,GA1HuB,CA2HxB;AACA;;;AACMvB,EAAAA,MAAM,CAACjK,KAAD,EAAQ;AAAA;;AAAA;AAChB,UAAIA,KAAJ,EAAW;AACPA,QAAAA,KAAK,CAAC4B,cAAN;AACH;;AACD,UAAI,CAACrD,IAAD,IAAS,OAAOA,IAAI,CAAC0L,MAAZ,KAAuB,UAApC,EAAgD;AAC5C,cAAM,IAAIlI,KAAJ,CAAUpD,oBAAV,CAAN;AACH;;AACD,MAAA,MAAI,CAACoC,OAAL,GAAe,IAAf;;AACA,MAAA,MAAI,CAACmK,iCAAL;;AACA,UAAI;AACA,QAAA,MAAI,CAACC,wBAAL;;AACA,cAAMvE,IAAI,SAAS,MAAI,CAACsD,YAAL,CAAkB,MAAI,CAACS,gBAAvB,CAAnB;;AACA,YAAI/D,IAAI,CAAC6E,aAAT,EAAwB;AACpB,gBAAM9L,YAAY,CAAC,MAAI,CAACgL,gBAAL,CAAsB9G,QAAvB,EAAiC,MAAI,CAAC8G,gBAAL,CAAsB7E,QAAvD,EAAiE,MAAI,CAACxF,qBAAtE,CAAlB;AACH,SAFD,MAGK;AACD,gBAAMyD,WAAW,GAAGxB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,MAAI,CAACmI,gBAAvB,CAApB;;AACA,UAAA,MAAI,CAACrK,qBAAL,CAA2BpC,SAAS,CAACwN,aAArC,EAAoDnJ,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBoE,IAAI,CAACzF,IAAvB,CAAd,EAA4C;AAAE4C,YAAAA;AAAF,WAA5C,CAApD;AACH;AACJ,OAVD,CAWA,OAAO/B,KAAP,EAAc;AACV9C,QAAAA,qBAAqB,CAAC8C,KAAD,CAArB;AACH,OAbD,SAcQ;AACJ,QAAA,MAAI,CAACjB,OAAL,GAAe,KAAf;AACH;AAzBe;AA0BnB;;AACDiD,EAAAA,sBAAsB,GAAG;AACrB,YAAQ,KAAKX,aAAb;AACI,WAAK,OAAL;AACI,aAAKC,aAAL,GAAqB,CACjB;AACI9C,UAAAA,IAAI,EAAE,OADV;AAEI+D,UAAAA,WAAW,EAAE9G,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACkN,yBAAtB,CAFjB;AAGIlL,UAAAA,QAAQ,EAAE,IAHd;AAIIC,UAAAA,iBAAiB,EAAE,KAAKuD,0BAAL,CAAgC,OAAhC,CAJvB;AAKIE,UAAAA,UAAU,EAAE;AACR,yBAAa,qBADL;AAERC,YAAAA,YAAY,EAAE;AAFN;AALhB,SADiB,EAWjB;AACI5D,UAAAA,IAAI,EAAE,UADV;AAEI+D,UAAAA,WAAW,EAAE9G,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACmN,4BAAtB,CAFjB;AAGInL,UAAAA,QAAQ,EAAE,IAHd;AAIIC,UAAAA,iBAAiB,EAAE,KAAKuD,0BAAL,CAAgC,UAAhC,CAJvB;AAKIE,UAAAA,UAAU,EAAE;AACR,yBAAa,wBADL;AAERC,YAAAA,YAAY,EAAE;AAFN;AALhB,SAXiB,EAqBjB;AACI5D,UAAAA,IAAI,EAAE,cADV;AAEIC,UAAAA,QAAQ,EAAE,IAFd;AAGIC,UAAAA,iBAAiB,EAAE,KAAKuD,0BAAL,CAAgC,cAAhC,CAHvB;AAIIE,UAAAA,UAAU,EAAE;AACR,yBAAa,4BADL;AAERC,YAAAA,YAAY,EAAE;AAFN;AAJhB,SArBiB,CAArB;AA+BA;;AACJ,WAAK,cAAL;AACI,aAAKd,aAAL,GAAqB,CACjB;AACI9C,UAAAA,IAAI,EAAE,cADV;AAEIC,UAAAA,QAAQ,EAAE,IAFd;AAGIC,UAAAA,iBAAiB,EAAE,KAAKuD,0BAAL,CAAgC,cAAhC,CAHvB;AAIIE,UAAAA,UAAU,EAAE;AACR,yBAAa,4BADL;AAERC,YAAAA,YAAY,EAAE;AAFN;AAJhB,SADiB,EAUjB;AACI5D,UAAAA,IAAI,EAAE,UADV;AAEI+D,UAAAA,WAAW,EAAE9G,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACmN,4BAAtB,CAFjB;AAGInL,UAAAA,QAAQ,EAAE,IAHd;AAIIC,UAAAA,iBAAiB,EAAE,KAAKuD,0BAAL,CAAgC,UAAhC,CAJvB;AAKIE,UAAAA,UAAU,EAAE;AACR,yBAAa,wBADL;AAERC,YAAAA,YAAY,EAAE;AAFN;AALhB,SAViB,EAoBjB;AACI5D,UAAAA,IAAI,EAAE,OADV;AAEI+D,UAAAA,WAAW,EAAE9G,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACkN,yBAAtB,CAFjB;AAGIlL,UAAAA,QAAQ,EAAE,IAHd;AAIIC,UAAAA,iBAAiB,EAAE,KAAKuD,0BAAL,CAAgC,OAAhC,CAJvB;AAKIE,UAAAA,UAAU,EAAE;AACR,yBAAa,qBADL;AAERC,YAAAA,YAAY,EAAE;AAFN;AALhB,SApBiB,CAArB;AA+BA;;AACJ,WAAK,UAAL;AACA;AACI,aAAKd,aAAL,GAAqB,CACjB;AACI9C,UAAAA,IAAI,EAAE,UADV;AAEI+D,UAAAA,WAAW,EAAE9G,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACoN,4BAAtB,CAFjB;AAGIpL,UAAAA,QAAQ,EAAE,IAHd;AAIIC,UAAAA,iBAAiB,EAAE,KAAKuD,0BAAL,CAAgC,UAAhC,CAJvB;AAKIE,UAAAA,UAAU,EAAE;AACR,yBAAa,wBADL;AAERC,YAAAA,YAAY,EAAE;AAFN;AALhB,SADiB,EAWjB;AACI5D,UAAAA,IAAI,EAAE,UADV;AAEI+D,UAAAA,WAAW,EAAE9G,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACmN,4BAAtB,CAFjB;AAGInL,UAAAA,QAAQ,EAAE,IAHd;AAIIC,UAAAA,iBAAiB,EAAE,KAAKuD,0BAAL,CAAgC,UAAhC,CAJvB;AAKIE,UAAAA,UAAU,EAAE;AACR,yBAAa,wBADL;AAERC,YAAAA,YAAY,EAAE;AAFN;AALhB,SAXiB,EAqBjB;AACI5D,UAAAA,IAAI,EAAE,OADV;AAEI+D,UAAAA,WAAW,EAAE9G,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACkN,yBAAtB,CAFjB;AAGIlL,UAAAA,QAAQ,EAAE,IAHd;AAIIC,UAAAA,iBAAiB,EAAE,KAAKuD,0BAAL,CAAgC,OAAhC,CAJvB;AAKIE,UAAAA,UAAU,EAAE;AACR,yBAAa;AADL;AALhB,SArBiB,EA8BjB;AACI3D,UAAAA,IAAI,EAAE,cADV;AAEIC,UAAAA,QAAQ,EAAE,IAFd;AAGIC,UAAAA,iBAAiB,EAAE,KAAKuD,0BAAL,CAAgC,cAAhC,CAHvB;AAIIE,UAAAA,UAAU,EAAE;AACR,yBAAa;AADL;AAJhB,SA9BiB,CAArB;AAuCA;AA5GR;AA8GH;;AACDR,EAAAA,eAAe,GAAG;AACd,QAAI,KAAK/C,UAAL,CAAgBuB,MAAhB,KAA2B,CAA/B,EAAkC;AAC9B,WAAK6B,sBAAL;AACH,KAFD,MAGK;AACD,YAAMa,SAAS,GAAG,EAAlB;AACA,WAAKjE,UAAL,CAAgBwB,OAAhB,CAAwB0C,KAAK,IAAI;AAC7B,cAAMC,QAAQ,GAAGxC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBsC,KAAlB,CAAjB;;AACAC,QAAAA,QAAQ,CAAC,mBAAD,CAAR,GAAgC/E,KAAK,IAAI,KAAKgF,gCAAL,CAAsChF,KAAtC,EAA6C8E,KAA7C,CAAzC;;AACA,aAAKI,aAAL,CAAmBJ,KAAnB,EAA0B,KAAK6F,gBAA/B;AACA9F,QAAAA,SAAS,CAACvC,IAAV,CAAeyC,QAAf;AACH,OALD;AAMA,WAAKzB,aAAL,GAAqBuB,SAArB;AACH;AACJ;;AACDK,EAAAA,aAAa,CAACJ,KAAD,EAAQ4B,cAAR,EAAwB;AACjC,YAAQ5B,KAAK,CAACtE,IAAd;AACI,WAAK,UAAL;AACI,YAAIsE,KAAK,CAACnD,KAAN,KAAgBO,SAApB,EAA+B;AAC3BwE,UAAAA,cAAc,CAAC7C,QAAf,GAA0B,EAA1B;AACH,SAFD,MAGK;AACD6C,UAAAA,cAAc,CAAC7C,QAAf,GAA0BiB,KAAK,CAACnD,KAAhC;AACH;;AACD;;AACJ,WAAK,UAAL;AACI,YAAImD,KAAK,CAACnD,KAAN,KAAgBO,SAApB,EAA+B;AAC3BwE,UAAAA,cAAc,CAACZ,QAAf,GAA0B,EAA1B;AACH,SAFD,MAGK;AACDY,UAAAA,cAAc,CAACZ,QAAf,GAA0BhB,KAAK,CAACnD,KAAhC;AACH;;AACD;;AACJ,WAAK,OAAL;AACI+E,QAAAA,cAAc,CAACkE,UAAf,CAA0BC,KAA1B,GAAkC/F,KAAK,CAACnD,KAAxC;AACA;;AACJ,WAAK,cAAL;AACI,YAAImD,KAAK,CAACK,QAAV,EAAoB;AAChB,eAAK5B,WAAL,CAAiBC,oBAAjB,GAAwCsB,KAAK,CAACK,QAA9C;AACH;;AACD,aAAK5B,WAAL,CAAiBE,gBAAjB,GAAoCqB,KAAK,CAACnD,KAA1C;AACA;;AACJ;AACI+E,QAAAA,cAAc,CAACkE,UAAf,CAA0B9F,KAAK,CAACtE,IAAhC,IAAwCsE,KAAK,CAACnD,KAA9C;AACA;AA5BR;AA8BH;;AACDX,EAAAA,iBAAiB,GAAG;AAChB5B,IAAAA,kBAAkB,CAAC,KAAKiE,aAAN,CAAlB;AACA,SAAKM,eAAL;AACH;;AACDD,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,eAAL;AACH;;AACDlB,EAAAA,MAAM,GAAG;AACL,WAAQnF,CAAC,CAACE,IAAD,EAAO,IAAP,EAAaF,CAAC,CAAC,sBAAD,EAAyB;AAAE4C,MAAAA,UAAU,EAAEzC,IAAI,CAACiF,GAAL,CAAS,KAAKxC,UAAd,CAAd;AAAyCH,MAAAA,YAAY,EAAE,KAAKA,YAA5D;AAA0EoH,MAAAA,cAAc,EAAE;AAA1F,KAAzB,EAAgI7J,CAAC,CAAC,KAAD,EAAQ;AAAEkM,MAAAA,IAAI,EAAE;AAAR,KAAR,EAA8BlM,CAAC,CAAC,MAAD,EAAS;AAAE+K,MAAAA,IAAI,EAAE;AAAR,KAAT,CAA/B,CAAjI,EAAwM/K,CAAC,CAAC,qBAAD,EAAwB;AAAEsD,MAAAA,UAAU,EAAE,KAAK0C;AAAnB,KAAxB,CAAzM,EAAsQhG,CAAC,CAAC,KAAD,EAAQ;AAAEoM,MAAAA,KAAK,EAAE,qBAAT;AAAgCF,MAAAA,IAAI,EAAE;AAAtC,KAAR,EAA+ElM,CAAC,CAAC,MAAD,EAAS;AAAE+K,MAAAA,IAAI,EAAE;AAAR,KAAT,EAA6B/K,CAAC,CAAC,MAAD,EAAS;AAAE+K,MAAAA,IAAI,EAAE;AAAR,KAAT,EAA+C/K,CAAC,CAAC,MAAD,EAAS,IAAT,EAAeG,IAAI,CAACiF,GAAL,CAAS,KAAK6H,eAAd,CAAf,EAA+C,GAA/C,EAAoDjN,CAAC,CAAC,gBAAD,EAAmB;AAAEsF,MAAAA,OAAO,EAAE,QAAX;AAAqBC,MAAAA,OAAO,EAAE,MAAM,KAAKvC,qBAAL,CAA2BpC,SAAS,CAAC4E,MAArC,CAApC;AAAkF,mBAAa;AAA/F,KAAnB,EAA4IrF,IAAI,CAACiF,GAAL,CAAS,KAAK+H,UAAd,CAA5I,CAArD,CAAhD,CAA9B,EAA6SnN,CAAC,CAAC,MAAD,EAAS;AAAE+K,MAAAA,IAAI,EAAE;AAAR,KAAT,EAA6C/K,CAAC,CAAC,gBAAD,EAAmB;AAAEkD,MAAAA,IAAI,EAAE,QAAR;AAAkB,mBAAa,+BAA/B;AAAgE0D,MAAAA,QAAQ,EAAE,KAAKnD;AAA/E,KAAnB,EAA6G,KAAKA,OAAL,GAAgBzD,CAAC,CAAC,yBAAD,EAA4B,IAA5B,CAAjB,GAAuDA,CAAC,CAAC,MAAD,EAAS,IAAT,EAAeG,IAAI,CAACiF,GAAL,CAAS,KAAKtC,gBAAd,CAAf,CAArK,CAA9C,CAA9S,CAAhF,CAAvQ,CAAd,CAAT;AACH;;AACkB,aAAR4C,QAAQ,GAAG;AAAE,WAAO;AAC3B,oBAAc,CAAC,mBAAD;AADa,KAAP;AAEpB;;AAnUoB,CAA5B;AAqUAgH,aAAa,CAACF,KAAd,GAAsBC,gBAAtB;AAEA,MAAM+B,QAAQ,GAAG,IAAIpO,MAAJ,CAAW,sBAAX,CAAjB;AACA,MAAMqO,oBAAoB,GAAG,MAAM;AAC/BlM,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBzC,IAAAA,gBAAgB,CAAC,IAAD,EAAOyC,OAAP,CAAhB;AACA;;AACA,SAAKQ,qBAAL,GAA6BrB,4BAA7B;AACA,SAAK8B,OAAL,GAAe,KAAf;AACH;;AACDhB,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAChBA,IAAAA,KAAK,CAAC4B,cAAN;AACA,SAAKoK,UAAL,GAAkB,KAAKzF,MAAL,CAAY,KAAK9E,IAAjB,CAAlB,GAA2C,KAAKwK,MAAL,CAAY,KAAKC,OAAjB,CAA3C;AACH;;AACK3F,EAAAA,MAAM,CAAC9E,IAAD,EAAO;AAAA;;AAAA;AACf,YAAM0K,IAAI,GAAG,OAAI,CAACH,UAAlB;;AACA,UAAI,CAACzN,IAAD,IAAS,OAAOA,IAAI,CAAC6N,gCAAZ,KAAiD,UAA9D,EAA0E;AACtE,cAAM,IAAIrK,KAAJ,CAAUpD,oBAAV,CAAN;AACH;;AACD,MAAA,OAAI,CAACoC,OAAL,GAAe,IAAf;;AACA,UAAI;AACA,cAAM6F,IAAI,SAASrI,IAAI,CAAC6N,gCAAL,CAAsCD,IAAtC,EAA4C1K,IAA5C,CAAnB;AACAqK,QAAAA,QAAQ,CAACjF,KAAT,CAAeD,IAAf;;AACA,QAAA,OAAI,CAACtG,qBAAL,CAA2BpC,SAAS,CAACmO,QAArC,EAA+C,OAAI,CAAClL,IAApD;;AACA,QAAA,OAAI,CAAC6K,UAAL,GAAkB,IAAlB;AACH,OALD,CAMA,OAAOhK,KAAP,EAAc;AACV9C,QAAAA,qBAAqB,CAAC8C,KAAD,CAArB;AACA8J,QAAAA,QAAQ,CAAC9J,KAAT,CAAeA,KAAf;AACH,OATD,SAUQ;AACJ,QAAA,OAAI,CAACjB,OAAL,GAAe,KAAf;AACH;AAlBc;AAmBlB;;AACKkL,EAAAA,MAAM,CAACC,OAAD,EAAU;AAAA;;AAAA;AAClB,UAAI,CAACA,OAAL,EAAc;AACVJ,QAAAA,QAAQ,CAAC9J,KAAT,CAAe,yCAAf;AACA;AACH;;AACD,UAAI,CAACzD,IAAD,IAAS,OAAOA,IAAI,CAAC+N,0BAAZ,KAA2C,UAAxD,EAAoE;AAChE,cAAM,IAAIvK,KAAJ,CAAUpD,oBAAV,CAAN;AACH;;AACD,MAAA,OAAI,CAACoC,OAAL,GAAe,IAAf;;AACA,UAAI;AACA,cAAM6F,IAAI,SAASrI,IAAI,CAAC+N,0BAAL,CAAgCJ,OAAhC,CAAnB;AACAJ,QAAAA,QAAQ,CAACjF,KAAT,CAAeD,IAAf;AACA,QAAA,OAAI,CAACoF,UAAL,GAAkBE,OAAlB;AACH,OAJD,CAKA,OAAOlK,KAAP,EAAc;AACV9C,QAAAA,qBAAqB,CAAC8C,KAAD,CAArB;AACA8J,QAAAA,QAAQ,CAAC9J,KAAT,CAAeA,KAAf;AACH,OARD,SASQ;AACJ,QAAA,OAAI,CAACjB,OAAL,GAAe,KAAf;AACH;AApBiB;AAqBrB;;AACDL,EAAAA,iBAAiB,CAACV,KAAD,EAAQ;AACrB,UAAMuM,SAAS,GAAGvM,KAAK,CAAC0B,MAAN,CAAa2G,IAA/B;;AACA,QAAIkE,SAAS,KAAK,MAAlB,EAA0B;AACtB,WAAK9K,IAAL,GAAYzB,KAAK,CAAC0B,MAAN,CAAaC,KAAzB;AACH,KAFD,MAGK,IAAI4K,SAAS,KAAK,SAAlB,EAA6B;AAC9B,WAAKL,OAAL,GAAelM,KAAK,CAAC0B,MAAN,CAAaC,KAA5B;AACH;AACJ;;AACD6K,EAAAA,YAAY,GAAG;AACX,WAAQlP,CAAC,CAAC,KAAD,EAAQ,IAAR,EAAcA,CAAC,CAAC,eAAD,EAAkB;AAAE6G,MAAAA,UAAU,EAAE;AAChDC,QAAAA,YAAY,EAAE,KADkC;AAEhD,qBAAa;AAFmC,OAAd;AAGnCiE,MAAAA,IAAI,EAAE,MAH6B;AAGrB9D,MAAAA,WAAW,EAAE9G,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACgO,gBAAtB,CAHQ;AAGiC/L,MAAAA,iBAAiB,EAAEV,KAAK,IAAI,KAAKU,iBAAL,CAAuBV,KAAvB;AAH7D,KAAlB,CAAf,CAAT;AAIH;;AACD0M,EAAAA,YAAY,GAAG;AACX,UAAMvL,IAAI,GAAG,KAAKA,IAAlB;;AACA,QAAI,CAACA,IAAL,EAAW;AACP2K,MAAAA,QAAQ,CAACjF,KAAT,CAAe,mBAAf;AACA,aAAO,IAAP;AACH;;AACD,UAAM;AAAE8F,MAAAA;AAAF,QAAiBxL,IAAvB;;AACA,QAAI,CAACwL,UAAL,EAAiB;AACbb,MAAAA,QAAQ,CAACjF,KAAT,CAAe,4CAAf;AACA,aAAO,IAAP;AACH;;AACD,UAAM;AAAEgE,MAAAA,KAAF;AAASG,MAAAA;AAAT,QAA0B2B,UAAhC;AACA,WAAQrP,CAAC,CAAC,KAAD,EAAQ,IAAR,EAAcuN,KAAK,IAAKvN,CAAC,CAAC,sBAAD,EAAyB;AAAE+G,MAAAA,KAAK,EAAE5G,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACmO,0BAAtB,CAAT;AAA4DC,MAAAA,GAAG,EAAE,OAAjE;AAA0ExE,MAAAA,IAAI,EAAE,SAAhF;AAA2F1G,MAAAA,KAAK,EAAE,OAAlG;AAA2GjB,MAAAA,iBAAiB,EAAEV,KAAK,IAAI,KAAKU,iBAAL,CAAuBV,KAAvB,CAAvI;AAAsKmE,MAAAA,UAAU,EAAE;AACrO,qBAAa;AADwN;AAAlL,KAAzB,CAAzB,EAEE6G,YAAY,IAAK1N,CAAC,CAAC,sBAAD,EAAyB;AAAE+G,MAAAA,KAAK,EAAE5G,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACqO,0BAAtB,CAAT;AAA4DD,MAAAA,GAAG,EAAE,cAAjE;AAAiFxE,MAAAA,IAAI,EAAE,SAAvF;AAAkG1G,MAAAA,KAAK,EAAE,cAAzG;AAAyHjB,MAAAA,iBAAiB,EAAEV,KAAK,IAAI,KAAKU,iBAAL,CAAuBV,KAAvB,CAArJ;AAAoLmE,MAAAA,UAAU,EAAE;AAC9O,qBAAa;AADiO;AAAhM,KAAzB,CAFpB,CAAT;AAKH;;AACD1B,EAAAA,MAAM,GAAG;AACL,WAAQnF,CAAC,CAACE,IAAD,EAAO,IAAP,EAAaF,CAAC,CAAC,sBAAD,EAAyB;AAAEyC,MAAAA,YAAY,EAAEC,KAAK,IAAI,KAAKD,YAAL,CAAkBC,KAAlB,CAAzB;AAAmDE,MAAAA,UAAU,EAAEzC,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACsO,0BAAtB,CAA/D;AAAkHhM,MAAAA,OAAO,EAAE,KAAKA,OAAhI;AAAyI4B,MAAAA,sBAAsB,EAAErF,CAAC,CAAC,MAAD,EAAS,IAAT,EAAeA,CAAC,CAAC,gBAAD,EAAmB;AAAEsF,QAAAA,OAAO,EAAE,QAAX;AAAqBC,QAAAA,OAAO,EAAE,MAAM,KAAKvC,qBAAL,CAA2BpC,SAAS,CAACmO,QAArC,EAA+C,KAAKlL,IAApD,CAApC;AAA+F,qBAAa;AAA5G,OAAnB,EAA6J,MAA7J,CAAhB,CAAlK;AAAyVf,MAAAA,gBAAgB,EAAE,KAAK4L,UAAL,GACjZvO,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACuO,2BAAtB,CADiZ,GAEjZvP,IAAI,CAACiF,GAAL,CAASjE,YAAY,CAACwO,2BAAtB;AAFsC,KAAzB,EAEyC,KAAKjB,UAAL,GAAkB,KAAKQ,YAAL,EAAlB,GAAwC,KAAKE,YAAL,EAFjF,CAAd,CAAT;AAGH;;AA1F8B,CAAnC;AA6FA,SAAS9M,oBAAoB,IAAIsN,uBAAjC,EAA0DjK,oBAAoB,IAAIkK,uBAAlF,EAA2GnH,qBAAqB,IAAIoH,uBAApI,EAA6J/F,yBAAyB,IAAIgG,4BAA1L,EAAwNvE,aAAa,IAAIwE,eAAzO,EAA0PtD,aAAa,IAAIuD,eAA3Q,EAA4RxB,oBAAoB,IAAIyB,sBAApT","sourcesContent":["import { r as registerInstance, h, H as Host } from './index-83f2275b.js';\nimport { I18n, Logger, ConsoleLogger, isEmpty } from '@aws-amplify/core';\nimport { M as MfaOption, C as ChallengeName, A as AuthState, a as AuthFormField, U as UsernameAlias } from './auth-types-78df304e.js';\nimport { Auth } from '@aws-amplify/auth';\nimport { T as Translations } from './Translations-c833f663.js';\nimport { N as NO_AUTH_MODULE_FOUND, g as COUNTRY_DIAL_CODE_DEFAULT, b as PHONE_SUFFIX } from './constants-c8ecaa24.js';\nimport { d as dispatchAuthStateChangeEvent, a as dispatchToastHubEvent, c as checkUsernameAlias, i as isHintValid, h as handlePhoneNumberChange, b as composePhoneNumberInput, g as getRequiredAttributesMap } from './helpers-9703fe65.js';\nimport { c as checkContact, h as handleSignIn } from './auth-helpers-475f7fa4.js';\n\nconst AmplifyConfirmSignIn = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Fires when confirm sign in form is submitted */\n        this.handleSubmit = event => this.confirm(event);\n        /** Used for header text in confirm sign in component */\n        this.headerText = Translations.CONFIRM_SMS_CODE;\n        /** Used for the submit button text in confirm sign in component */\n        this.submitButtonText = Translations.CONFIRM;\n        /** Auth state change handler for this component */\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        /** Default form field */\n        this.defaultFormFields = [\n            {\n                type: 'code',\n                required: true,\n                handleInputChange: event => this.handleCodeChange(event),\n            },\n        ];\n        /**\n         * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.\n         * by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing\n         * text for a label or adjust a placeholder, you can follow the structure below in order to do just that.\n         * ```\n         * [\n         *  {\n         *    type: string,\n         *    label: string,\n         *    placeholder: string,\n         *    hint: string | Functional Component | null,\n         *    required: boolean\n         *  }\n         * ]\n         * ```\n         */\n        this.formFields = this.defaultFormFields;\n        /** The MFA option to confirm with */\n        this.mfaOption = MfaOption.SMS;\n        /* Whether or not the confirm-sign-in component is loading */\n        this.loading = false;\n    }\n    componentWillLoad() {\n        this.setup();\n    }\n    userHandler() {\n        this.setup();\n    }\n    setup() {\n        if (this.user &&\n            this.user['challengeName'] === ChallengeName.SoftwareTokenMFA) {\n            this.mfaOption = MfaOption.TOTP;\n            // If header text is using default use TOTP string\n            if (this.headerText === Translations.CONFIRM_SMS_CODE) {\n                this.headerText = Translations.CONFIRM_TOTP_CODE;\n            }\n        }\n        this.constructedFormFieldOptions = this.constructFormFieldOptions(this.formFields);\n    }\n    handleCodeChange(event) {\n        this.code = event.target.value;\n    }\n    async confirm(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        const mfaType = this.user['challengeName'] === ChallengeName.SoftwareTokenMFA\n            ? ChallengeName.SoftwareTokenMFA\n            : null;\n        if (!Auth || typeof Auth.confirmSignIn !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        try {\n            await Auth.confirmSignIn(this.user, this.code, mfaType);\n            await checkContact(this.user, this.handleAuthStateChange);\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    constructFormFieldOptions(formFields) {\n        const content = [];\n        if (formFields === undefined)\n            return undefined;\n        if (formFields.length <= 0)\n            return this.defaultFormFields;\n        formFields.forEach((formField) => {\n            if (typeof formField === 'string' || formField.type !== 'code') {\n                // This is either a `string`, and/or a custom field that isn't `code`. Pass this directly.\n                content.push(formField);\n            }\n            else {\n                // This is a code input field. Attach input handler.\n                content.push(Object.assign({ handleInputChange: event => this.handleCodeChange(event) }, formField));\n            }\n        });\n        return content;\n    }\n    render() {\n        return (h(Host, null, h(\"amplify-form-section\", { headerText: I18n.get(this.headerText), handleSubmit: this.handleSubmit, submitButtonText: I18n.get(this.submitButtonText), loading: this.loading, secondaryFooterContent: h(\"span\", null, h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.SignIn) }, I18n.get(Translations.BACK_TO_SIGN_IN))) }, h(\"amplify-auth-fields\", { formFields: this.constructedFormFieldOptions }))));\n    }\n    static get watchers() { return {\n        \"user\": [\"userHandler\"]\n    }; }\n};\n\nconst AmplifyConfirmSignUp = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Fires when sign up form is submitted */\n        this.handleSubmit = event => this.confirmSignUp(event);\n        /** Used for header text in confirm sign up component */\n        this.headerText = Translations.CONFIRM_SIGN_UP_HEADER_TEXT;\n        /** Used for the submit button text in confirm sign up component */\n        this.submitButtonText = Translations.CONFIRM_SIGN_UP_SUBMIT_BUTTON_TEXT;\n        /**\n         * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.\n         * by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing\n         * text for a label or adjust a placeholder, you can follow the structure below in order to do just that.\n         * ```\n         * [\n         *  {\n         *    type: string,\n         *    label: string,\n         *    placeholder: string,\n         *    hint: string | Functional Component | null,\n         *    required: boolean\n         *  }\n         * ]\n         * ```\n         */\n        this.formFields = [];\n        /** Auth state change handler for this components\n         * e.g. SignIn -> 'Create Account' link -> SignUp\n         */\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        /** Username Alias is used to setup authentication with `username`, `email` or `phone_number`  */\n        this.usernameAlias = 'username';\n        this.loading = false;\n        this.newFormFields = [];\n        this.phoneNumber = {\n            countryDialCodeValue: COUNTRY_DIAL_CODE_DEFAULT,\n            phoneNumberValue: null,\n        };\n    }\n    componentWillLoad() {\n        this.setup();\n    }\n    formFieldsHandler() {\n        this.buildFormFields();\n    }\n    userHandler() {\n        this.setup();\n    }\n    setup() {\n        // TODO: Use optional chaining instead\n        this.userInput = this.user && this.user.username;\n        this._signUpAttrs = this.user && this.user.signUpAttrs;\n        checkUsernameAlias(this.usernameAlias);\n        this.buildFormFields();\n    }\n    buildDefaultFormFields() {\n        this.newFormFields = [\n            {\n                type: `${this.usernameAlias}`,\n                required: true,\n                handleInputChange: this.handleFormFieldInputChange(`${this.usernameAlias}`),\n                value: this.userInput,\n                disabled: this.userInput ? true : false,\n                inputProps: { autocomplete: 'username' },\n            },\n            {\n                type: 'code',\n                label: I18n.get(Translations.CONFIRM_SIGN_UP_CODE_LABEL),\n                placeholder: I18n.get(Translations.CONFIRM_SIGN_UP_CODE_PLACEHOLDER),\n                required: true,\n                hint: (h(\"div\", null, I18n.get(Translations.CONFIRM_SIGN_UP_LOST_CODE), ' ', h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.resendConfirmCode() }, I18n.get(Translations.CONFIRM_SIGN_UP_RESEND_CODE)))),\n                handleInputChange: this.handleFormFieldInputChange('code'),\n            },\n        ];\n    }\n    buildFormFields() {\n        if (this.formFields.length === 0) {\n            this.buildDefaultFormFields();\n        }\n        else {\n            const newFields = [];\n            this.formFields.forEach(field => {\n                const newField = Object.assign({}, field);\n                if (newField.type === 'code') {\n                    newField['hint'] = isHintValid(newField) ? (h(\"div\", null, I18n.get(Translations.CONFIRM_SIGN_UP_LOST_CODE), ' ', h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.resendConfirmCode() }, I18n.get(Translations.CONFIRM_SIGN_UP_RESEND_CODE)))) : (newField['hint']);\n                }\n                newField['handleInputChange'] = event => this.handleFormFieldInputWithCallback(event, field);\n                newFields.push(newField);\n            });\n            this.newFormFields = newFields;\n        }\n    }\n    handleFormFieldInputChange(fieldType) {\n        switch (fieldType) {\n            case 'username':\n            case 'email':\n                return event => (this.userInput = event.target.value);\n            case 'phone_number':\n                return event => handlePhoneNumberChange(event, this.phoneNumber);\n            case 'code':\n                return event => (this.code = event.target.value);\n            default:\n                return;\n        }\n    }\n    setFieldValue(field) {\n        switch (field.type) {\n            case 'username':\n            case 'email':\n                if (field.value === undefined) {\n                    this.userInput = '';\n                }\n                else {\n                    this.userInput = field.value;\n                }\n                break;\n            case 'phone_number':\n                if (field.dialCode) {\n                    this.phoneNumber.countryDialCodeValue = field.dialCode;\n                }\n                this.phoneNumber.phoneNumberValue = field.value;\n                break;\n        }\n    }\n    handleFormFieldInputWithCallback(event, field) {\n        const fnToCall = field['handleInputChange']\n            ? field['handleInputChange']\n            : (event, cb) => {\n                cb(event);\n            };\n        const callback = this.handleFormFieldInputChange(field.type);\n        fnToCall(event, callback.bind(this));\n    }\n    /**\n     * Returns the username of the user to confirm. If a valid `user.username` has been passed as a prop, we return that.\n     * Otherwise, we return the `userInput` on the form.\n     */\n    getUsername() {\n        if (this.user && this.user.username)\n            return this.user.username;\n        switch (this.usernameAlias) {\n            case 'username':\n            case 'email':\n                return this.userInput;\n            case 'phone_number':\n                return composePhoneNumberInput(this.phoneNumber);\n        }\n    }\n    async resendConfirmCode() {\n        if (event) {\n            event.preventDefault();\n        }\n        if (!Auth || typeof Auth.resendSignUp !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        try {\n            const username = this.getUsername();\n            if (!username)\n                throw new Error(Translations.EMPTY_USERNAME);\n            await Auth.resendSignUp(username.trim());\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n        }\n    }\n    // TODO: Add validation\n    // TODO: Prefix\n    async confirmSignUp(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        if (!Auth || typeof Auth.confirmSignUp !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        try {\n            let username = this.getUsername();\n            if (!username)\n                throw new Error(Translations.EMPTY_USERNAME);\n            username = username.trim();\n            const confirmSignUpResult = await Auth.confirmSignUp(username, this.code);\n            if (!confirmSignUpResult) {\n                throw new Error(I18n.get(Translations.CONFIRM_SIGN_UP_FAILED));\n            }\n            if (this._signUpAttrs &&\n                this._signUpAttrs.password &&\n                this._signUpAttrs.password !== '') {\n                // Auto sign in user if password is available from previous workflow\n                await handleSignIn(username, this._signUpAttrs.password, this.handleAuthStateChange);\n            }\n            else {\n                this.handleAuthStateChange(AuthState.SignIn);\n            }\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    render() {\n        return (h(Host, null, h(\"amplify-form-section\", { headerText: I18n.get(this.headerText), submitButtonText: I18n.get(this.submitButtonText), handleSubmit: this.handleSubmit, loading: this.loading, secondaryFooterContent: h(\"div\", null, h(\"span\", null, h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.SignIn) }, I18n.get(Translations.BACK_TO_SIGN_IN)))) }, h(\"amplify-auth-fields\", { formFields: this.newFormFields }))));\n    }\n    static get watchers() { return {\n        \"formFields\": [\"formFieldsHandler\"],\n        \"user\": [\"userHandler\"]\n    }; }\n};\n\nconst logger = new Logger('ForgotPassword');\nconst AmplifyForgotPassword = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** The header text of the forgot password section */\n        this.headerText = Translations.RESET_YOUR_PASSWORD;\n        /** The text displayed inside of the send code button for the form */\n        this.sendButtonText = Translations.SEND_CODE;\n        /** The text displayed inside of the submit button for the form */\n        this.submitButtonText = Translations.SUBMIT;\n        /** The form fields displayed inside of the forgot password form */\n        this.formFields = [];\n        /** The function called when making a request to reset password */\n        this.handleSend = event => this.send(event);\n        /** The function called when submitting a new password */\n        this.handleSubmit = event => this.submit(event);\n        /** Auth state change handler for this component */\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        /** Username Alias is used to setup authentication with `username`, `email` or `phone_number`  */\n        this.usernameAlias = 'username';\n        this.delivery = null;\n        this.loading = false;\n        this.phoneNumber = {\n            countryDialCodeValue: COUNTRY_DIAL_CODE_DEFAULT,\n            phoneNumberValue: null,\n        };\n        this.newFormFields = [];\n        this.forgotPasswordAttrs = {\n            userInput: '',\n            password: '',\n            code: '',\n        };\n    }\n    componentWillLoad() {\n        checkUsernameAlias(this.usernameAlias);\n        this.buildFormFields();\n    }\n    formFieldsHandler() {\n        this.buildFormFields();\n    }\n    buildFormFields() {\n        if (this.formFields.length === 0) {\n            this.buildDefaultFormFields();\n        }\n        else {\n            const newFields = [];\n            this.formFields.forEach(field => {\n                const newField = Object.assign({}, field);\n                newField['handleInputChange'] = event => this.handleFormFieldInputWithCallback(event, field);\n                newFields.push(newField);\n            });\n            this.newFormFields = newFields;\n        }\n    }\n    buildDefaultFormFields() {\n        switch (this.usernameAlias) {\n            case 'email':\n                this.newFormFields = [\n                    {\n                        type: 'email',\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('email'),\n                        inputProps: {\n                            'data-test': 'forgot-password-email-input',\n                        },\n                    },\n                ];\n                break;\n            case 'phone_number':\n                this.newFormFields = [\n                    {\n                        type: 'phone_number',\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('phone_number'),\n                        inputProps: {\n                            'data-test': 'forgot-password-phone-number-input',\n                        },\n                    },\n                ];\n                break;\n            case 'username':\n            default:\n                this.newFormFields = [\n                    {\n                        type: 'username',\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('username'),\n                        inputProps: {\n                            'data-test': 'forgot-password-username-input',\n                        },\n                    },\n                ];\n                break;\n        }\n    }\n    handleFormFieldInputChange(fieldType) {\n        switch (fieldType) {\n            case 'username':\n            case 'email':\n                return event => (this.forgotPasswordAttrs.userInput = event.target.value);\n            case 'phone_number':\n                return event => handlePhoneNumberChange(event, this.phoneNumber);\n            case 'password':\n            case 'code':\n                return event => (this.forgotPasswordAttrs[fieldType] = event.target.value);\n            default:\n                return;\n        }\n    }\n    setFieldValue(field, formAttributes) {\n        switch (field.type) {\n            case 'username':\n            case 'email':\n                if (field.value === undefined) {\n                    formAttributes.userInput = '';\n                }\n                else {\n                    formAttributes.userInput = field.value;\n                }\n                break;\n            case 'phone_number':\n                if (field.dialCode) {\n                    this.phoneNumber.countryDialCodeValue = field.dialCode;\n                }\n                this.phoneNumber.phoneNumberValue = field.value;\n                break;\n            case 'password':\n            case 'code':\n                if (field.value === undefined) {\n                    formAttributes[field.type] = '';\n                }\n                else {\n                    formAttributes[field.type] = field.value;\n                }\n                break;\n        }\n    }\n    handleFormFieldInputWithCallback(event, field) {\n        const fnToCall = field['handleInputChange']\n            ? field['handleInputChange']\n            : (event, cb) => {\n                cb(event);\n            };\n        const callback = this.handleFormFieldInputChange(field.type);\n        fnToCall(event, callback.bind(this));\n    }\n    async send(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        if (!Auth || typeof Auth.forgotPassword !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        switch (this.usernameAlias) {\n            case 'phone_number':\n                try {\n                    this.forgotPasswordAttrs.userInput = composePhoneNumberInput(this.phoneNumber);\n                }\n                catch (error) {\n                    dispatchToastHubEvent(error);\n                }\n                break;\n        }\n        try {\n            const data = await Auth.forgotPassword(this.forgotPasswordAttrs.userInput.trim());\n            logger.debug(data);\n            this.newFormFields = [\n                {\n                    type: 'code',\n                    required: true,\n                    handleInputChange: this.handleFormFieldInputChange('code'),\n                    inputProps: {\n                        'data-test': 'forgot-password-code-input',\n                    },\n                },\n                {\n                    type: 'password',\n                    required: true,\n                    handleInputChange: this.handleFormFieldInputChange('password'),\n                    label: I18n.get(Translations.NEW_PASSWORD_LABEL),\n                    placeholder: I18n.get(Translations.NEW_PASSWORD_PLACEHOLDER),\n                },\n            ];\n            this.delivery = data.CodeDeliveryDetails;\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    async submit(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        if (!Auth || typeof Auth.forgotPasswordSubmit !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        try {\n            const { userInput, code, password } = this.forgotPasswordAttrs;\n            const data = await Auth.forgotPasswordSubmit(userInput.trim(), code, password);\n            logger.debug(data);\n            this.handleAuthStateChange(AuthState.SignIn);\n            this.delivery = null;\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    render() {\n        const submitFn = this.delivery\n            ? event => this.handleSubmit(event)\n            : event => this.handleSend(event);\n        const submitButtonText = this.delivery\n            ? this.submitButtonText\n            : this.sendButtonText;\n        return (h(Host, null, h(\"amplify-form-section\", { headerText: I18n.get(this.headerText), handleSubmit: submitFn, loading: this.loading, secondaryFooterContent: h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.SignIn), \"data-test\": \"forgot-password-back-to-sign-in-link\" }, I18n.get(Translations.BACK_TO_SIGN_IN)), testDataPrefix: 'forgot-password', submitButtonText: I18n.get(submitButtonText) }, h(\"amplify-auth-fields\", { formFields: this.newFormFields }))));\n    }\n    static get watchers() { return {\n        \"formFields\": [\"formFieldsHandler\"]\n    }; }\n};\n\nconst logger$1 = new ConsoleLogger('amplify-require-new-password');\nconst AmplifyRequireNewPassword = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** The header text of the forgot password section */\n        this.headerText = Translations.CHANGE_PASSWORD;\n        /** The text displayed inside of the submit button for the form */\n        this.submitButtonText = Translations.CHANGE_PASSWORD_ACTION;\n        /** The function called when submitting a new password */\n        this.handleSubmit = event => this.completeNewPassword(event);\n        /** Auth state change handler for this component */\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        /** The form fields displayed inside of the forgot password form */\n        this.formFields = [\n            {\n                type: AuthFormField.Password,\n                required: true,\n                handleInputChange: event => this.handlePasswordChange(event),\n                label: I18n.get(Translations.NEW_PASSWORD_LABEL),\n                placeholder: I18n.get(Translations.NEW_PASSWORD_PLACEHOLDER),\n                inputProps: {\n                    'data-test': 'require-new-password-password-input',\n                },\n            },\n        ];\n        this.loading = false;\n        this.requiredAttributes = {};\n        this.newFormFields = this.formFields;\n        this.phoneNumber = {\n            countryDialCodeValue: COUNTRY_DIAL_CODE_DEFAULT,\n            phoneNumberValue: ' ',\n        };\n    }\n    userHandler() {\n        this.setCurrentUser();\n    }\n    handleRequiredAttributeInputChange(attribute, event) {\n        if (attribute === 'phone_number') {\n            this.formatPhoneNumber(event);\n        }\n        else {\n            this.requiredAttributes[attribute] = event.target.value;\n        }\n    }\n    async setCurrentUser() {\n        if (!this.user) {\n            // Check for authenticated user\n            try {\n                const user = await Auth.currentAuthenticatedUser();\n                if (user)\n                    this.currentUser = user;\n            }\n            catch (error) {\n                dispatchToastHubEvent(error);\n            }\n        }\n        else {\n            this.currentUser = this.user;\n        }\n        if (this.currentUser &&\n            this.currentUser.challengeParam &&\n            this.currentUser.challengeParam.requiredAttributes) {\n            const userRequiredAttributes = this.currentUser.challengeParam\n                .requiredAttributes;\n            const requiredAttributesMap = getRequiredAttributesMap();\n            userRequiredAttributes.forEach((attribute) => {\n                const formField = {\n                    type: attribute,\n                    required: true,\n                    label: requiredAttributesMap[attribute].label,\n                    placeholder: requiredAttributesMap[attribute].placeholder,\n                    handleInputChange: event => this.handleRequiredAttributeInputChange(attribute, event),\n                    inputProps: {\n                        'data-test': `require-new-password-${attribute}-input`,\n                    },\n                };\n                this.newFormFields = [...this.newFormFields, formField];\n            });\n        }\n    }\n    componentWillLoad() {\n        return this.setCurrentUser();\n    }\n    handlePasswordChange(event) {\n        this.password = event.target.value;\n    }\n    formatPhoneNumber(event) {\n        handlePhoneNumberChange(event, this.phoneNumber);\n        /**\n         * composePhoneNumberInput will throw an error if the phoneNumberValue it receives\n         * is empty. Adding a check here to try and make sure that doesn't happen...but will\n         * wrap it in a try/catch block just in case as well\n         */\n        try {\n            if (event.target.name === PHONE_SUFFIX &&\n                this.phoneNumber.phoneNumberValue) {\n                const composedInput = composePhoneNumberInput(this.phoneNumber);\n                this.requiredAttributes['phone_number'] = composedInput;\n            }\n        }\n        catch (err) {\n            logger$1.error(`error in phone number field - ${err}`);\n        }\n    }\n    async completeNewPassword(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        if (!Auth || typeof Auth.completeNewPassword !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        try {\n            const user = await Auth.completeNewPassword(this.currentUser, this.password, this.requiredAttributes);\n            logger$1.debug('complete new password', user);\n            switch (user.challengeName) {\n                case ChallengeName.SMSMFA:\n                    this.handleAuthStateChange(AuthState.ConfirmSignIn, user);\n                    break;\n                case ChallengeName.MFASetup:\n                    logger$1.debug('TOTP setup', user.challengeParam);\n                    this.handleAuthStateChange(AuthState.TOTPSetup, user);\n                    break;\n                default:\n                    await checkContact(user, this.handleAuthStateChange);\n            }\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    render() {\n        return (h(Host, null, h(\"amplify-form-section\", { headerText: I18n.get(this.headerText), handleSubmit: this.handleSubmit, loading: this.loading, secondaryFooterContent: h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.SignIn) }, I18n.get(Translations.BACK_TO_SIGN_IN)), submitButtonText: I18n.get(this.submitButtonText) }, h(\"amplify-auth-fields\", { formFields: this.newFormFields }))));\n    }\n    static get watchers() { return {\n        \"user\": [\"userHandler\"]\n    }; }\n};\n\nconst amplifySignInCss = \":host{--footer-size:var(--amplify-text-sm);--footer-color:var(--amplify-grey);--footer-font-family:var(--amplify-font-family);--font-weight:var(--amplify-font-weight)}.sign-in-form-footer{font-family:var(--footer-font-family);font-size:var(--footer-size);color:var(--footer-color);font-weight:--font-weight;display:-ms-flexbox;display:flex;-ms-flex-direction:column-reverse;flex-direction:column-reverse;-ms-flex-align:center;align-items:center;-ms-flex-pack:distribute;justify-content:space-around}.sign-in-form-footer amplify-button{margin-bottom:0.625rem}@media (min-width: 672px){.sign-in-form-footer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:baseline;align-items:baseline}.sign-in-form-footer amplify-button{margin-bottom:0}}.sign-in-form-footer *+*{margin-bottom:15px}.full-width-footer-content{width:100%}\";\n\nconst AmplifySignIn = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Fires when sign in form is submitted */\n        this.handleSubmit = event => this.signIn(event);\n        /** Used for header text in sign in component */\n        this.headerText = Translations.SIGN_IN_HEADER_TEXT;\n        /** Used for the submit button text in sign in component */\n        this.submitButtonText = Translations.SIGN_IN_ACTION;\n        /** Auth state change handler for this component */\n        // prettier-ignore\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        /** Username Alias is used to setup authentication with `username`, `email` or `phone_number`  */\n        this.usernameAlias = 'username';\n        /**\n         * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.\n         * by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing\n         * text for a label or adjust a placeholder, you can follow the structure below in order to do just that.\n         * ```\n         * [\n         *  {\n         *    type: string,\n         *    label: string,\n         *    placeholder: string,\n         *    hint: string | Functional Component | null,\n         *    required: boolean\n         *  }\n         * ]\n         * ```\n         */\n        this.formFields = [];\n        /** Hides the sign up link */\n        this.hideSignUp = false;\n        this.newFormFields = [];\n        /* Whether or not the sign-in component is loading */\n        this.loading = false;\n        this.phoneNumber = {\n            countryDialCodeValue: COUNTRY_DIAL_CODE_DEFAULT,\n            phoneNumberValue: null,\n        };\n        this.signInAttributes = {\n            userInput: '',\n            password: '',\n        };\n    }\n    componentWillLoad() {\n        checkUsernameAlias(this.usernameAlias);\n        this.buildFormFields();\n    }\n    formFieldsHandler() {\n        this.buildFormFields();\n    }\n    handleFormFieldInputChange(fieldType) {\n        switch (fieldType) {\n            case 'username':\n            case 'email':\n                return event => (this.signInAttributes.userInput = event.target.value);\n            case 'phone_number':\n                return event => handlePhoneNumberChange(event, this.phoneNumber);\n            case 'password':\n                return event => (this.signInAttributes.password = event.target.value);\n            default:\n                return () => { };\n        }\n    }\n    handleFormFieldInputWithCallback(event, field) {\n        const fnToCall = field['handleInputChange']\n            ? field['handleInputChange']\n            : (event, cb) => {\n                cb(event);\n            };\n        const callback = this.handleFormFieldInputChange(field.type);\n        fnToCall(event, callback.bind(this));\n    }\n    async signIn(event) {\n        // avoid submitting the form\n        if (event) {\n            event.preventDefault();\n        }\n        this.loading = true;\n        switch (this.usernameAlias) {\n            case 'phone_number':\n                try {\n                    this.signInAttributes.userInput = composePhoneNumberInput(this.phoneNumber);\n                }\n                catch (error) {\n                    dispatchToastHubEvent(error);\n                }\n        }\n        const username = this.signInAttributes.userInput.trim();\n        await handleSignIn(username, this.signInAttributes.password, this.handleAuthStateChange, this.usernameAlias);\n        this.loading = false;\n    }\n    buildDefaultFormFields() {\n        const formFieldInputs = [];\n        switch (this.usernameAlias) {\n            case 'email':\n                formFieldInputs.push({\n                    type: 'email',\n                    required: true,\n                    handleInputChange: this.handleFormFieldInputChange('email'),\n                    inputProps: {\n                        'data-test': 'sign-in-email-input',\n                        autocomplete: 'username',\n                    },\n                });\n                break;\n            case 'phone_number':\n                formFieldInputs.push({\n                    type: 'phone_number',\n                    required: true,\n                    handleInputChange: this.handleFormFieldInputChange('phone_number'),\n                    inputProps: {\n                        'data-test': 'sign-in-phone-number-input',\n                        autocomplete: 'username',\n                    },\n                });\n                break;\n            case 'username':\n            default:\n                formFieldInputs.push({\n                    type: 'username',\n                    required: true,\n                    handleInputChange: this.handleFormFieldInputChange('username'),\n                    inputProps: {\n                        'data-test': 'sign-in-username-input',\n                        autocomplete: 'username',\n                    },\n                });\n                break;\n        }\n        formFieldInputs.push({\n            type: 'password',\n            hint: (h(\"div\", null, I18n.get(Translations.FORGOT_PASSWORD_TEXT), ' ', h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.ForgotPassword), \"data-test\": \"sign-in-forgot-password-link\" }, I18n.get(Translations.RESET_PASSWORD_TEXT)))),\n            required: true,\n            handleInputChange: this.handleFormFieldInputChange('password'),\n            inputProps: {\n                'data-test': 'sign-in-password-input',\n            },\n        });\n        this.newFormFields = [...formFieldInputs];\n    }\n    buildFormFields() {\n        if (this.formFields.length === 0) {\n            this.buildDefaultFormFields();\n        }\n        else {\n            const newFields = [];\n            this.formFields.forEach(field => {\n                const newField = Object.assign({}, field);\n                // TODO: handle hint better\n                if (newField.type === 'password') {\n                    newField['hint'] = isHintValid(newField) ? (h(\"div\", null, I18n.get(Translations.FORGOT_PASSWORD_TEXT), ' ', h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.ForgotPassword), \"data-test\": \"sign-in-forgot-password-link\" }, I18n.get(Translations.RESET_PASSWORD_TEXT)))) : (newField['hint']);\n                }\n                newField['handleInputChange'] = event => this.handleFormFieldInputWithCallback(event, field);\n                this.setFieldValue(newField, this.signInAttributes);\n                newFields.push(newField);\n            });\n            this.newFormFields = newFields;\n        }\n    }\n    setFieldValue(field, formAttributes) {\n        switch (field.type) {\n            case 'username':\n            case 'email':\n                if (field.value === undefined) {\n                    formAttributes.userInput = '';\n                }\n                else {\n                    formAttributes.userInput = field.value;\n                }\n                break;\n            case 'phone_number':\n                if (field.dialCode) {\n                    this.phoneNumber.countryDialCodeValue = field.dialCode;\n                }\n                this.phoneNumber.phoneNumberValue = field.value;\n                break;\n            case 'password':\n                if (field.value === undefined) {\n                    formAttributes.password = '';\n                }\n                else {\n                    formAttributes.password = field.value;\n                }\n                break;\n        }\n    }\n    render() {\n        return (h(Host, null, h(\"amplify-form-section\", { headerText: I18n.get(this.headerText), handleSubmit: this.handleSubmit, testDataPrefix: 'sign-in' }, h(\"div\", { slot: \"subtitle\" }, h(\"slot\", { name: \"header-subtitle\" })), h(\"slot\", { name: \"federated-buttons\" }, h(\"amplify-federated-buttons\", { handleAuthStateChange: this.handleAuthStateChange, federated: this.federated })), !isEmpty(this.federated) && h(\"amplify-strike\", null, \"or\"), h(\"amplify-auth-fields\", { formFields: this.newFormFields }), h(\"div\", { slot: \"amplify-form-section-footer\", class: \"sign-in-form-footer\" }, h(\"slot\", { name: \"footer\" }, !this.hideSignUp && (h(\"slot\", { name: \"secondary-footer-content\" }, h(\"span\", null, I18n.get(Translations.NO_ACCOUNT_TEXT), ' ', h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.SignUp), \"data-test\": \"sign-in-create-account-link\" }, I18n.get(Translations.CREATE_ACCOUNT_TEXT))))), h(\"div\", { class: this.hideSignUp ? 'full-width-footer-content' : '' }, h(\"slot\", { name: \"primary-footer-content\" }, h(\"amplify-button\", { type: \"submit\", disabled: this.loading, \"data-test\": \"sign-in-sign-in-button\" }, this.loading ? (h(\"amplify-loading-spinner\", null)) : (h(\"span\", null, I18n.get(this.submitButtonText)))))))))));\n    }\n    static get watchers() { return {\n        \"formFields\": [\"formFieldsHandler\"]\n    }; }\n};\nAmplifySignIn.style = amplifySignInCss;\n\nconst amplifySignUpCss = \"amplify-sign-up{--footer-font-family:var(--amplify-font-family);--footer-font-size:var(--amplify-text-sm);--footer-color:var(--amplify-grey);--font-weight:var(--amplify-font-weight)}.sign-up-form-footer{font-family:var(--footer-font-family);font-size:var(--footer-font-size);color:var(--footer-color);font-weight:--font-weight;display:-ms-flexbox;display:flex;-ms-flex-direction:column-reverse;flex-direction:column-reverse;-ms-flex-align:center;align-items:center;-ms-flex-pack:distribute;justify-content:space-around}.sign-up-form-footer amplify-button{margin-bottom:0.625rem}@media (min-width: 672px){.sign-up-form-footer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:baseline;align-items:baseline}.sign-up-form-footer amplify-button{margin-bottom:0}}.sign-up-form-footer *+*{margin-bottom:15px}\";\n\nconst AmplifySignUp = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Fires when sign up form is submitted */\n        this.handleSubmit = event => this.signUp(event);\n        /** Override for handling the Auth.SignUp API call */\n        this.handleSignUp = params => this.authSignUp(params);\n        /** Used for header text in sign up component */\n        this.headerText = Translations.SIGN_UP_HEADER_TEXT;\n        /** Used for the submit button text in sign up component */\n        this.submitButtonText = Translations.SIGN_UP_SUBMIT_BUTTON_TEXT;\n        /** Used for the submit button text in sign up component */\n        this.haveAccountText = Translations.SIGN_UP_HAVE_ACCOUNT_TEXT;\n        /** Text used for the sign in hyperlink */\n        this.signInText = Translations.SIGN_IN_TEXT;\n        /**\n         * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.\n         * by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing\n         * text for a label or adjust a placeholder, you can follow the structure below in order to do just that.\n         * ```\n         * [\n         *  {\n         *    type: string,\n         *    label: string,\n         *    placeholder: string,\n         *    hint: string | Functional Component | null,\n         *    required: boolean\n         *  }\n         * ]\n         * ```\n         */\n        this.formFields = [];\n        /** Auth state change handler for this component\n         * e.g. SignIn -> 'Create Account' link -> SignUp\n         */\n        // prettier-ignore\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        /** Username Alias is used to setup authentication with `username`, `email` or `phone_number`  */\n        this.usernameAlias = 'username';\n        // private userInput: string | PhoneNumberInterface;\n        this.newFormFields = [];\n        this.phoneNumber = {\n            countryDialCodeValue: COUNTRY_DIAL_CODE_DEFAULT,\n            phoneNumberValue: null,\n        };\n        this.loading = false;\n        this.signUpAttributes = {\n            username: '',\n            password: '',\n            attributes: {},\n        };\n    }\n    handleFormFieldInputChange(fieldType) {\n        switch (fieldType) {\n            case 'username':\n                return event => (this.signUpAttributes.username = event.target.value);\n            case 'password':\n                return event => (this.signUpAttributes.password = event.target.value);\n            case 'email':\n                return event => (this.signUpAttributes.attributes.email = event.target.value);\n            case 'phone_number':\n                return event => handlePhoneNumberChange(event, this.phoneNumber);\n            default:\n                return event => (this.signUpAttributes.attributes[fieldType] = event.target.value);\n        }\n    }\n    handleFormFieldInputWithCallback(event, field) {\n        const fnToCall = field['handleInputChange']\n            ? field['handleInputChange']\n            : (event, cb) => {\n                cb(event);\n            };\n        const callback = this.handleFormFieldInputChange(field.type);\n        fnToCall(event, callback.bind(this));\n    }\n    async authSignUp(params) {\n        const data = await Auth.signUp(params);\n        if (!data) {\n            throw new Error(Translations.SIGN_UP_FAILED);\n        }\n        return data;\n    }\n    assignPhoneNumberToSignUpAttributes() {\n        if (this.phoneNumber.phoneNumberValue) {\n            try {\n                this.signUpAttributes.attributes.phone_number = composePhoneNumberInput(this.phoneNumber);\n            }\n            catch (error) {\n                dispatchToastHubEvent(error);\n            }\n        }\n    }\n    assignUserNameAliasToSignUpAttributes() {\n        switch (this.usernameAlias) {\n            case 'email':\n            case 'phone_number':\n                this.signUpAttributes.username = this.signUpAttributes.attributes[this.usernameAlias];\n                break;\n        }\n    }\n    assignFormInputToSignUpAttributes() {\n        this.assignPhoneNumberToSignUpAttributes();\n        this.assignUserNameAliasToSignUpAttributes();\n    }\n    validateSignUpAttributes() {\n        if (!this.signUpAttributes.username) {\n            if (this.usernameAlias === UsernameAlias.email) {\n                throw new Error(Translations.EMPTY_EMAIL);\n            }\n            else if (this.usernameAlias === UsernameAlias.phone_number) {\n                throw new Error(Translations.EMPTY_PHONE);\n            }\n            else {\n                throw new Error(Translations.EMPTY_USERNAME);\n            }\n        }\n        if (this.signUpAttributes.username.indexOf(' ') >= 0) {\n            throw new Error(Translations.USERNAME_REMOVE_WHITESPACE);\n        }\n        if (this.signUpAttributes.password !== this.signUpAttributes.password.trim()) {\n            throw new Error(Translations.PASSWORD_REMOVE_WHITESPACE);\n        }\n    }\n    // TODO: Add validation\n    // TODO: Prefix\n    async signUp(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        if (!Auth || typeof Auth.signUp !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        this.assignFormInputToSignUpAttributes();\n        try {\n            this.validateSignUpAttributes();\n            const data = await this.handleSignUp(this.signUpAttributes);\n            if (data.userConfirmed) {\n                await handleSignIn(this.signUpAttributes.username, this.signUpAttributes.password, this.handleAuthStateChange);\n            }\n            else {\n                const signUpAttrs = Object.assign({}, this.signUpAttributes);\n                this.handleAuthStateChange(AuthState.ConfirmSignUp, Object.assign(Object.assign({}, data.user), { signUpAttrs }));\n            }\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    buildDefaultFormFields() {\n        switch (this.usernameAlias) {\n            case 'email':\n                this.newFormFields = [\n                    {\n                        type: 'email',\n                        placeholder: I18n.get(Translations.SIGN_UP_EMAIL_PLACEHOLDER),\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('email'),\n                        inputProps: {\n                            'data-test': 'sign-up-email-input',\n                            autocomplete: 'username',\n                        },\n                    },\n                    {\n                        type: 'password',\n                        placeholder: I18n.get(Translations.SIGN_UP_PASSWORD_PLACEHOLDER),\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('password'),\n                        inputProps: {\n                            'data-test': 'sign-up-password-input',\n                            autocomplete: 'new-password',\n                        },\n                    },\n                    {\n                        type: 'phone_number',\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('phone_number'),\n                        inputProps: {\n                            'data-test': 'sign-up-phone-number-input',\n                            autocomplete: 'tel-national',\n                        },\n                    },\n                ];\n                break;\n            case 'phone_number':\n                this.newFormFields = [\n                    {\n                        type: 'phone_number',\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('phone_number'),\n                        inputProps: {\n                            'data-test': 'sign-up-phone-number-input',\n                            autocomplete: 'username',\n                        },\n                    },\n                    {\n                        type: 'password',\n                        placeholder: I18n.get(Translations.SIGN_UP_PASSWORD_PLACEHOLDER),\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('password'),\n                        inputProps: {\n                            'data-test': 'sign-up-password-input',\n                            autocomplete: 'new-password',\n                        },\n                    },\n                    {\n                        type: 'email',\n                        placeholder: I18n.get(Translations.SIGN_UP_EMAIL_PLACEHOLDER),\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('email'),\n                        inputProps: {\n                            'data-test': 'sign-up-email-input',\n                            autocomplete: 'email',\n                        },\n                    },\n                ];\n                break;\n            case 'username':\n            default:\n                this.newFormFields = [\n                    {\n                        type: 'username',\n                        placeholder: I18n.get(Translations.SIGN_UP_USERNAME_PLACEHOLDER),\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('username'),\n                        inputProps: {\n                            'data-test': 'sign-up-username-input',\n                            autocomplete: 'username',\n                        },\n                    },\n                    {\n                        type: 'password',\n                        placeholder: I18n.get(Translations.SIGN_UP_PASSWORD_PLACEHOLDER),\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('password'),\n                        inputProps: {\n                            'data-test': 'sign-up-password-input',\n                            autocomplete: 'new-password',\n                        },\n                    },\n                    {\n                        type: 'email',\n                        placeholder: I18n.get(Translations.SIGN_UP_EMAIL_PLACEHOLDER),\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('email'),\n                        inputProps: {\n                            'data-test': 'sign-up-email-input',\n                        },\n                    },\n                    {\n                        type: 'phone_number',\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('phone_number'),\n                        inputProps: {\n                            'data-test': 'sign-up-phone-number-input',\n                        },\n                    },\n                ];\n                break;\n        }\n    }\n    buildFormFields() {\n        if (this.formFields.length === 0) {\n            this.buildDefaultFormFields();\n        }\n        else {\n            const newFields = [];\n            this.formFields.forEach(field => {\n                const newField = Object.assign({}, field);\n                newField['handleInputChange'] = event => this.handleFormFieldInputWithCallback(event, field);\n                this.setFieldValue(field, this.signUpAttributes);\n                newFields.push(newField);\n            });\n            this.newFormFields = newFields;\n        }\n    }\n    setFieldValue(field, formAttributes) {\n        switch (field.type) {\n            case 'username':\n                if (field.value === undefined) {\n                    formAttributes.username = '';\n                }\n                else {\n                    formAttributes.username = field.value;\n                }\n                break;\n            case 'password':\n                if (field.value === undefined) {\n                    formAttributes.password = '';\n                }\n                else {\n                    formAttributes.password = field.value;\n                }\n                break;\n            case 'email':\n                formAttributes.attributes.email = field.value;\n                break;\n            case 'phone_number':\n                if (field.dialCode) {\n                    this.phoneNumber.countryDialCodeValue = field.dialCode;\n                }\n                this.phoneNumber.phoneNumberValue = field.value;\n                break;\n            default:\n                formAttributes.attributes[field.type] = field.value;\n                break;\n        }\n    }\n    componentWillLoad() {\n        checkUsernameAlias(this.usernameAlias);\n        this.buildFormFields();\n    }\n    formFieldsHandler() {\n        this.buildFormFields();\n    }\n    render() {\n        return (h(Host, null, h(\"amplify-form-section\", { headerText: I18n.get(this.headerText), handleSubmit: this.handleSubmit, testDataPrefix: 'sign-up' }, h(\"div\", { slot: \"subtitle\" }, h(\"slot\", { name: \"header-subtitle\" })), h(\"amplify-auth-fields\", { formFields: this.newFormFields }), h(\"div\", { class: \"sign-up-form-footer\", slot: \"amplify-form-section-footer\" }, h(\"slot\", { name: \"footer\" }, h(\"slot\", { name: \"secondary-footer-content\" }, h(\"span\", null, I18n.get(this.haveAccountText), ' ', h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.SignIn), \"data-test\": \"sign-up-sign-in-link\" }, I18n.get(this.signInText)))), h(\"slot\", { name: \"primary-footer-content\" }, h(\"amplify-button\", { type: \"submit\", \"data-test\": \"sign-up-create-account-button\", disabled: this.loading }, this.loading ? (h(\"amplify-loading-spinner\", null)) : (h(\"span\", null, I18n.get(this.submitButtonText))))))))));\n    }\n    static get watchers() { return {\n        \"formFields\": [\"formFieldsHandler\"]\n    }; }\n};\nAmplifySignUp.style = amplifySignUpCss;\n\nconst logger$2 = new Logger('AmplifyVerifyContact');\nconst AmplifyVerifyContact = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Authentication state handler */\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        this.loading = false;\n    }\n    handleSubmit(event) {\n        event.preventDefault();\n        this.verifyAttr ? this.submit(this.code) : this.verify(this.contact);\n    }\n    async submit(code) {\n        const attr = this.verifyAttr;\n        if (!Auth || typeof Auth.verifyCurrentUserAttributeSubmit !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        try {\n            const data = await Auth.verifyCurrentUserAttributeSubmit(attr, code);\n            logger$2.debug(data);\n            this.handleAuthStateChange(AuthState.SignedIn, this.user);\n            this.verifyAttr = null;\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n            logger$2.error(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    async verify(contact) {\n        if (!contact) {\n            logger$2.error('Neither Email nor Phone Number selected');\n            return;\n        }\n        if (!Auth || typeof Auth.verifyCurrentUserAttribute !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        try {\n            const data = await Auth.verifyCurrentUserAttribute(contact);\n            logger$2.debug(data);\n            this.verifyAttr = contact;\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n            logger$2.error(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    handleInputChange(event) {\n        const inputName = event.target.name;\n        if (inputName === 'code') {\n            this.code = event.target.value;\n        }\n        else if (inputName === 'contact') {\n            this.contact = event.target.value;\n        }\n    }\n    renderSubmit() {\n        return (h(\"div\", null, h(\"amplify-input\", { inputProps: {\n                autocomplete: 'off',\n                'data-test': 'verify-contact-code-input',\n            }, name: \"code\", placeholder: I18n.get(Translations.CODE_PLACEHOLDER), handleInputChange: event => this.handleInputChange(event) })));\n    }\n    renderVerify() {\n        const user = this.user;\n        if (!user) {\n            logger$2.debug('No user to verify');\n            return null;\n        }\n        const { unverified } = user;\n        if (!unverified) {\n            logger$2.debug('Unverified variable does not exist on user');\n            return null;\n        }\n        const { email, phone_number } = unverified;\n        return (h(\"div\", null, email && (h(\"amplify-radio-button\", { label: I18n.get(Translations.VERIFY_CONTACT_EMAIL_LABEL), key: \"email\", name: \"contact\", value: \"email\", handleInputChange: event => this.handleInputChange(event), inputProps: {\n                'data-test': 'verify-contact-email-radio',\n            } })), phone_number && (h(\"amplify-radio-button\", { label: I18n.get(Translations.VERIFY_CONTACT_PHONE_LABEL), key: \"phone_number\", name: \"contact\", value: \"phone_number\", handleInputChange: event => this.handleInputChange(event), inputProps: {\n                'data-test': 'verify-contact-phone-number-radio',\n            } }))));\n    }\n    render() {\n        return (h(Host, null, h(\"amplify-form-section\", { handleSubmit: event => this.handleSubmit(event), headerText: I18n.get(Translations.VERIFY_CONTACT_HEADER_TEXT), loading: this.loading, secondaryFooterContent: h(\"span\", null, h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.SignedIn, this.user), \"data-test\": \"verify-contact-skip-link\" }, \"Skip\")), submitButtonText: this.verifyAttr\n                ? I18n.get(Translations.VERIFY_CONTACT_SUBMIT_LABEL)\n                : I18n.get(Translations.VERIFY_CONTACT_VERIFY_LABEL) }, this.verifyAttr ? this.renderSubmit() : this.renderVerify())));\n    }\n};\n\nexport { AmplifyConfirmSignIn as amplify_confirm_sign_in, AmplifyConfirmSignUp as amplify_confirm_sign_up, AmplifyForgotPassword as amplify_forgot_password, AmplifyRequireNewPassword as amplify_require_new_password, AmplifySignIn as amplify_sign_in, AmplifySignUp as amplify_sign_up, AmplifyVerifyContact as amplify_verify_contact };\n"]},"metadata":{},"sourceType":"module"}