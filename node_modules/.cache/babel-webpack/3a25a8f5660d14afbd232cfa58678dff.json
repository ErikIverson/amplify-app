{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/eriki/Documents/GitHub/amplify-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Logger, isEmpty } from '@aws-amplify/core';\nimport { A as AuthState, C as ChallengeName, U as UsernameAlias } from './auth-types-78df304e.js';\nimport { Auth, CognitoUser } from '@aws-amplify/auth';\nimport { T as Translations } from './Translations-c833f663.js';\nimport { N as NO_AUTH_MODULE_FOUND } from './constants-c8ecaa24.js';\nimport { a as dispatchToastHubEvent } from './helpers-9703fe65.js';\nconst logger = new Logger('auth-helpers');\n\nfunction checkContact(_x, _x2) {\n  return _checkContact.apply(this, arguments);\n}\n\nfunction _checkContact() {\n  _checkContact = _asyncToGenerator(function* (user, handleAuthStateChange) {\n    if (!Auth || typeof Auth.verifiedContact !== 'function') {\n      throw new Error(NO_AUTH_MODULE_FOUND);\n    } // If `user` is a federated user, we shouldn't call `verifiedContact`\n    // since `user` isn't `CognitoUser`\n\n\n    if (!isCognitoUser(user)) {\n      handleAuthStateChange(AuthState.SignedIn, user);\n      return;\n    }\n\n    try {\n      const data = yield Auth.verifiedContact(user);\n\n      if (!isEmpty(data.verified) || isEmpty(data.unverified)) {\n        handleAuthStateChange(AuthState.SignedIn, user);\n      } else {\n        const newUser = Object.assign(user, data);\n        handleAuthStateChange(AuthState.VerifyContact, newUser);\n      }\n    } catch (error) {\n      dispatchToastHubEvent(error);\n    }\n  });\n  return _checkContact.apply(this, arguments);\n}\n\nconst handleSignIn = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (username, password, handleAuthStateChange, usernameAlias) {\n    if (!Auth || typeof Auth.signIn !== 'function') {\n      throw new Error(NO_AUTH_MODULE_FOUND);\n    }\n\n    try {\n      const user = yield Auth.signIn(username, password);\n      logger.debug(user);\n\n      if (user.challengeName === ChallengeName.SMSMFA || user.challengeName === ChallengeName.SoftwareTokenMFA) {\n        logger.debug('confirm user with ' + user.challengeName);\n        handleAuthStateChange(AuthState.ConfirmSignIn, user);\n      } else if (user.challengeName === ChallengeName.NewPasswordRequired) {\n        logger.debug('require new password', user.challengeParam);\n        handleAuthStateChange(AuthState.ResetPassword, user);\n      } else if (user.challengeName === ChallengeName.MFASetup) {\n        logger.debug('TOTP setup', user.challengeParam);\n        handleAuthStateChange(AuthState.TOTPSetup, user);\n      } else if (user.challengeName === ChallengeName.CustomChallenge && user.challengeParam && user.challengeParam.trigger === 'true') {\n        logger.debug('custom challenge', user.challengeParam);\n        handleAuthStateChange(AuthState.CustomConfirmSignIn, user);\n      } else {\n        yield checkContact(user, handleAuthStateChange);\n      }\n    } catch (error) {\n      if (error.code === 'UserNotConfirmedException') {\n        logger.debug('the user is not confirmed');\n        handleAuthStateChange(AuthState.ConfirmSignUp, {\n          username\n        });\n      } else if (error.code === 'PasswordResetRequiredException') {\n        logger.debug('the user requires a new password');\n        handleAuthStateChange(AuthState.ForgotPassword, {\n          username\n        });\n      } else if (error.code === 'InvalidParameterException' && password === '') {\n        logger.debug('Password cannot be empty');\n        error.message = Translations.EMPTY_PASSWORD;\n      } else if (error.message === Translations.EMPTY_USERNAME) {\n        if (usernameAlias === UsernameAlias.email) {\n          error.message = Translations.EMPTY_EMAIL;\n        }\n\n        if (usernameAlias === UsernameAlias.phone_number) {\n          error.message = Translations.EMPTY_PHONE;\n        }\n      }\n\n      dispatchToastHubEvent(error);\n    }\n  });\n\n  return function handleSignIn(_x3, _x4, _x5, _x6) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nconst isCognitoUser = user => {\n  return user instanceof CognitoUser;\n};\n\nexport { checkContact as c, handleSignIn as h };","map":{"version":3,"sources":["C:/Users/eriki/Documents/GitHub/amplify-app/node_modules/@aws-amplify/ui-components/dist/esm/auth-helpers-475f7fa4.js"],"names":["Logger","isEmpty","A","AuthState","C","ChallengeName","U","UsernameAlias","Auth","CognitoUser","T","Translations","N","NO_AUTH_MODULE_FOUND","a","dispatchToastHubEvent","logger","checkContact","user","handleAuthStateChange","verifiedContact","Error","isCognitoUser","SignedIn","data","verified","unverified","newUser","Object","assign","VerifyContact","error","handleSignIn","username","password","usernameAlias","signIn","debug","challengeName","SMSMFA","SoftwareTokenMFA","ConfirmSignIn","NewPasswordRequired","challengeParam","ResetPassword","MFASetup","TOTPSetup","CustomChallenge","trigger","CustomConfirmSignIn","code","ConfirmSignUp","ForgotPassword","message","EMPTY_PASSWORD","EMPTY_USERNAME","email","EMPTY_EMAIL","phone_number","EMPTY_PHONE","c","h"],"mappings":"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","sourcesContent":["import { Logger, isEmpty } from '@aws-amplify/core';\nimport { A as AuthState, C as ChallengeName, U as UsernameAlias } from './auth-types-78df304e.js';\nimport { Auth, CognitoUser } from '@aws-amplify/auth';\nimport { T as Translations } from './Translations-c833f663.js';\nimport { N as NO_AUTH_MODULE_FOUND } from './constants-c8ecaa24.js';\nimport { a as dispatchToastHubEvent } from './helpers-9703fe65.js';\n\nconst logger = new Logger('auth-helpers');\nasync function checkContact(user, handleAuthStateChange) {\n    if (!Auth || typeof Auth.verifiedContact !== 'function') {\n        throw new Error(NO_AUTH_MODULE_FOUND);\n    }\n    // If `user` is a federated user, we shouldn't call `verifiedContact`\n    // since `user` isn't `CognitoUser`\n    if (!isCognitoUser(user)) {\n        handleAuthStateChange(AuthState.SignedIn, user);\n        return;\n    }\n    try {\n        const data = await Auth.verifiedContact(user);\n        if (!isEmpty(data.verified) || isEmpty(data.unverified)) {\n            handleAuthStateChange(AuthState.SignedIn, user);\n        }\n        else {\n            const newUser = Object.assign(user, data);\n            handleAuthStateChange(AuthState.VerifyContact, newUser);\n        }\n    }\n    catch (error) {\n        dispatchToastHubEvent(error);\n    }\n}\nconst handleSignIn = async (username, password, handleAuthStateChange, usernameAlias) => {\n    if (!Auth || typeof Auth.signIn !== 'function') {\n        throw new Error(NO_AUTH_MODULE_FOUND);\n    }\n    try {\n        const user = await Auth.signIn(username, password);\n        logger.debug(user);\n        if (user.challengeName === ChallengeName.SMSMFA ||\n            user.challengeName === ChallengeName.SoftwareTokenMFA) {\n            logger.debug('confirm user with ' + user.challengeName);\n            handleAuthStateChange(AuthState.ConfirmSignIn, user);\n        }\n        else if (user.challengeName === ChallengeName.NewPasswordRequired) {\n            logger.debug('require new password', user.challengeParam);\n            handleAuthStateChange(AuthState.ResetPassword, user);\n        }\n        else if (user.challengeName === ChallengeName.MFASetup) {\n            logger.debug('TOTP setup', user.challengeParam);\n            handleAuthStateChange(AuthState.TOTPSetup, user);\n        }\n        else if (user.challengeName === ChallengeName.CustomChallenge &&\n            user.challengeParam &&\n            user.challengeParam.trigger === 'true') {\n            logger.debug('custom challenge', user.challengeParam);\n            handleAuthStateChange(AuthState.CustomConfirmSignIn, user);\n        }\n        else {\n            await checkContact(user, handleAuthStateChange);\n        }\n    }\n    catch (error) {\n        if (error.code === 'UserNotConfirmedException') {\n            logger.debug('the user is not confirmed');\n            handleAuthStateChange(AuthState.ConfirmSignUp, { username });\n        }\n        else if (error.code === 'PasswordResetRequiredException') {\n            logger.debug('the user requires a new password');\n            handleAuthStateChange(AuthState.ForgotPassword, { username });\n        }\n        else if (error.code === 'InvalidParameterException' && password === '') {\n            logger.debug('Password cannot be empty');\n            error.message = Translations.EMPTY_PASSWORD;\n        }\n        else if (error.message === Translations.EMPTY_USERNAME) {\n            if (usernameAlias === UsernameAlias.email) {\n                error.message = Translations.EMPTY_EMAIL;\n            }\n            if (usernameAlias === UsernameAlias.phone_number) {\n                error.message = Translations.EMPTY_PHONE;\n            }\n        }\n        dispatchToastHubEvent(error);\n    }\n};\nconst isCognitoUser = (user) => {\n    return user instanceof CognitoUser;\n};\n\nexport { checkContact as c, handleSignIn as h };\n"]},"metadata":{},"sourceType":"module"}