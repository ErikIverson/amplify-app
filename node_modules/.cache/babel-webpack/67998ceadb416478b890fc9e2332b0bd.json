{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/eriki/Documents/GitHub/amplify-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { r as registerInstance, h, H as Host } from './index-83f2275b.js';\nimport { Logger, I18n } from '@aws-amplify/core';\nimport { A as AccessLevel } from './storage-types-f257c0f2.js';\nimport '@aws-amplify/auth';\nimport { T as Translations } from './Translations-c833f663.js';\nimport './constants-c8ecaa24.js';\nimport '@aws-amplify/storage';\nimport { c as calcKey, p as putStorageObject } from './storage-helpers-1afafead.js';\nconst logger = new Logger('S3TextPicker');\nconst AmplifyS3TextPicker = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /** The content type header used when uploading to S3 */\n\n    this.contentType = 'text/*';\n    /** The access level of the text file */\n\n    this.level = AccessLevel.Public;\n    /** Fallback content for aplify-s3-text */\n\n    this.fallbackText = Translations.PICKER_TEXT;\n  }\n\n  handleInput(event) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const file = event.target.files[0];\n      const {\n        path = '',\n        level,\n        fileToKey,\n        track\n      } = _this;\n      const key = path + calcKey(file, fileToKey);\n\n      if (!file) {\n        throw new Error('No file was selected');\n      }\n\n      try {\n        yield putStorageObject(key, file, level, track, file['type'], logger);\n        _this.src = key;\n      } catch (error) {\n        logger.debug(error);\n        throw new Error(error);\n      }\n    })();\n  }\n\n  render() {\n    return h(Host, null, h(\"amplify-s3-text\", {\n      textKey: this.src,\n      path: this.path,\n      level: this.level,\n      track: this.track,\n      identityId: this.identityId,\n      contentType: this.contentType,\n      fallbackText: I18n.get(this.fallbackText)\n    }), h(\"amplify-picker\", {\n      inputHandler: e => this.handleInput(e),\n      acceptValue: 'text/*'\n    }));\n  }\n\n};\nexport { AmplifyS3TextPicker as amplify_s3_text_picker };","map":{"version":3,"sources":["C:/Users/eriki/Documents/GitHub/amplify-app/node_modules/@aws-amplify/ui-components/dist/esm/amplify-s3-text-picker.entry.js"],"names":["r","registerInstance","h","H","Host","Logger","I18n","A","AccessLevel","T","Translations","c","calcKey","p","putStorageObject","logger","AmplifyS3TextPicker","constructor","hostRef","contentType","level","Public","fallbackText","PICKER_TEXT","handleInput","event","file","target","files","path","fileToKey","track","key","Error","src","error","debug","render","textKey","identityId","get","inputHandler","e","acceptValue","amplify_s3_text_picker"],"mappings":";AAAA,SAASA,CAAC,IAAIC,gBAAd,EAAgCC,CAAhC,EAAmCC,CAAC,IAAIC,IAAxC,QAAoD,qBAApD;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,mBAA7B;AACA,SAASC,CAAC,IAAIC,WAAd,QAAiC,6BAAjC;AACA,OAAO,mBAAP;AACA,SAASC,CAAC,IAAIC,YAAd,QAAkC,4BAAlC;AACA,OAAO,yBAAP;AACA,OAAO,sBAAP;AACA,SAASC,CAAC,IAAIC,OAAd,EAAuBC,CAAC,IAAIC,gBAA5B,QAAoD,+BAApD;AAEA,MAAMC,MAAM,GAAG,IAAIV,MAAJ,CAAW,cAAX,CAAf;AACA,MAAMW,mBAAmB,GAAG,MAAM;AAC9BC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBjB,IAAAA,gBAAgB,CAAC,IAAD,EAAOiB,OAAP,CAAhB;AACA;;AACA,SAAKC,WAAL,GAAmB,QAAnB;AACA;;AACA,SAAKC,KAAL,GAAaZ,WAAW,CAACa,MAAzB;AACA;;AACA,SAAKC,YAAL,GAAoBZ,YAAY,CAACa,WAAjC;AACH;;AACKC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAAA;;AAAA;AACrB,YAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAb;AACA,YAAM;AAAEC,QAAAA,IAAI,GAAG,EAAT;AAAaT,QAAAA,KAAb;AAAoBU,QAAAA,SAApB;AAA+BC,QAAAA;AAA/B,UAAyC,KAA/C;AACA,YAAMC,GAAG,GAAGH,IAAI,GAAGjB,OAAO,CAACc,IAAD,EAAOI,SAAP,CAA1B;;AACA,UAAI,CAACJ,IAAL,EAAW;AACP,cAAM,IAAIO,KAAJ,CAAU,sBAAV,CAAN;AACH;;AACD,UAAI;AACA,cAAMnB,gBAAgB,CAACkB,GAAD,EAAMN,IAAN,EAAYN,KAAZ,EAAmBW,KAAnB,EAA0BL,IAAI,CAAC,MAAD,CAA9B,EAAwCX,MAAxC,CAAtB;AACA,QAAA,KAAI,CAACmB,GAAL,GAAWF,GAAX;AACH,OAHD,CAIA,OAAOG,KAAP,EAAc;AACVpB,QAAAA,MAAM,CAACqB,KAAP,CAAaD,KAAb;AACA,cAAM,IAAIF,KAAJ,CAAUE,KAAV,CAAN;AACH;AAdoB;AAexB;;AACDE,EAAAA,MAAM,GAAG;AACL,WAAQnC,CAAC,CAACE,IAAD,EAAO,IAAP,EAAaF,CAAC,CAAC,iBAAD,EAAoB;AAAEoC,MAAAA,OAAO,EAAE,KAAKJ,GAAhB;AAAqBL,MAAAA,IAAI,EAAE,KAAKA,IAAhC;AAAsCT,MAAAA,KAAK,EAAE,KAAKA,KAAlD;AAAyDW,MAAAA,KAAK,EAAE,KAAKA,KAArE;AAA4EQ,MAAAA,UAAU,EAAE,KAAKA,UAA7F;AAAyGpB,MAAAA,WAAW,EAAE,KAAKA,WAA3H;AAAwIG,MAAAA,YAAY,EAAEhB,IAAI,CAACkC,GAAL,CAAS,KAAKlB,YAAd;AAAtJ,KAApB,CAAd,EAAwNpB,CAAC,CAAC,gBAAD,EAAmB;AAAEuC,MAAAA,YAAY,EAAEC,CAAC,IAAI,KAAKlB,WAAL,CAAiBkB,CAAjB,CAArB;AAA0CC,MAAAA,WAAW,EAAE;AAAvD,KAAnB,CAAzN,CAAT;AACH;;AA5B6B,CAAlC;AA+BA,SAAS3B,mBAAmB,IAAI4B,sBAAhC","sourcesContent":["import { r as registerInstance, h, H as Host } from './index-83f2275b.js';\nimport { Logger, I18n } from '@aws-amplify/core';\nimport { A as AccessLevel } from './storage-types-f257c0f2.js';\nimport '@aws-amplify/auth';\nimport { T as Translations } from './Translations-c833f663.js';\nimport './constants-c8ecaa24.js';\nimport '@aws-amplify/storage';\nimport { c as calcKey, p as putStorageObject } from './storage-helpers-1afafead.js';\n\nconst logger = new Logger('S3TextPicker');\nconst AmplifyS3TextPicker = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** The content type header used when uploading to S3 */\n        this.contentType = 'text/*';\n        /** The access level of the text file */\n        this.level = AccessLevel.Public;\n        /** Fallback content for aplify-s3-text */\n        this.fallbackText = Translations.PICKER_TEXT;\n    }\n    async handleInput(event) {\n        const file = event.target.files[0];\n        const { path = '', level, fileToKey, track } = this;\n        const key = path + calcKey(file, fileToKey);\n        if (!file) {\n            throw new Error('No file was selected');\n        }\n        try {\n            await putStorageObject(key, file, level, track, file['type'], logger);\n            this.src = key;\n        }\n        catch (error) {\n            logger.debug(error);\n            throw new Error(error);\n        }\n    }\n    render() {\n        return (h(Host, null, h(\"amplify-s3-text\", { textKey: this.src, path: this.path, level: this.level, track: this.track, identityId: this.identityId, contentType: this.contentType, fallbackText: I18n.get(this.fallbackText) }), h(\"amplify-picker\", { inputHandler: e => this.handleInput(e), acceptValue: 'text/*' })));\n    }\n};\n\nexport { AmplifyS3TextPicker as amplify_s3_text_picker };\n"]},"metadata":{},"sourceType":"module"}